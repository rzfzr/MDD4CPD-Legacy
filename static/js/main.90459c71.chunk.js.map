{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","components/PrismEdit.tsx","components/Code.tsx","components/react-diagrams/TrayWidget.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/myNode/MyLinkModel.ts","components/react-diagrams/myNode/MyPortModel.ts","components/react-diagrams/myNode/MyNodeModel.ts","components/react-diagrams/helpers/DemoCanvasWidget.tsx","components/react-diagrams/diamond/DiamondPortModel.ts","components/react-diagrams/diamond/DiamondNodeModel.ts","components/react-diagrams/custom-label/EditableLabelModel.ts","components/react-diagrams/custom-node/custom_nodes/editableNode/EditablePortModel.ts","components/react-diagrams/custom-node/custom_nodes/editableNode/EditableNodeModel.ts","components/react-diagrams/editableNode/MyEditableNodeModel.ts","paletteNodes.js","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/custom-label/EditableLabelWidget.tsx","components/react-diagrams/custom-label/EditableLabelFactory.tsx","components/react-diagrams/custom-node/custom_components/EditableSingleField.tsx","components/react-diagrams/custom-node/custom_nodes/editableNode/EditableNodeWidget.tsx","components/react-diagrams/custom-node/custom_nodes/editableNode/EditableNodeFactory.tsx","components/react-diagrams/diamond/DiamondNodeWidget.tsx","components/react-diagrams/diamond/DiamondNodeFactory.tsx","components/react-diagrams/diamond/SimplePortFactory.ts","components/react-diagrams/custom-node/custom_components/SelectableField.tsx","components/react-diagrams/editableNode/MyEditableNodeWidget.tsx","components/react-diagrams/editableNode/MyEditableNodeFactory.tsx","components/react-diagrams/Application.ts","components/react-diagrams/index.tsx","pages/Editor.tsx","pages/Home.tsx","assets/staticCYM.png","pages/Models.tsx","assets/state.png","pages/State.tsx","pages/Palette.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","Edit","editorRef","useRef","code","setCode","onEditableChange","useCallback","slice","useEditable","disabled","indentation","defaultProps","language","className","tokens","getTokenProps","getLineProps","ref","map","line","i","Fragment","filter","token","empty","key","generateCode","model","Object","keys","length","links","entries","layers","models","forEach","x","nodes","logics","components","controllers","libraries","n","extras","type","instance","name","toLowerCase","c","library","includes","controller","add","message","m","getLink","linkID","find","l","id","getPort","nodeID","portID","ports","p","getNode","getCoditionalValue","conditionNode","portName","link","port","source","sourcePort","parent","getParent","content","error","childNode","parentNode","analogPorts","digitalPorts","lib","comp","removeType","String","split","toPort","target","targetPort","toNode","fromPort","fromNode","xValue","yValue","outcome","getOutcome","console","log","call","variable","shift","original","level","repeat","join","indentCode","Code","useEffect","Prism","highlightAll","setInterval","temp","localStorage","getItem","setItem","JSON","parse","PrismEdit","S","styled","div","TrayWidget","Tray","this","props","children","React","TrayItemWidget","draggable","onDragStart","dataTransfer","setData","stringify","MyLinkModel","options","width","selectedColor","curvyness","getOptions","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","getSourceControl","translate","calculateControlOffset","getSourcePort","getTargetControl","getTargetPort","getSVGCurve","data","fireEvent","LinkModel","MyPortModel","in","PortModel","MyNodeModel","portsIn","portsOut","lookupTable","splice","indexOf","after","addPort","_","portsInOrder","getPortFromID","portsOutOrder","getID","NodeModel","background","css","DemoCanvasWidget","styles","Expand","Container","DiamondPortModel","DefaultLinkModel","DiamondNodeModel","BOTTOM","EditableLabelModel","LabelModel","EditablePortModel","pos","EditableNodeModel","merge","MyEditableNodeModel","ins","outs","lastType","BodyWidget","app","getDiagramEngine","getModel","serialize","Body","Content","height","paletteNodes","node","margin","fontSize","Layer","onDrop","getData","setPosition","getRelativeMousePoint","addNode","node1","DefaultNodeModel","port1","addOutPort","node2","port2","addInPort","link1","addLabel","addAll","method","forceUpdate","onDragOver","preventDefault","engine","EditableLabelWidget","str","setStr","Label","newVal","onClick","action","EditableLabelFactory","AbstractReactFactory","Editor","onBlurOrEnter","autoFocus","inputStyle","padding","borderStyle","borderWidth","borderColor","onBlur","onKeyDown","keyCode","EditableSingleField","state","beingEdited","editingKey","elementKey","fontStyle","isAbstract","EditableNodeWidget","divElement","_editableObjectDoubleClick","editingSomething","setState","_contentOnChange","evt","nodeModel","currentTarget","_onBlurOrEnter","bind","clientHeight","clientWidth","onDoubleClick","zIndex","left","EditableNodeFactory","DiamondNodeWidget","size","dangerouslySetInnerHTML","__html","isSelected","Port","DiamondNodeFactory","SimplePortFactory","cb","initialConfig","AbstractModelFactory","y","SelectableField","selected","MyEditableNodeWidget","generatePort","variableType","Node","Title","TitleName","Ports","PortsContainer","getInPorts","getOutPorts","MyEditableNodeFactory","Application","activeModel","diagramEngine","SRD","getPortFactories","registerFactory","config","getLabelFactories","getNodeFactories","newModel","setModel","EditorPage","HomePage","ModelsPage","src","modelsDiagram","alt","maxHeight","maxWidth","StatePage","stateDiagram","PalettePage","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90459c71.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport { AppBar } from '@material-ui/core';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Models\" value=\"/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction label=\"State\" value=\"/state\" icon={<SwapHorizIcon />} />\r\n                <BottomNavigationAction label=\"Editor\" value=\"/editor\" icon={<EditIcon />} />\r\n                <BottomNavigationAction label=\"Palette\" value=\"/palette\" icon={<PaletteIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import React, { useState, useRef, useCallback } from \"react\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport { useEditable } from \"use-editable\";\r\n\r\nconst Edit = () => {\r\n    const editorRef = useRef(null);\r\n    const [code, setCode] = useState(\r\n        'function test() {}\\n\\nconsole.log(\"hello\");'\r\n    );\r\n\r\n    const onEditableChange = useCallback((code) => {\r\n        setCode(code.slice(0, -1));\r\n    }, []);\r\n\r\n    useEditable(editorRef, onEditableChange, {\r\n        disabled: false,\r\n        indentation: 2\r\n    });\r\n\r\n    return (\r\n        <Highlight {...defaultProps} code={code} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <pre className={className} style={style} ref={editorRef}>\r\n                    {tokens.map((line, i) => (\r\n                        <React.Fragment key={i}>\r\n                            {line\r\n                                .filter((token) => !token.empty)\r\n                                .map((token, key) => (\r\n                                    <span {...getTokenProps({ token, key })} />\r\n                                ))}\r\n                            {\"\\n\"}\r\n                        </React.Fragment>\r\n                    ))}\r\n                </pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n};\r\n\r\nexport default Edit;\r\n","import { useEffect, useState } from \"react\";\r\nimport Prism from \"prismjs\";\r\n// import \"prismjs/themes/prism-tomorrow.css\";\r\nimport \"./prism.css\";\r\nimport PrismEdit from \"./PrismEdit\";\r\n\r\n\r\nfunction generateCode(model: any): string {\r\n    let code = ''\r\n    if (Object.keys(model).length === 0) {\r\n        return '// Empty Diagram!';\r\n    }\r\n    let links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    let nodes: any[] = []\r\n    let logics: any[] = []\r\n    let components: any[] = []\r\n    let controllers: any[] = []\r\n    let libraries: any[] = []\r\n\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        const n = x[1]\r\n        nodes.push(n)\r\n        switch (n.extras.type) {\r\n            case 'component':\r\n                n.instance = n.name.toLowerCase() + components.filter(c => c.extras.library === n.extras.library).length\r\n                components.push(n)\r\n                if (!libraries.includes(n.extras.library))\r\n                    libraries.push(n.extras.library)\r\n                break\r\n            case 'controller':\r\n                controllers.push(n)\r\n                break\r\n            case 'logic':\r\n                logics.push(n)\r\n                break\r\n        }\r\n    })\r\n\r\n    // console.log('Generating from model:', model, 'Parsed ', nodes, logics, components, controllers)\r\n\r\n    if (nodes.length === 0) return '// You need at least one Node!'\r\n    if (controllers.length === 0) return '// You need an Arduino!'\r\n    if (controllers.length > 1) return '// Only one Arduino allowed!'\r\n\r\n    let controller = controllers[0]\r\n\r\n    let add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n    };\r\n    let getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    let getPort = (nodeID: string, portID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID).ports\r\n            .find((p: any) => p.id === portID);\r\n    }\r\n    let getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    let getCoditionalValue = (conditionNode: any, portName: any): string => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === portName).links[0]\r\n            let link = getLink(linkID)\r\n            let port = getPort(link.source, link.sourcePort)\r\n            let parent = getParent(port)\r\n\r\n            if (parent.extras.type === 'variable') {\r\n                return parent.content\r\n            }\r\n            else if (parent.extras.type === 'component') {\r\n                return parent.instance + '.' + port.name\r\n            } else {\r\n                return 'Unknown extras.type'\r\n\r\n            }\r\n        } catch (error) {\r\n            return '/* Lacking Value */'\r\n        }\r\n    }\r\n    let getOutcome = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'True').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.target, link.targetPort)\r\n        } catch (error) {\r\n            return { label: '// Lacking Outcome' }\r\n        }\r\n    }\r\n    let getParent = (childNode: any) => {\r\n        return nodes.find((n: any) => n.id === childNode.parentNode)\r\n    }\r\n    add(\"/* Code generated for \", controller.name);\r\n    add('Analog ports N/' + controller.extras.analogPorts)\r\n    add('Digital ports M/' + controller.extras.digitalPorts)\r\n    add(\"*/\")\r\n    add('')\r\n\r\n    libraries.forEach(lib => {\r\n        add('#include <' + lib + '>')\r\n        components.forEach(comp => {\r\n            if (comp.extras.library === lib)\r\n                add(comp.name + ' ' + comp.instance)\r\n        });\r\n        add('')\r\n    });\r\n\r\n\r\n    let removeType = (name: string): string => {//todo: should accept multiple\r\n        return String(name.split(' ').slice(-1))\r\n    }\r\n    let replaceVariable = (call: string, variable: string) => {//todo: should accept multiple\r\n        console.log('replacing', call, variable)\r\n        return call.split(\"(\").shift() + '(' + variable + ')'\r\n    }\r\n\r\n    let content: string | null = null\r\n    controller.ports.forEach((port: any) => {\r\n        add(port.label, \"{\");\r\n        port.links.forEach((l: any) => {\r\n            let link = getLink(l);\r\n            let toPort = getPort(link.target, link.targetPort)\r\n            let toNode = getNode(toPort.parentNode)\r\n            let fromPort = getPort(link.source, link.sourcePort)\r\n            let fromNode = getNode(fromPort.parentNode)\r\n            if (toNode.name === \"Condition\") {\r\n                let xValue = getCoditionalValue(toNode, 'x')\r\n                let yValue = getCoditionalValue(toNode, 'y')\r\n                let outcome = getOutcome(toNode)\r\n                console.log('here', link, toNode, toPort, xValue, yValue, outcome)\r\n                add('if (', xValue, ' ' + toNode.content + ' ', yValue, ') {')\r\n                add(getParent(outcome)?.instance + '.' + outcome.label)\r\n                add(\"}\\n\");\r\n            } else {\r\n                if (toNode.extras.type === 'variable') {\r\n                    content = toNode.content\r\n                    toNode.ports.forEach((port: any) => {\r\n                        port.links.forEach((l: any) => {\r\n                            let link = getLink(l);\r\n                            let toPort = getPort(link.target, link.targetPort)\r\n                            let toNode = getNode(toPort.parentNode)\r\n\r\n                            if (toNode.instance && content) {\r\n                                add(toNode.instance + '.' + replaceVariable(removeType(toPort.name), content))\r\n                                content = null;\r\n                            }\r\n                        })\r\n                    })\r\n                } else {\r\n                    if (toNode.instance) {\r\n                        add(toNode.instance + '.' + removeType(toPort.name))\r\n                    } else {\r\n                        add(fromNode.instance + '.' + removeType(fromPort.name))\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        add(\"}\\n\");\r\n    })\r\n\r\n    function indentCode(original: string) {\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return indentCode(code);\r\n}\r\nexport default function Code() {\r\n    const [code, setCode] = useState('Initializing Generator')\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n        setInterval(() => {\r\n            try {\r\n                let temp = localStorage.getItem('model')\r\n                if (temp !== localStorage.getItem('oldModel')) {\r\n                    localStorage.setItem('oldModel', temp || '{}')\r\n                    setCode(generateCode(JSON.parse(temp || '{}')));\r\n                    Prism.highlightAll();\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n        }, 1500)\r\n    }, []);\r\n    return (\r\n        <>\r\n            <div className=\"Code\">\r\n                <pre >\r\n                    <code className=\"language-clike\">{code}</code>\r\n                </pre>\r\n            </div>\r\n            <PrismEdit />\r\n\r\n        </>\r\n    );\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tfont-size:0.8em;\n\t\tpadding: 0px 5px;\n\t\tmargin:\t 0px ;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 100px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color || 'red'}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","// LabelModel,\r\nimport {\r\n\tLinkModel,\r\n\tLinkModelGenerics,\r\n\tLinkModelListener,\r\n\tPortModel,\r\n\tPortModelAlignment\r\n} from '@projectstorm/react-diagrams-core';\r\n// import { DefaultLabelModel } from './DefaultLabelModel';\r\nimport { BezierCurve } from '@projectstorm/geometry';\r\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nexport interface DefaultLinkModelListener extends LinkModelListener {\r\n\t// colorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\r\n\r\n\t// widthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\r\n\twidth?: number;\r\n\tcolor?: string;\r\n\tselectedColor?: string;\r\n\tcurvyness?: number;\r\n\ttype?: string;\r\n\ttestName?: string;\r\n}\r\n\r\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\r\n\tLISTENER: DefaultLinkModelListener;\r\n\tOPTIONS: DefaultLinkModelOptions;\r\n}\r\n\r\nexport class MyLinkModel extends LinkModel<DefaultLinkModelGenerics> {\r\n\tconstructor(options: DefaultLinkModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\ttype: 'default',\r\n\t\t\twidth: options.width || 3,\r\n\t\t\tcolor: options.color || 'gray',\r\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\r\n\t\t\tcurvyness: 50,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tcalculateControlOffset(port: PortModel): [number, number] {\r\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\r\n\t\t\treturn [this.options.curvyness || 0, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\r\n\t\t\treturn [-(this.options.curvyness || 0), 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\r\n\t\t\treturn [0, -(this.options.curvyness || 0)];\r\n\t\t}\r\n\t\treturn [0, this.options.curvyness || 0];\r\n\t}\r\n\r\n\tgetSVGPath(): string | undefined {\r\n\t\tif (this.points.length === 2) {\r\n\t\t\tconst curve = new BezierCurve();\r\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\r\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\r\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\r\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\r\n\r\n\t\t\tif (this.sourcePort) {\r\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\r\n\t\t\t}\r\n\r\n\t\t\tif (this.targetPort) {\r\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\r\n\t\t\t}\r\n\t\t\treturn curve.getSVGCurve();\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\twidth: this.options.width,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tcurvyness: this.options.curvyness,\r\n\t\t\tselectedColor: this.options.selectedColor\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.options.width = event.data.width;\r\n\t\tthis.options.curvyness = event.data.curvyness;\r\n\t\tthis.options.selectedColor = event.data.selectedColor;\r\n\t}\r\n\tsetWidth(width: number) {\r\n\t\tthis.options.width = width;\r\n\t\tthis.fireEvent({ width }, 'widthChanged');\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.options.color = color;\r\n\t\tthis.fireEvent({ color }, 'colorChanged');\r\n\t}\r\n}\r\n","import {\r\n\tLinkModel,\r\n\tPortModel,\r\n\tPortModelAlignment,\r\n\tPortModelGenerics,\r\n\tPortModelOptions\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { MyLinkModel } from './MyLinkModel';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultPortModelOptions extends PortModelOptions {\r\n\tlabel?: string;\r\n\tin?: boolean;\r\n}\r\n\r\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\r\n\tOPTIONS: DefaultPortModelOptions;\r\n}\r\n\r\nexport class MyPortModel extends PortModel<DefaultPortModelGenerics> {\r\n\tconstructor(isIn: boolean, name?: string, label?: string);\r\n\tconstructor(options: DefaultPortModelOptions);\r\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\r\n\t\tif (!!name) {\r\n\t\t\toptions = {\r\n\t\t\t\tin: !!options,\r\n\t\t\t\tname: name,\r\n\t\t\t\tlabel: label\r\n\t\t\t};\r\n\t\t}\r\n\t\toptions = options as DefaultPortModelOptions;\r\n\t\tsuper({\r\n\t\t\tlabel: options.label || options.name,\r\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\r\n\t\t\ttype: 'default',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.in = event.data.in;\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tin: this.options.in,\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\t// if (port instanceof DefaultPortModel) {\r\n\t\t// \treturn this.options.in !== port.getOptions().in;\r\n\t\t// }\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(): LinkModel {\r\n\t\tconst link = new MyLinkModel();\r\n\t\t// let label = new DefaultLabelModel();\r\n\t\t// label.setLabel(\"I'm a sad label\");\r\n\t\t// link.addLabel(label)\r\n\t\treturn link\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from './MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    protected portsIn: MyPortModel[];\r\n    protected portsOut: MyPortModel[];\r\n    extras: any;\r\n\r\n    constructor(name: string, color: string);\r\n    constructor(options?: DefaultNodeModelOptions);\r\n    constructor(options: any = {}, color?: string) {\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                name: options,\r\n                color: color\r\n            };\r\n        }\r\n        super({\r\n            type: 'default',\r\n            name: 'Untitled',\r\n            color: 'rgb(0,192,255)',\r\n            ...options\r\n        });\r\n        this.portsOut = [];\r\n        this.portsIn = [];\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras\r\n        };\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nnamespace S {\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import { LinkModel, PortModel, DefaultLinkModel, PortModelAlignment } from '@projectstorm/react-diagrams';\n\nexport class DiamondPortModel extends PortModel {\n\tconstructor(alignment: PortModelAlignment) {\n\t\tsuper({\n\t\t\ttype: 'diamond',\n\t\t\tname: alignment,\n\t\t\talignment: alignment\n\t\t});\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n}\n","import { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams';\nimport { DiamondPortModel } from './DiamondPortModel';\n\nexport interface DiamondNodeModelGenerics {\n\tPORT: DiamondPortModel;\n}\n\nexport class DiamondNodeModel extends NodeModel<NodeModelGenerics & DiamondNodeModelGenerics> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diamond'\n\t\t});\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.TOP));\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.LEFT));\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.BOTTOM));\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.RIGHT));\n\t}\n}\n","import { LabelModel } from '@projectstorm/react-diagrams';\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface EditableLabelOptions extends BaseModelOptions {\n\tvalue?: string;\n}\n\nexport class EditableLabelModel extends LabelModel {\n\tvalue: string;\n\n\tconstructor(options: EditableLabelOptions = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'editable-label'\n\t\t});\n\t\tthis.value = options.value || '';\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tvalue: this.value\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>): void {\n\t\tsuper.deserialize(event);\n\t\tthis.value = event.data.value;\n\t}\n}\n","//@ts-nocheck\nimport * as _ from \"lodash\";\nimport { PortModel, PortModelAlignment } from \"@projectstorm/react-diagrams\";\n\nexport class EditablePortModel extends PortModel {\n\n\tconstructor(pos: PortModelAlignment = PortModelAlignment.TOP) {\n\t\tsuper({ alignment: pos, name: pos });\n\t}\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tposition: this.options.alignment\n\t\t});\n\t}\n}\n","import { EditablePortModel } from \"./EditablePortModel\";\r\nimport _ from \"lodash\";\r\nimport { NodeModel, PortModelAlignment } from '@projectstorm/react-diagrams'\r\nexport class EditableNodeModel extends NodeModel {\r\n  content: string;\r\n  constructor(\r\n    content: string = \"content\"\r\n  ) {\r\n    super({ type: \"Editable\" });\r\n    this.content = content;\r\n    this.addPort(new EditablePortModel(PortModelAlignment.LEFT));\r\n    this.addPort(new EditablePortModel(PortModelAlignment.RIGHT));\r\n  }\r\n\r\n  serialize() {\r\n    return _.merge(super.serialize(), {\r\n      content: this.content\r\n    });\r\n  }\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from '../myNode/MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyEditableNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    protected portsIn: MyPortModel[];\r\n    protected portsOut: MyPortModel[];\r\n    content: string;\r\n    extras: any;\r\n    constructor(name: string, color: string, value: string);\r\n    // constructor(options?: DefaultNodeModelOptions);\r\n    constructor(options: any = {}, color?: string) {\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                name: options,\r\n                color: color,\r\n            };\r\n        }\r\n        super({\r\n            type: 'MyEditable',\r\n            name: 'Untitled',\r\n            color: 'rgb(0,192,255)',\r\n            value: 'value',\r\n            content: 'value',\r\n            ...options\r\n        });\r\n        this.content = 'value'\r\n        this.portsOut = [];\r\n        this.portsIn = [];\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras,\r\n            content: this.content\r\n        };\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [{\r\n        name: 'Arduino Uno',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 14,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Mega',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 16,\r\n            digitalPorts: 54,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    }, {\r\n        name: 'Digital Port',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'port'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'port',\r\n        ]\r\n    }, {\r\n        name: 'Analog Port',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'port'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'port',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Condition',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n            'x',\r\n            'y'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Loop',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'startValue',\r\n            'stopValue'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Led',\r\n        color: 'red',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Setter.h'\r\n        },\r\n        ins: [\r\n            'setValue()'\r\n        ],\r\n        outs: []\r\n\r\n    },\r\n    {\r\n        name: 'TemperatureSensor',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Getter.h'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'getValue()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Button',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Getter.h'\r\n        },\r\n        ins: [\r\n            'setValue(bool)'\r\n        ],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Servo.h'\r\n        },\r\n        ins: [\r\n            'void detach()',\r\n            'void write(int)',\r\n            'void writeMicroseconds(int)',\r\n        ],\r\n        outs: [\r\n            'uint8_t attach(int)',\r\n            'uint8_t attach(int, int, int)',\r\n            'int read()',\r\n            'int readMicroseconds()',\r\n            'bool attached()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Stepper',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Stepper.h'\r\n        },\r\n        ins: [\r\n            'Stepper(int, int, int)',\r\n            'Stepper(int, int, int, int, int)',\r\n            'Stepper(int, int, int, int, int, int)',\r\n            'void setSpeed(long whatSpeed)',\r\n            'void step(int number_of_steps)',\r\n        ],\r\n        outs: [\r\n            'int version(void)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable Integer',\r\n        color: 'purple',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [\r\n            'void setValue(int)',\r\n        ],\r\n        outs: [\r\n            'int getValue()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable Boolean',\r\n        color: 'purple',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [\r\n            'void setValue(bool)',\r\n        ],\r\n        outs: [\r\n            'bool getValue()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Constant Integer',\r\n        color: 'purple',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'int',\r\n        ]\r\n    }, {\r\n        name: 'Constant Boolean',\r\n        color: 'purple',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'bool',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Diamond',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'testing'\r\n        },\r\n        ins: [],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'LabelEdit',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'testing'\r\n        },\r\n        ins: [],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'NodeEdit',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'testing'\r\n        },\r\n        ins: [],\r\n        outs: []\r\n    }\r\n]","import * as React from 'react';\r\nimport { TrayWidget } from './TrayWidget';\r\nimport { Application } from './Application';\r\nimport { TrayItemWidget } from './TrayItemWidget';\r\nimport { MyNodeModel } from './myNode/MyNodeModel';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { DemoCanvasWidget } from './helpers/DemoCanvasWidget';\r\nimport styled from '@emotion/styled';\r\nimport { DiamondNodeModel } from './diamond/DiamondNodeModel';\r\nimport { EditableLabelModel } from './custom-label/EditableLabelModel';\r\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\r\nimport { EditableNodeModel } from './custom-node/custom_nodes/editableNode/EditableNodeModel';\r\nimport { MyEditableNodeModel } from './editableNode/MyEditableNodeModel';\r\nimport paletteNodes from '../../paletteNodes';\r\n\r\nexport interface BodyWidgetProps {\r\n\tapp: Application;\r\n}\r\n\r\nnamespace S {\r\n\texport const Body = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-height: 100%;\r\n\t`;\r\n\r\n\texport const Header = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground: rgb(30, 30, 30);\r\n\t\tflex-grow: 0;\r\n\t\tflex-shrink: 0;\r\n\t\tcolor: white;\r\n\t\tfont-family: Helvetica, Arial, sans-serif;\r\n\t\tpadding: 10px;\r\n\t\talign-items: center;\r\n\t`;\r\n\r\n\texport const Content = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n\texport const Layer = styled.div`\r\n\t\tposition: relative;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n}\r\nlet lastType = ''\r\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\r\n\tcomponentDidMount() {\r\n\t\tsetInterval(() => {\r\n\t\t\tconst temp = JSON.stringify(this.props.app.getDiagramEngine().getModel().serialize())\r\n\t\t\tif (temp !== localStorage.getItem('model')) {\r\n\t\t\t\tlocalStorage.setItem('model', temp);\r\n\t\t\t}\r\n\t\t}, 1500)\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<S.Body>\r\n\t\t\t\t<S.Content style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t<TrayWidget >\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaletteNodes.map((node) => {\r\n\t\t\t\t\t\t\t\tif (node.extras.type !== lastType) {\r\n\t\t\t\t\t\t\t\t\tlastType = node.extras.type\r\n\t\t\t\t\t\t\t\t\treturn <div key={node.name}>\r\n\t\t\t\t\t\t\t\t\t\t<p style={{ margin: \"0px\", fontSize: \"0.9em\" }}>{node.extras.type}:</p>\r\n\t\t\t\t\t\t\t\t\t\t<TrayItemWidget model={node} name={node.name} color={node.color} />\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn <TrayItemWidget key={node.name} model={node} name={node.name} color={node.color} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t</TrayWidget>\r\n\t\t\t\t\t<S.Layer\r\n\t\t\t\t\t\tonDrop={(event) => {\r\n\t\t\t\t\t\t\tlet data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\r\n\t\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\t\tif (data.name === 'Diamond') {\r\n\t\t\t\t\t\t\t\t\tconst node = new DiamondNodeModel();\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(this.props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t} else if (data.name === 'LabelEdit') {\r\n\t\t\t\t\t\t\t\t\tconst node1 = new DefaultNodeModel('Node1', 'red');\r\n\t\t\t\t\t\t\t\t\tconst port1 = node1.addOutPort('out');\r\n\t\t\t\t\t\t\t\t\tnode1.setPosition(250, 100);\r\n\t\t\t\t\t\t\t\t\tconst node2 = new DefaultNodeModel('Node2', 'green');\r\n\t\t\t\t\t\t\t\t\tconst port2 = node2.addInPort('in');\r\n\t\t\t\t\t\t\t\t\tnode2.setPosition(800, 300);\r\n\t\t\t\t\t\t\t\t\tconst link1 = port1.link(port2);\r\n\t\t\t\t\t\t\t\t\tlink1.addLabel(\r\n\t\t\t\t\t\t\t\t\t\tnew EditableLabelModel({\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'Hello, I am label!'\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addAll(node1, port1, node2, port2, link1);\r\n\t\t\t\t\t\t\t\t} else if (data.name === 'NodeEdit') {\r\n\t\t\t\t\t\t\t\t\tconst node = new EditableNodeModel(\"Node1\");\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(100, 200);\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(this.props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t} else if (data.extras.type === \"variable\" || data.extras.type === 'port') {\r\n\t\t\t\t\t\t\t\t\tconst node = new MyEditableNodeModel(data.name, data.color, 'value');\r\n\t\t\t\t\t\t\t\t\tnode.extras = data.extras\r\n\t\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addInPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(this.props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t} else if (data.extras.type === \"logic\") {\r\n\t\t\t\t\t\t\t\t\tconst node = new MyEditableNodeModel(data.name, data.color, 'value');\r\n\t\t\t\t\t\t\t\t\tnode.extras = data.extras\r\n\t\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addInPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(this.props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tconst node = new MyNodeModel(data.name, data.color);\r\n\t\t\t\t\t\t\t\t\tnode.extras = data.extras\r\n\t\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addInPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(this.props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.forceUpdate();\r\n\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonDragOver={(event) => {\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t\t<DemoCanvasWidget >\r\n\t\t\t\t\t\t\t\t<CanvasWidget engine={this.props.app.getDiagramEngine()} />\r\n\t\t\t\t\t\t\t</DemoCanvasWidget>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</S.Layer>\r\n\t\t\t\t</S.Content>\r\n\t\t\t</S.Body >\r\n\t\t)\r\n\t}\r\n}\r\n","import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\n\nexport interface FlowAliasLabelWidgetProps {\n\tmodel: EditableLabelModel;\n}\n\nnamespace S {\n\t// NOTE: this CSS rules allows to interact with elements in label\n\texport const Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\n\tconst [str, setStr] = React.useState(props.model.value);\n\n\treturn (\n\t\t<S.Label>\n\t\t\t<input\n\t\t\t\tvalue={str}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst newVal = event.target.value;\n\n\t\t\t\t\t// update value both in internal component state\n\t\t\t\t\tsetStr(newVal);\n\t\t\t\t\t// and in model object\n\t\t\t\t\tprops.model.value = newVal;\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\n\t\t</S.Label>\n\t);\n};\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport { EditableLabelWidget } from './EditableLabelWidget';\n\nexport class EditableLabelFactory extends AbstractReactFactory<EditableLabelModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('editable-label');\n\t}\n\n\tgenerateModel(): EditableLabelModel {\n\t\treturn new EditableLabelModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<EditableLabelModel>): JSX.Element {\n\t\treturn <EditableLabelWidget model={event.model} />;\n\t}\n}\n","import * as React from \"react\";\r\nimport AutosizeInput from 'react-input-autosize';\r\n\r\nexport interface IEditableSingleFieldProps {\r\n  beingEdited: boolean;\r\n  content: string;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\n\r\nexport interface IEditableSingleFieldState { }\r\n\r\n// interface EditorInterface {\r\n//   content: string;\r\n//   onChange: () => any;\r\n// }\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n}) => {\r\n  return (\r\n    <AutosizeInput\r\n      autoFocus\r\n      inputStyle={{\r\n        padding: 1,\r\n        borderStyle: \"dotted\",\r\n        borderWidth: 1,\r\n        borderColor: \"black\"\r\n      }}\r\n      type=\"text\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n      onKeyDown={(event: any) => {\r\n        if (event.keyCode === 13) onBlurOrEnter();\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default class EditableSingleField extends React.Component<\r\n  IEditableSingleFieldProps,\r\n  IEditableSingleFieldState\r\n> {\r\n  constructor(props: IEditableSingleFieldProps) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","//@ts-nocheck\r\nimport * as React from \"react\";\r\nimport { EditableNodeModel } from \"./EditableNodeModel\";\r\nimport \"./EditableNodeWidgedStyle.css\";\r\nimport EditableSingleField from \"../../custom_components/EditableSingleField\";\r\nimport { PortWidget, DiagramEngine, PortModelAlignment } from \"@projectstorm/react-diagrams\";\r\nexport interface EditableWidgetProps {\r\n  nodeModel: EditableNodeModel;\r\n  engine: DiagramEngine\r\n}\r\n\r\nexport interface EditableWidgetState {\r\n  content: string;\r\n  height: number;\r\n  width: number;\r\n  editingSomething: boolean;\r\n  editingKey: string;\r\n}\r\n\r\n// interface ContextInformation {\r\n//   context: string;\r\n//   entity: string;\r\n// }\r\n// interface AtributeInformation {\r\n//   atribute: string;\r\n// }\r\n\r\nexport class EditableNodeWidget extends React.Component<\r\n  EditableWidgetProps,\r\n  EditableWidgetState\r\n> {\r\n  private divElement: HTMLDivElement;\r\n\r\n  constructor(props: EditableWidgetProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: \"\",\r\n      height: 0,\r\n      width: 0,\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    };\r\n\r\n    //binding the methods to this element\r\n    this._editableObjectDoubleClick = this._editableObjectDoubleClick.bind(this);\r\n    this._contentOnChange = this._contentOnChange.bind(this);\r\n    this._onBlurOrEnter = this._onBlurOrEnter.bind(this);\r\n  }\r\n\r\n\r\n  /**\r\n   * Pass this on onDoubleClick.\r\n   * You change the states to make the fields know it's in edit mode, and tell who is in the edit mode\r\n   */\r\n  _editableObjectDoubleClick = (content: string) => {\r\n    if (this.state.editingSomething) return;\r\n    this.setState({\r\n      editingSomething: true,\r\n      editingKey: content\r\n    });\r\n  };\r\n\r\n  /**\r\n   * What you'll do when the content is changed\r\n   * Usually, you update the model and the state\r\n   */\r\n  _contentOnChange = (evt: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.nodeModel.content = evt.currentTarget.value;\r\n    this.setState({ content: evt.currentTarget.value });\r\n  };\r\n\r\n  /**\r\n   * What you will do when the InputField lost focus or you press enter\r\n   * Usually, you change the states to make the fields know it's not in edit mode\r\n   */\r\n  _onBlurOrEnter = () => {\r\n    this.setState({\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    });\r\n  };\r\n\r\n  /**\r\n   * copy atributes from nodeModel\r\n   */\r\n  UNSAFE_componentWillMount() {\r\n    const content = this.props.nodeModel.content;\r\n    this.setState({ content });\r\n  }\r\n\r\n  /**\r\n   * Change the width and height values of the element, to put the ports on right place\r\n   */\r\n  componentDidMount() {\r\n    const height = this.divElement.clientHeight;\r\n    const width = this.divElement.clientWidth;\r\n    this.setState({ height, width });\r\n  }\r\n  componentDidUpdate() {\r\n    const height = this.divElement.clientHeight;\r\n    const width = this.divElement.clientWidth;\r\n    if (this.state.height !== height || this.state.width !== width)\r\n      this.setState({ height, width });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        ref={divElement => (this.divElement = divElement)}\r\n        className={\"editable-node\"}\r\n      >\r\n        <div className=\"editable-border\">\r\n          <div className=\"editable-header\">\r\n            <div\r\n              onDoubleClick={() => {\r\n                this._editableObjectDoubleClick(\"content\");\r\n              }}>\r\n              <EditableSingleField\r\n                elementKey=\"content\"\r\n                editingKey={this.state.editingKey}\r\n                beingEdited={this.state.editingSomething}\r\n                content={this.props.nodeModel.content}\r\n                onChange={this._contentOnChange}\r\n                onBlurOrEnter={this._onBlurOrEnter}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 10,\r\n            background: \"rgba(0,0,250,0.5)\",\r\n            left: -15, //old: -8\r\n            top: this.state.height / 2 - 8\r\n          }}\r\n        >\r\n          <PortWidget style={{ width: 15, height: 15 }} port={this.props.nodeModel.getPort(PortModelAlignment.LEFT)} engine={this.props.engine} />\r\n        </div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            zIndex: 10,\r\n            background: \"rgba(0,0,250,0.5)\",\r\n            left: this.state.width, //old: this.state.width - 8,\r\n            top: this.state.height / 2 - 8\r\n          }}\r\n        >\r\n          <PortWidget style={{ width: 15, height: 15 }} port={this.props.nodeModel.getPort(PortModelAlignment.RIGHT)} engine={this.props.engine} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { EditableNodeWidget } from \"./EditableNodeWidget\";\nimport { EditableNodeModel } from \"./EditableNodeModel\";\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core'\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\n\nexport class EditableNodeFactory extends AbstractReactFactory<EditableNodeModel, DiagramEngine> {\n\tgenerateModel(event: import(\"@projectstorm/react-canvas-core\").GenerateModelEvent): EditableNodeModel {\n\t\treturn new EditableNodeModel(\"Class\");\n\t}\n\tconstructor() {\n\t\tsuper(\"Editable\");\n\t}\n\n\tgenerateReactWidget(event: { model: EditableNodeModel }): JSX.Element {\n\t\treturn <EditableNodeWidget nodeModel={event.model} engine={this.engine} />;\n\t}\n}\n","// @ts-nocheck\nimport * as React from 'react';\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport { DiagramEngine, PortModelAlignment, PortWidget } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\n\n\nexport interface DiamondNodeWidgetProps {\n\tnode: DiamondNodeModel;\n\tengine: DiagramEngine;\n\tsize?: number;\n}\n\nnamespace S {\n\texport const Port = styled.div`\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tz-index: 10;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\n\t\t&:hover {\n\t\t\tbackground: rgba(0, 0, 0, 1);\n\t\t}\n\t`;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiamondNodeWidget extends React.Component<DiamondNodeWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'diamond-node'}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\twidth: this.props.size,\n\t\t\t\t\theight: this.props.size\n\t\t\t\t}}>\n\t\t\t\t<svg\n\t\t\t\t\twidth={this.props.size}\n\t\t\t\t\theight={this.props.size}\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html:\n\t\t\t\t\t\t\t`\n          <g id=\"Layer_1\">\n          </g>\n          <g id=\"Layer_2\">\n            <polygon fill=\"mediumpurple\" stroke=\"${this.props.node.isSelected() ? 'white' : '#000000'\n\t\t\t\t\t\t\t}\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"10,` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t`,10 ` +\n\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t` \"/>\n          </g>\n        `\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\tleft: -8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.LEFT)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\ttop: -8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.TOP)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size - 8,\n\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.RIGHT)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\ttop: this.props.size - 8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.BOTTOM)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { DiamondNodeWidget } from './DiamondNodeWidget';\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport * as React from 'react';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nexport class DiamondNodeFactory extends AbstractReactFactory<DiamondNodeModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diamond');\n\t}\n\n\tgenerateReactWidget(event: any): JSX.Element {\n\t\treturn <DiamondNodeWidget engine={this.engine} size={50} node={event.model} />;\n\t}\n\n\tgenerateModel(event: any) {\n\t\treturn new DiamondNodeModel();\n\t}\n}\n","import { DiagramEngine, PortModel } from '@projectstorm/react-diagrams';\nimport { AbstractModelFactory } from '@projectstorm/react-canvas-core';\n\nexport class SimplePortFactory extends AbstractModelFactory<PortModel, DiagramEngine> {\n\tcb: (initialConfig?: any) => PortModel;\n\n\tconstructor(type: string, cb: (initialConfig?: any) => PortModel) {\n\t\tsuper(type);\n\t\tthis.cb = cb;\n\t}\n\n\tgenerateModel(event: any): PortModel {\n\t\treturn this.cb(event.initialConfig);\n\t}\n}\n","import * as React from \"react\";\r\n\r\nexport interface ISelectableFieldProps {\r\n  beingEdited: boolean;\r\n  options: Array<string>\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\n\r\nexport interface ISelectableFieldState { }\r\n\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n  options\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  options: Array<string>;\r\n}) => {\r\n  return (\r\n\r\n    <select name=\"values\" id=\"values\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n    >\r\n      {\r\n        options.map((x, y) =>\r\n          <option key={y}>{x}</option>)\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default class SelectableField extends React.Component<\r\n  ISelectableFieldProps,\r\n  ISelectableFieldState\r\n> {\r\n  constructor(props: ISelectableFieldProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n            options={this.props.options}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","//@ts-nocheck\r\nimport * as React from \"react\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport \"./MyEditableNodeWidgedStyle.css\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { PortWidget, DiagramEngine, PortModelAlignment, DefaultPortLabel } from \"@projectstorm/react-diagrams\";\r\nimport styled from '@emotion/styled';\r\n\r\nimport EditableSingleField from \"../custom-node/custom_components/EditableSingleField\";\r\nimport SelectableField from \"../custom-node/custom_components/SelectableField\";\r\n\r\nnamespace S {\r\n  export const Node = styled.div<{ background: string; selected: boolean }>`\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tborder-radius: 5px;\r\n\t\tfont-family: sans-serif;\r\n\t\tcolor: white;\r\n\t\tborder: solid 2px black;\r\n\t\toverflow: visible;\r\n\t\tfont-size: 11px;\r\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\r\n\t`;\r\n\r\n  export const Title = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.3);\r\n\t\tdisplay: flex;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n  export const TitleName = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 5px 5px;\r\n\t`;\r\n\r\n  export const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\r\n\t`;\r\n\r\n  export const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 10px;\r\n\t\t}\r\n\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport interface MyEditableWidgetProps {\r\n  nodeModel: MyEditableNodeModel;\r\n  engine: DiagramEngine\r\n}\r\n\r\nexport interface MyEditableWidgetState {\r\n  content: string;\r\n  height: number;\r\n  width: number;\r\n  editingSomething: boolean;\r\n  editingKey: string;\r\n}\r\nexport class MyEditableNodeWidget extends React.Component<\r\n  MyEditableWidgetProps,\r\n  MyEditableWidgetState\r\n> {\r\n  private divElement: HTMLDivElement;\r\n\r\n  constructor(props: MyEditableWidgetProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: \"\",\r\n      variableType: '',\r\n      height: 0,\r\n      width: 0,\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    };\r\n\r\n    //binding the methods to this element\r\n    this._editableObjectDoubleClick = this._editableObjectDoubleClick.bind(this);\r\n    this._contentOnChange = this._contentOnChange.bind(this);\r\n    this._onBlurOrEnter = this._onBlurOrEnter.bind(this);\r\n  }\r\n  generatePort = (port) => {\r\n    return <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\r\n  };\r\n\r\n  /**\r\n   * Pass this on onDoubleClick.\r\n   * You change the states to make the fields know it's in edit mode, and tell who is in the edit mode\r\n   */\r\n  _editableObjectDoubleClick = (content: string) => {\r\n    if (this.state.editingSomething) return;\r\n    this.setState({\r\n      editingSomething: true,\r\n      editingKey: content\r\n    });\r\n  };\r\n\r\n  /**\r\n   * What you'll do when the content is changed\r\n   * Usually, you update the model and the state\r\n   */\r\n  _contentOnChange = (evt: React.FormEvent<HTMLInputElement>) => {\r\n    this.props.nodeModel.content = evt.currentTarget.value;\r\n    this.setState({ content: evt.currentTarget.value });\r\n  };\r\n\r\n  /**\r\n   * What you will do when the InputField lost focus or you press enter\r\n   * Usually, you change the states to make the fields know it's not in edit mode\r\n   */\r\n  _onBlurOrEnter = () => {\r\n    this.setState({\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    });\r\n  };\r\n\r\n  /**\r\n   * copy atributes from nodeModel\r\n   */\r\n  UNSAFE_componentWillMount() {\r\n\r\n    this.setState({\r\n      content: this.props.nodeModel.content\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <S.Node\r\n        data-default-node-name={this.props.nodeModel.getOptions().name}\r\n        selected={this.props.nodeModel.isSelected()}\r\n        background={this.props.nodeModel.getOptions().color}>\r\n        <S.Title>\r\n          <S.TitleName>{this.props.nodeModel.getOptions().name}:\r\n          </S.TitleName>\r\n          <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"content\");\r\n                  }}\r\n                >\r\n                  {this.props.nodeModel.portsOut[0].options.name === 'bool' ?\r\n                    <SelectableField\r\n                      elementKey=\"content\"\r\n                      options={['true', 'false']}\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.content}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                    : this.props.nodeModel.portsOut[0].options.name === 'port' ?\r\n                      <SelectableField\r\n                        elementKey=\"content\"\r\n                        options={['0', '1', '2']}\r\n                        editingKey={this.state.editingKey}\r\n                        beingEdited={this.state.editingSomething}\r\n                        content={this.props.nodeModel.content}\r\n                        onChange={this._contentOnChange}\r\n                        onBlurOrEnter={this._onBlurOrEnter}\r\n                      />\r\n                      :\r\n                      <EditableSingleField\r\n                        elementKey=\"content\"\r\n                        editingKey={this.state.editingKey}\r\n                        beingEdited={this.state.editingSomething}\r\n                        content={this.props.nodeModel.content}\r\n                        onChange={this._contentOnChange}\r\n                        onBlurOrEnter={this._onBlurOrEnter}\r\n                      />\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </S.Title>\r\n        <S.Ports>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getInPorts(), this.generatePort)}</S.PortsContainer>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getOutPorts(), this.generatePort)}</S.PortsContainer>\r\n        </S.Ports>\r\n      </S.Node>\r\n    );\r\n  }\r\n}\r\n","import { MyEditableNodeWidget } from \"./MyEditableNodeWidget\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core'\r\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\r\n\r\nexport class MyEditableNodeFactory extends AbstractReactFactory<MyEditableNodeModel, DiagramEngine> {\r\n\tgenerateModel(event: import(\"@projectstorm/react-canvas-core\").GenerateModelEvent): MyEditableNodeModel {\r\n\t\treturn new MyEditableNodeModel('name', 'pink', 'value');\r\n\t}\r\n\tconstructor() {\r\n\t\tsuper(\"MyEditable\");\r\n\t}\r\n\r\n\tgenerateReactWidget(event: { model: MyEditableNodeModel }): JSX.Element {\r\n\t\treturn <MyEditableNodeWidget nodeModel={event.model} engine={this.engine} />;\r\n\t}\r\n}\r\n","import * as SRD from '@projectstorm/react-diagrams';\r\nimport { PortModelAlignment } from '@projectstorm/react-diagrams';\r\nimport { EditableLabelFactory } from './custom-label/EditableLabelFactory';\r\nimport { EditableNodeFactory } from './custom-node/custom_nodes/editableNode/EditableNodeFactory';\r\nimport { DiamondNodeFactory } from './diamond/DiamondNodeFactory';\r\nimport { DiamondPortModel } from './diamond/DiamondPortModel';\r\nimport { SimplePortFactory } from './diamond/SimplePortFactory';\r\nimport { MyEditableNodeFactory } from './editableNode/MyEditableNodeFactory';\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Application {\r\n\tprotected activeModel: any;//SRD.DiagramModel\r\n\tprotected diagramEngine: SRD.DiagramEngine;\r\n\r\n\tconstructor() {\r\n\t\tthis.diagramEngine = SRD.default();\r\n\t\tthis.diagramEngine\r\n\t\t\t.getPortFactories()\r\n\t\t\t.registerFactory(new SimplePortFactory('diamond', (config) => new DiamondPortModel(PortModelAlignment.LEFT)));\r\n\t\tthis.diagramEngine.getLabelFactories().registerFactory(new EditableLabelFactory());\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new EditableNodeFactory());\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new DiamondNodeFactory());\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new MyEditableNodeFactory());\r\n\t\tthis.newModel();\r\n\t}\r\n\r\n\tpublic newModel() {\r\n\t\tthis.activeModel = new SRD.DiagramModel();\r\n\t\tthis.diagramEngine.setModel(this.activeModel);\r\n\t}\r\n\r\n\tpublic getActiveDiagram(): SRD.DiagramModel {\r\n\t\treturn this.activeModel;\r\n\t}\r\n\r\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\r\n\t\treturn this.diagramEngine;\r\n\t}\r\n}\r\n","import * as React from 'react';\n\nimport { BodyWidget } from './BodyWidget';\nimport { Application } from './Application';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n\tvar app = new Application();\n\treturn <BodyWidget app={app} />;\n};\n","import Code from \"../components/Code\"\r\nimport DiagramWithPalette from '../components/react-diagrams/index';\r\n\r\nexport default function EditorPage() {\r\n  return <div className=\"float-container\" >\r\n    <div className=\"float-child-left\">\r\n      <DiagramWithPalette />\r\n    </div>\r\n    <div className=\"float-child-right\">\r\n      <Code />\r\n    </div>\r\n  </div>\r\n}","export default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4IoT!\r\n        </h2>\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/staticCYM.6a3ccd64.png\";","import modelsDiagram from '../assets/staticCYM.png'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/state.da9f951e.png\";","import stateDiagram from '../assets/state.png'\r\nexport default function StatePage() {\r\n    return <div>\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","export default function PalettePage() {\r\n    return <div>\r\n        <h3>\r\n            Testing zone for now.\r\n        </h3>\r\n        <div style={{ width: '80vh', height: '60vh' }}>\r\n        </div>\r\n    </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\nimport history from './history'\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport StatePage from './pages/State';\r\nimport PalettePage from './pages/Palette';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <Route path='/models' exact component={ModelsPage} />\r\n          <Route path='/state' exact component={StatePage} />\r\n          <Route path='/palette' exact component={PalettePage} />\r\n          <Route path='/editor' component={EditorPage} />\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}