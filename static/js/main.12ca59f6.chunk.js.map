{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","components/PrismEdit.tsx","components/Code.tsx","components/react-diagrams/TrayWidget.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/myNode/DefaultLinkModel.ts","components/react-diagrams/myNode/DefaultPortModel.ts","components/react-diagrams/myNode/MyNodeModel.ts","components/react-diagrams/helpers/DemoCanvasWidget.tsx","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/Application.ts","components/react-diagrams/index.tsx","pages/Editor.tsx","pages/Home.tsx","assets/models.png","pages/Models.tsx","assets/state.png","pages/State.tsx","pages/Palette.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","Edit","editorRef","useRef","code","setCode","onEditableChange","useCallback","slice","useEditable","disabled","indentation","defaultProps","language","className","tokens","getTokenProps","getLineProps","ref","map","line","i","Fragment","filter","token","empty","key","generateCode","model","Object","keys","length","links","entries","layers","models","forEach","x","nodes","logics","components","controllers","libraries","n","extras","type","instance","name","toLowerCase","includes","library","console","log","controller","add","message","m","getLink","linkID","find","l","id","getPort","nodeID","portID","ports","p","getNode","getParent","childNode","parentNode","analogPorts","digitalPorts","lib","comp","port","link","toPort","target","targetPort","toNode","fromPort","source","sourcePort","fromNode","conditionNode","error","getValue","outcome","getOutcome","replace","original","level","split","repeat","join","formatCode","Code","useEffect","Prism","highlightAll","setInterval","temp","localStorage","getItem","setItem","JSON","parse","PrismEdit","S","styled","div","TrayWidget","Tray","this","props","children","React","TrayItemWidget","draggable","onDragStart","dataTransfer","setData","stringify","DefaultLinkModel","options","width","selectedColor","curvyness","getOptions","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","getSourceControl","translate","calculateControlOffset","getSourcePort","getTargetControl","getTargetPort","getSVGCurve","data","fireEvent","LinkModel","DefaultPortModel","in","factory","createLinkModel","setSourcePort","setTargetPort","generateModel","PortModel","MyNodeModel","portsIn","portsOut","lookupTable","splice","indexOf","after","addPort","_","portsInOrder","getPortFromID","portsOutOrder","getID","NodeModel","background","css","DemoCanvasWidget","styles","Expand","Container","paletteNodes","ins","outs","BodyWidget","app","getDiagramEngine","getModel","serialize","Body","Content","height","node","Layer","onDrop","getData","method","addOutPort","addInPort","point","getRelativeMousePoint","setPosition","addNode","forceUpdate","onDragOver","preventDefault","engine","Application","activeModel","diagramEngine","SRD","newModel","setModel","EditorPage","HomePage","ModelsPage","src","modelsDiagram","alt","maxHeight","maxWidth","StatePage","stateDiagram","PalettePage","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12ca59f6.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport { AppBar } from '@material-ui/core';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Models\" value=\"/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction label=\"State\" value=\"/state\" icon={<SwapHorizIcon />} />\r\n                <BottomNavigationAction label=\"Editor\" value=\"/editor\" icon={<EditIcon />} />\r\n                <BottomNavigationAction label=\"Palette\" value=\"/palette\" icon={<PaletteIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import React, { useState, useRef, useCallback } from \"react\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport { useEditable } from \"use-editable\";\r\n\r\nconst Edit = () => {\r\n    const editorRef = useRef(null);\r\n    const [code, setCode] = useState(\r\n        'function test() {}\\n\\nconsole.log(\"hello\");'\r\n    );\r\n\r\n    const onEditableChange = useCallback((code) => {\r\n        setCode(code.slice(0, -1));\r\n    }, []);\r\n\r\n    useEditable(editorRef, onEditableChange, {\r\n        disabled: false,\r\n        indentation: 2\r\n    });\r\n\r\n    return (\r\n        <Highlight {...defaultProps} code={code} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <pre className={className} style={style} ref={editorRef}>\r\n                    {tokens.map((line, i) => (\r\n                        <React.Fragment key={i}>\r\n                            {line\r\n                                .filter((token) => !token.empty)\r\n                                .map((token, key) => (\r\n                                    <span {...getTokenProps({ token, key })} />\r\n                                ))}\r\n                            {\"\\n\"}\r\n                        </React.Fragment>\r\n                    ))}\r\n                </pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n};\r\n\r\nexport default Edit;\r\n","import { useEffect, useState } from \"react\";\r\nimport Prism from \"prismjs\";\r\n// import \"prismjs/themes/prism-tomorrow.css\";\r\nimport \"./prism.css\";\r\nimport PrismEdit from \"./PrismEdit\";\r\n\r\n\r\nfunction generateCode(model: any): string {\r\n    let code = ''\r\n    if (Object.keys(model).length === 0) {\r\n        return '// Empty Diagram!';\r\n    }\r\n    let links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    let nodes: any[] = []\r\n    let logics: any[] = []\r\n    let components: any[] = []\r\n    let controllers: any[] = []\r\n    let libraries: any[] = []\r\n\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        const n = x[1]\r\n        nodes.push(n)\r\n        switch (n.extras.type) {\r\n            case 'component':\r\n                n.instance = n.name.toLowerCase()\r\n                components.push(n)\r\n                if (!libraries.includes(n.extras.library))\r\n                    libraries.push(n.extras.library)\r\n                break\r\n            case 'controller':\r\n                controllers.push(n)\r\n                break\r\n            case 'logic':\r\n                logics.push(n)\r\n                break\r\n        }\r\n    })\r\n\r\n    console.log('Generating from model:', model, 'Parsed ', nodes, logics, components, controllers)\r\n\r\n    if (nodes.length === 0) return '// You need at least one Node!'\r\n    if (controllers.length === 0) return '// You need an Arduino!'\r\n    if (controllers.length > 1) return '// Only one Arduino allowed!'\r\n\r\n    let controller = controllers[0]\r\n\r\n    let add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n    };\r\n    let getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    let getPort = (nodeID: string, portID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID).ports\r\n            .find((p: any) => p.id === portID);\r\n    }\r\n    let getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    let getValue = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'value').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.source, link.sourcePort)\r\n        } catch (error) {\r\n            return { name: '/* Lacking Value */' }\r\n        }\r\n    }\r\n    let getOutcome = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'True').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.target, link.targetPort)\r\n        } catch (error) {\r\n            return { label: '// Lacking Outcome' }\r\n        }\r\n    }\r\n    let getParent = (childNode: any) => {\r\n        return nodes.find((n: any) => n.id === childNode.parentNode)\r\n    }\r\n    add(\"/* Code generated for \", controller.name);\r\n    add('Analog ports N/' + controller.extras.analogPorts)\r\n    add('Digital ports M/' + controller.extras.digitalPorts)\r\n    add(\"*/\")\r\n    add('')\r\n\r\n    libraries.forEach(lib => {\r\n        add('#include <' + lib + '>')\r\n        components.forEach(comp => {\r\n            if (comp.extras.library === lib)\r\n                add(comp.name + ' ' + comp.instance)\r\n        });\r\n        add('')\r\n    });\r\n\r\n    controller.ports.forEach((port: any) => {\r\n        add(port.label, \"{\");\r\n        port.links.forEach((l: any) => {\r\n            let link = getLink(l);\r\n            let toPort = getPort(link.target, link.targetPort)\r\n            let toNode = getNode(toPort.parentNode)\r\n            let fromPort = getPort(link.source, link.sourcePort)\r\n            let fromNode = getNode(fromPort.parentNode)\r\n            if (toNode.name === \"Condition\") {\r\n                let value = getValue(toNode)\r\n                let outcome = getOutcome(toNode)\r\n                add('if (', getParent(value)?.instance + '.' + value.name, toPort.name.replace('if', ''), ') {')\r\n                add(getParent(outcome)?.instance + '.' + outcome.label)\r\n                add(\"}\\n\");\r\n            } else {\r\n                console.log('here', link, toNode, toPort)\r\n                if (toNode.instance) {\r\n                    add(toNode.instance + '.' + toPort.name)\r\n                } else {\r\n                    add(fromNode.instance + '.' + fromPort.name)\r\n                }\r\n            }\r\n        })\r\n        add(\"}\\n\");\r\n    })\r\n\r\n    function formatCode(original: string) {\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return formatCode(code);\r\n}\r\nexport default function Code() {\r\n    const [code, setCode] = useState('Initializing Generator')\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n        setInterval(() => {\r\n            try {\r\n                let temp = localStorage.getItem('model')\r\n                if (temp !== localStorage.getItem('oldModel')) {\r\n                    localStorage.setItem('oldModel', temp || '{}')\r\n                    setCode(generateCode(JSON.parse(temp || '{}')));\r\n                    Prism.highlightAll();\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }, 1500)\r\n    }, []);\r\n    return (\r\n        <>\r\n            <div className=\"Code\">\r\n                <pre >\r\n                    <code className=\"language-clike\">{code}</code>\r\n                </pre>\r\n            </div>\r\n            <PrismEdit />\r\n\r\n        </>\r\n    );\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin:\t 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color || 'red'}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","// LabelModel,\nimport {\n\tLinkModel,\n\tLinkModelGenerics,\n\tLinkModelListener,\n\tPortModel,\n\tPortModelAlignment\n} from '@projectstorm/react-diagrams-core';\n// import { DefaultLabelModel } from './DefaultLabelModel';\nimport { BezierCurve } from '@projectstorm/geometry';\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\t// colorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\t// widthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n\twidth?: number;\n\tcolor?: string;\n\tselectedColor?: string;\n\tcurvyness?: number;\n\ttype?: string;\n\ttestName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n\tLISTENER: DefaultLinkModelListener;\n\tOPTIONS: DefaultLinkModelOptions;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\twidth: options.width || 3,\n\t\t\tcolor: options.color || 'gray',\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\n\t\t\tcurvyness: 50,\n\t\t\t...options\n\t\t});\n\t}\n\n\tcalculateControlOffset(port: PortModel): [number, number] {\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n\t\t\treturn [this.options.curvyness || 0, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n\t\t\treturn [-(this.options.curvyness || 0), 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n\t\t\treturn [0, -(this.options.curvyness || 0)];\n\t\t}\n\t\treturn [0, this.options.curvyness || 0];\n\t}\n\n\tgetSVGPath(): string | undefined {\n\t\tif (this.points.length === 2) {\n\t\t\tconst curve = new BezierCurve();\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n\t\t\tif (this.sourcePort) {\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n\t\t\t}\n\n\t\t\tif (this.targetPort) {\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n\t\t\t}\n\t\t\treturn curve.getSVGCurve();\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\twidth: this.options.width,\n\t\t\tcolor: this.options.color,\n\t\t\tcurvyness: this.options.curvyness,\n\t\t\tselectedColor: this.options.selectedColor\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.color = event.data.color;\n\t\tthis.options.width = event.data.width;\n\t\tthis.options.curvyness = event.data.curvyness;\n\t\tthis.options.selectedColor = event.data.selectedColor;\n\t}\n\n\t// addLabel(label: LabelModel | string) {\n\t// \tif (label instanceof LabelModel) {\n\t// \t\treturn super.addLabel(label);\n\t// \t}\n\t// \tlet labelOb = new DefaultLabelModel();\n\t// \tlabelOb.setLabel(label);\n\t// \treturn super.addLabel(labelOb);\n\t// }\n\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n","import {\n\tLinkModel,\n\tPortModel,\n\tPortModelAlignment,\n\tPortModelGenerics,\n\tPortModelOptions\n} from '@projectstorm/react-diagrams-core';\nimport { DefaultLinkModel } from './DefaultLinkModel';\nimport { AbstractModelFactory, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface DefaultPortModelOptions extends PortModelOptions {\n\tlabel?: string;\n\tin?: boolean;\n}\n\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\n\tOPTIONS: DefaultPortModelOptions;\n}\n\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\n\tconstructor(isIn: boolean, name?: string, label?: string);\n\tconstructor(options: DefaultPortModelOptions);\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\n\t\tif (!!name) {\n\t\t\toptions = {\n\t\t\t\tin: !!options,\n\t\t\t\tname: name,\n\t\t\t\tlabel: label\n\t\t\t};\n\t\t}\n\t\toptions = options as DefaultPortModelOptions;\n\t\tsuper({\n\t\t\tlabel: options.label || options.name,\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\n\t\t\ttype: 'default',\n\t\t\t...options\n\t\t});\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.in = event.data.in;\n\t\tthis.options.label = event.data.label;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tin: this.options.in,\n\t\t\tlabel: this.options.label\n\t\t};\n\t}\n\n\tlink<T extends LinkModel>(port: PortModel, factory?: AbstractModelFactory<T>): T {\n\t\tlet link = this.createLinkModel(factory);\n\t\tlink.setSourcePort(this);\n\t\tlink.setTargetPort(port);\n\t\treturn link as T;\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\t// if (port instanceof DefaultPortModel) {\n\t\t// \treturn this.options.in !== port.getOptions().in;\n\t\t// }\n\t\treturn true;\n\t}\n\n\tcreateLinkModel(factory?: AbstractModelFactory<LinkModel>): LinkModel {\n\t\tlet link = super.createLinkModel();\n\t\tif (!link && factory) {\n\t\t\treturn factory.generateModel({});\n\t\t}\n\t\treturn link || new DefaultLinkModel();\n\t}\n}\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { DefaultPortModel } from './DefaultPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    protected portsIn: DefaultPortModel[];\r\n    protected portsOut: DefaultPortModel[];\r\n    protected extras: any;\r\n\r\n    constructor(name: string, color: string);\r\n    constructor(options?: DefaultNodeModelOptions);\r\n    constructor(options: any = {}, color?: string) {\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                name: options,\r\n                color: color\r\n            };\r\n        }\r\n        super({\r\n            type: 'default',\r\n            name: 'Untitled',\r\n            color: 'rgb(0,192,255)',\r\n            ...options\r\n        });\r\n        this.portsOut = [];\r\n        this.portsIn = [];\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: DefaultPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends DefaultPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): DefaultPortModel {\r\n        const p = new DefaultPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): DefaultPortModel {\r\n        const p = new DefaultPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as DefaultPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as DefaultPortModel[];\r\n        this.extras = event.data.extras\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras\r\n        };\r\n    }\r\n\r\n    getInPorts(): DefaultPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): DefaultPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nnamespace S {\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport { TrayWidget } from './TrayWidget';\nimport { Application } from './Application';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { MyNodeModel } from './myNode/MyNodeModel';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from './helpers/DemoCanvasWidget';\nimport styled from '@emotion/styled';\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nnamespace S {\n\texport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\n\texport const Header = styled.div`\n\t\tdisplay: flex;\n\t\tbackground: rgb(30, 30, 30);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 10px;\n\t\talign-items: center;\n\t`;\n\n\texport const Content = styled.div`\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\n\texport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n}\n\nlet paletteNodes = [\n\t{\n\t\tname: 'Arduino Uno',\n\t\tcolor: 'green',\n\t\textras: {\n\t\t\ttype: 'controller',\n\t\t\tanalogPorts: 6,\n\t\t\tdigitalPorts: 14,\n\t\t},\n\t\tins: [],\n\t\touts: [\n\t\t\t'setup()',\n\t\t\t'loop()'\n\t\t]\n\t},\n\t{\n\t\tname: 'Arduino Mega',\n\t\tcolor: 'green',\n\t\textras: {\n\t\t\ttype: 'controller',\n\t\t\tanalogPorts: 16,\n\t\t\tdigitalPorts: 54,\n\t\t},\n\t\tins: [],\n\t\touts: [\n\t\t\t'setup()',\n\t\t\t'loop()'\n\t\t]\n\t},\n\t{\n\t\tname: 'Condition',\n\t\textras: { type: 'logic' },\n\t\tcolor: 'grey',\n\t\touts: [\n\t\t\t'True',\n\t\t\t'False'\n\t\t],\n\t\tins: [\n\t\t\t'if <= 20',\n\t\t\t'value'\n\t\t]\n\t},\n\t{\n\t\tname: 'Loop',\n\t\textras: { type: 'logic' },\n\t\tcolor: 'grey',\n\t\touts: [\n\t\t\t'True',\n\t\t\t'False'\n\t\t],\n\t\tins: [\n\t\t\t'for',\n\t\t\t'value'\n\t\t]\n\t},\n\t{\n\t\tname: 'Led',\n\t\tcolor: 'red',\n\t\textras: { type: 'component', library: 'Setter.h' },\n\t\tins: [\n\t\t\t'setValue()'\n\t\t],\n\t\touts: []\n\n\t},\n\t{\n\t\tname: 'TemperatureSensor',\n\t\tcolor: 'blue',\n\t\textras: { type: 'component', library: 'Getter.h' },\n\t\tins: [],\n\t\touts: [\n\t\t\t'getValue()'\n\t\t]\n\t},\n\t{\n\t\tname: 'Button',\n\t\tcolor: 'blue',\n\t\textras: { type: 'component', library: 'Getter.h' },\n\t\tins: [],\n\t\touts: [\n\t\t\t'getValue()'\n\t\t]\n\t},\n\t{\n\t\tname: 'Servo',\n\t\tcolor: 'orange',\n\t\textras: { type: 'component', library: 'Servo.h' },\n\t\tins: [\n\t\t\t'void detach()',\n\t\t\t'void write(int)',\n\t\t\t'void writeMicroseconds(int)',\n\t\t],\n\t\touts: [\n\t\t\t'uint8_t attach(int)',\n\t\t\t'uint8_t attach(int, int, int)',\n\t\t\t'int read()',\n\t\t\t'int readMicroseconds()',\n\t\t\t'bool attached()',\n\t\t]\n\t},\n\t{\n\t\tname: 'Stepper',\n\t\tcolor: 'orange',\n\t\textras: { type: 'component', library: 'Stepper.h' },\n\t\tins: [\n\t\t\t'Stepper(int, int, int)',\n\t\t\t'Stepper(int, int, int, int, int)',\n\t\t\t'Stepper(int, int, int, int, int, int)',\n\t\t\t'-',\n\t\t\t'void setSpeed(long whatSpeed)',\n\t\t\t'void step(int number_of_steps)',\n\t\t],\n\t\touts: [\n\t\t\t'int version(void)',\n\t\t]\n\t}\n]\n\n\n\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\n\tcomponentDidMount() {\n\t\tsetInterval(() => {\n\t\t\tlet temp = JSON.stringify(this.props.app.getDiagramEngine().getModel().serialize())\n\t\t\tif (temp !== localStorage.getItem('model')) {\n\t\t\t\tlocalStorage.setItem('model', temp);\n\t\t\t}\n\t\t}, 1500)\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<S.Body>\n\t\t\t\t<S.Content style={{ width: '100%', height: '100%' }}>\n\t\t\t\t\t<TrayWidget >\n\t\t\t\t\t\t{paletteNodes.map(node =>\n\t\t\t\t\t\t\t<TrayItemWidget key={node.name} model={node} name={node.name} color={node.color} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TrayWidget>\n\t\t\t\t\t<S.Layer\n\t\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t\tlet node: any = null;//DefaultNodeModel\n\t\t\t\t\t\t\tif (data) {\n\t\t\t\t\t\t\t\tnode = new MyNodeModel(data.name, data.color);\n\n\t\t\t\t\t\t\t\tnode.extras = data.extras\n\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\n\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\n\t\t\t\t\t\t\t\t\tnode.addInPort(method)\n\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\n\t\t\t\t\t\t\t<DemoCanvasWidget >\n\t\t\t\t\t\t\t\t<CanvasWidget engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\t\t</DemoCanvasWidget>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</S.Layer>\n\t\t\t\t</S.Content>\n\t\t\t</S.Body>\n\t\t)\n\t}\n}\n","import * as SRD from '@projectstorm/react-diagrams';\n\n/**\n * @author Dylan Vorster\n */\nexport class Application {\n\tprotected activeModel: any;//SRD.DiagramModel\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = SRD.default();\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setModel(this.activeModel);\n\n\t\t//3-A) create a default node\n\t\t// var node1 = new SRD.DefaultNodeModel('Node 1', 'rgb(0,192,255)');\n\t\t// let port = node1.addOutPort('Out');\n\t\t// node1.setPosition(100, 100);\n\n\t\t//3-B) create another default node\n\t\t// var node2 = new SRD.DefaultNodeModel('Node 2', 'rgb(192,255,0)');\n\t\t// let port2 = node2.addInPort('In');\n\t\t// node2.setPosition(400, 100);\n\n\t\t// link the ports\n\t\t// let link1 = port.link(port2);\n\n\t\t// this.activeModel.addAll(node2);\n\t\t// this.activeModel.addAll(node1, node2, link1);\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}\n","import * as React from 'react';\n\nimport { BodyWidget } from './BodyWidget';\nimport { Application } from './Application';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n\tvar app = new Application();\n\treturn <BodyWidget app={app} />;\n};\n","import Code from \"../components/Code\"\r\nimport DiagramWithPalette from '../components/react-diagrams/index';\r\n\r\nexport default function EditorPage() {\r\n  return <div className=\"float-container\" >\r\n    <div className=\"float-child-left\">\r\n      <DiagramWithPalette />\r\n    </div>\r\n    <div className=\"float-child-right\">\r\n      <Code />\r\n    </div>\r\n  </div>\r\n}","export default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4IoT!\r\n        </h2>\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/models.d4b41b6f.png\";","import modelsDiagram from '../assets/models.png'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/state.da9f951e.png\";","import stateDiagram from '../assets/state.png'\r\nexport default function StatePage() {\r\n    return <div>\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","export default function PalettePage() {\r\n    return <div>\r\n        <h3>\r\n            Caution!\r\n        </h3>\r\n        <div style={{ width: '80vh', height: '60vh' }}>\r\n            {/* <Diagram /> */}\r\n        </div>\r\n    </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\n\r\nimport history from './history'\r\n\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport StatePage from './pages/State';\r\nimport PalettePage from './pages/Palette';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <Route path='/models' exact component={ModelsPage} />\r\n          <Route path='/state' exact component={StatePage} />\r\n          <Route path='/palette' exact component={PalettePage} />\r\n          <Route path='/editor' component={EditorPage} />\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}