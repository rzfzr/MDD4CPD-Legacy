{"version":3,"sources":["components/NavigationBar.tsx","components/GoClass.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/MyCanvasWidget.tsx","components/react-diagrams/myNode/MyRightAngleLinkModel.ts","components/react-diagrams/myNode/MyPortModel.ts","components/react-diagrams/editableNode/MyEditableNodeModel.ts","paletteNodes.js","components/goBuilder.ts","components/Code.tsx","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/custom-port/MyPortLabelWidget.tsx","components/react-diagrams/custom-node/custom_components/EditableSingleField.tsx","components/react-diagrams/custom-node/custom_components/SelectableField.tsx","components/react-diagrams/editableNode/MyEditableNodeWidget.tsx","components/react-diagrams/editableNode/MyEditableNodeFactory.tsx","components/react-diagrams/Application.ts","pages/Editor.tsx","assets/flow.svg","assets/cym_s.svg","pages/Home.tsx","pages/Models.tsx","assets/transformations.png","pages/Transformations.tsx","pages/Settings.tsx","App.tsx","index.tsx"],"names":["SimpleBottomNavigation","pathname","window","location","useState","value","setValue","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","component","Link","label","to","icon","initDiagram","arrangement","$","go","make","actualArrangement","ArrangementVertical","ArrangementHorizontal","myDiagram","layout","angle","path","PathSource","setsPortSpot","setsChildPortSpot","convertVisibility","v","propertyTemplate","isMultiline","editable","width","makeTwoWay","s","t","methodTemplate","convertIsTreeLink","r","convertIsStateLink","convertFromArrow","convertToArrow","nodeTemplate","locationSpot","Center","fromSpot","AllSides","toSpot","fill","defaultRowSeparatorStroke","row","columnSpan","margin","alignment","font","ofObject","name","stretch","Fill","defaultAlignment","Left","background","itemTemplate","column","TopRight","visible","arr","length","nodeTemplateMap","add","desiredSize","parse","stringify","stroke","strokeWidth","linkTemplate","routing","Orthogonal","scale","textAlign","model","linkKeyProperty","copiesArrays","copiesArrayObjects","GoClass","props","divClassName","nodeDataArray","nodedata","linkDataArray","linkdata","S","styled","div","p","TrayItemWidget","methods","this","node","forEach","method","push","visibility","ins","outs","key","Tray","draggable","onDragStart","dataTransfer","setData","JSON","setDragImage","Image","className","float","marginRight","fontSize","id","type","place","delayHide","effect","React","css","MyCanvasWidget","styles","Expand","Container","children","MyRightAngleLinkModel","options","RightAngleLinkFactory","NAME","lastHoverIndexOfPath","_lastPathXdirection","_firstPathXdirection","points","getPoints","i","dx","Math","abs","getX","dy","getY","pointModel","index","setFirstAndLastPathsDirection","first","last","fireEvent","DefaultLinkModel","MyPortModel","in","PortModelAlignment","LEFT","RIGHT","extras","hasHiddenLabel","data","port","console","log","getOptions","link","setWidth","setColor","h","l","a","min","f","n","k","max","hsl2rgb","random","PortModel","MyEditableNodeModel","portsIn","portsOut","selectableOptions","returnType","biPort","addInPort","addOutPort","inPort","outPort","lookupTable","clone","splice","indexOf","after","addPort","_","portsInOrder","getPortFromID","portsOutOrder","getID","NodeModel","hasUsages","analogPorts","digitalPorts","group","hasPortType","portType","Array","from","keys","map","x","toString","hasValue","hasReturnType","hasUsername","library","startDelta","endDelta","controllerDelta","transformAllIntoMethods","ports","processDynamic","nodes","links","relationship","category","methodIndex","text","returnTypes","ordinals","paramTypes","Code","code","problems","generated","message","m","getLink","linkID","find","getPort","nodeID","portID","error","getOutPort","getNode","parentNode","portPosition","outPortId","warn","processLink","callWithParameters","params","expected","split","filter","e","received","includes","ex","expectedType","rt","trim","startsWith","receivedType","instance","substring","formattedParameters","fromNode","fromPort","variableParams","par","source","sourcePort","toPort","target","targetPort","toNode","nextFromPort","nextLink","nextToPort","nextToNode","temp","Object","entries","layers","models","getLinksFromModel","getNodesFromModel","logics","components","toLowerCase","replace","getComponentsFromNodes","controller","constants","constant","toUpperCase","variables","usedDigital","Set","usedAnalog","uniqueDigitals","u","uniqueAnalogs","addHeaderComments","controllers","warnAboutNumberOfControllers","hasLink","warnAboutNodesWithoutLinks","warnAboutMultipleUsePorts","warnAboutLooseLinks","libraries","lib","comp","addLibraries","logic","isArray","count","addConstantDeclarations","variable","addVariableDeclarations","original","level","line","repeat","join","indentCode","generateCode","cleanProblems","dirty","findIndex","sameNodes","concat","useEffect","Prism","highlightAll","border","el","document","querySelector","setAttribute","problemId","display","justifyContent","start","end","height","overflow","ScrollArea","require","default","BodyWidget","setModel","rerender","setRerender","rawModel","app","getDiagramEngine","getModel","serialize","stringModel","groups","paletteNodes","Body","Content","speed","contentClassName","horizontal","smoothScrolling","verticalScrollbarStyle","backgroundColor","marginBottom","slice","Layer","onDrop","getData","registerListener","linksUpdated","nodesUpdated","setPosition","getRelativeMousePoint","addNode","onDragOver","preventDefault","onClick","engine","MyPortLabel","getName","isVoid","FakePort","Port","labelR","LabelR","labelL","LabelL","PortLabel","Editor","content","onFocus","onBlurOrEnter","autoFocus","inputStyle","padding","borderStyle","borderWidth","borderColor","onBlur","onKeyDown","keyCode","EditableSingleField","state","beingEdited","editingKey","elementKey","setLocked","fontStyle","isAbstract","y","SelectableField","portTypes","selected","MyEditableNodeWidget","divElement","generatePort","_editableObjectDoubleClick","editingSomething","setState","_contentOnChange","evt","nodeModel","currentTarget","_onBlurOrEnter","variableType","bind","Node","isSelected","Title","ref","onDoubleClick","TitleName","Button","addBiPort","repaintCanvas","isFound","portIn","portOut","removePort","nameIn","nameOut","next","Ports","PortsContainer","getInPorts","getOutPorts","MyEditableNodeFactory","Error","AbstractReactFactory","Application","activeModel","diagramEngine","SRD","getNodeFactories","registerFactory","getLinkFactories","newModel","EditorPage","HomePage","src","flowDiagram","alt","maxHeight","maxWidth","cym_s","ModelsPage","nodesStatic","linksStatic","nodesDynamic","linksDynamic","TransformationsPage","transformations","PalettePage","App","element","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6bb58100.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { AppBar } from '@material-ui/core';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\n// import SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\n// import PaletteIcon from '@material-ui/icons/Palette';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport TransformIcon from '@mui/icons-material/Transform';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const pathname = window.location.pathname; // in case user visits the path directly. The BottomNavBar is able to follow suit.\r\n    const [value, setValue] = useState(pathname);\r\n    const handleChange = (event: any, newValue: any) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={handleChange}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction component={Link} label=\"Home\" to=\"/mdd4/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Models\" to=\"/mdd4/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Transformations\" to=\"/mdd4/transformations\" icon={<TransformIcon />} />\r\n                {/* <BottomNavigationAction component={Link} label=\"Palette\" to=\"/mdd4/palette\" icon={<PaletteIcon />} /> */}\r\n                <BottomNavigationAction component={Link} label=\"Editor\" to=\"/mdd4/editor\" icon={<EditIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Settings\" to=\"/mdd4/settings\" icon={<SettingsIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import * as go from 'gojs';\r\nimport { ReactDiagram } from 'gojs-react';\r\n\r\nimport './go.css';\r\n\r\nfunction initDiagram(arrangement: any = 'horizontal') {\r\n    const $ = go.GraphObject.make;\r\n\r\n    const actualArrangement = arrangement === 'vertical' ? go.TreeLayout.ArrangementVertical : go.TreeLayout.ArrangementHorizontal\r\n\r\n\r\n    const myDiagram = $(go.Diagram,\r\n        {\r\n            layout: $(go.TreeLayout,\r\n                { // this only lays out in trees nodes connected by \"generalization\" links\r\n                    angle: 180,\r\n                    path: go.TreeLayout.PathSource,  // links go from child to parent\r\n                    setsPortSpot: false,  // keep Spot.AllSides for link connection spot\r\n                    setsChildPortSpot: false,  // keep Spot.AllSides\r\n                    arrangement: actualArrangement,\r\n                })\r\n        });\r\n\r\n    function convertVisibility(v: any) {\r\n        switch (v) {\r\n            case \"public\": return \"+\";\r\n            case \"private\": return \"-\";\r\n            case \"protected\": return \"#\";\r\n            case \"package\": return \"~\";\r\n            default: return v;\r\n        }\r\n    }\r\n\r\n    var propertyTemplate =\r\n        $(go.Panel, \"Horizontal\",\r\n            // property visibility/access\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: false, width: 12 },\r\n                new go.Binding(\"text\", \"visibility\", convertVisibility)),\r\n            // property name, underlined if scope==\"class\" to indicate static property\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: true },\r\n                new go.Binding(\"text\", \"name\").makeTwoWay(),\r\n                new go.Binding(\"isUnderline\", \"scope\", s => s[0] === 'c')),\r\n            // property type, if known\r\n            $(go.TextBlock, \"\",\r\n                new go.Binding(\"text\", \"type\", t => t ? \": \" : \"\")),\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: true },\r\n                new go.Binding(\"text\", \"type\").makeTwoWay()),\r\n            // property default value, if any\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: false },\r\n                new go.Binding(\"text\", \"default\", s => s ? \" = \" + s : \"\"))\r\n        );\r\n    var methodTemplate =\r\n        $(go.Panel, \"Horizontal\",\r\n            // method visibility/access\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: false, width: 12 },\r\n                new go.Binding(\"text\", \"visibility\", convertVisibility)),\r\n            // method name, underlined if scope==\"class\" to indicate static method\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: true },\r\n                new go.Binding(\"text\", \"name\").makeTwoWay(),\r\n                new go.Binding(\"isUnderline\", \"scope\", s => s[0] === 'c')),\r\n\r\n            $(go.TextBlock, \"\",\r\n                new go.Binding(\"text\", \"type\", t => t ? \": \" : \"\")),\r\n            $(go.TextBlock,\r\n                { isMultiline: false, editable: true },\r\n                new go.Binding(\"text\", \"type\").makeTwoWay())\r\n        );\r\n\r\n    myDiagram.nodeTemplate =\r\n        $(go.Node, \"Auto\",\r\n            {\r\n                locationSpot: go.Spot.Center,\r\n                fromSpot: go.Spot.AllSides,\r\n                toSpot: go.Spot.AllSides\r\n            },\r\n            $(go.Shape, { fill: \"lightyellow\" }),\r\n            $(go.Panel, \"Table\",\r\n                { defaultRowSeparatorStroke: \"black\" },\r\n                // header\r\n                $(go.TextBlock,\r\n                    {\r\n                        row: 0, columnSpan: 2, margin: 3, alignment: go.Spot.Center,\r\n                        font: \"bold 12pt sans-serif\",\r\n                        isMultiline: false, editable: true\r\n                    },\r\n                    new go.Binding(\"text\", \"name\").makeTwoWay()),\r\n                // properties\r\n                $(go.TextBlock, \"Properties\",\r\n                    { row: 1, font: \"italic 10pt sans-serif\" },\r\n                    new go.Binding(\"visible\", \"visible\", v => !v).ofObject(\"PROPERTIES\")),\r\n                $(go.Panel, \"Vertical\", { name: \"PROPERTIES\" },\r\n                    new go.Binding(\"itemArray\", \"properties\"),\r\n                    {\r\n                        row: 1, margin: 3, stretch: go.GraphObject.Fill,\r\n                        defaultAlignment: go.Spot.Left, background: \"lightyellow\",\r\n                        itemTemplate: propertyTemplate\r\n                    }\r\n                ),\r\n                $(\"PanelExpanderButton\", \"PROPERTIES\",\r\n                    { row: 1, column: 1, alignment: go.Spot.TopRight, visible: false },\r\n                    new go.Binding(\"visible\", \"properties\", arr => arr.length > 0)),\r\n                // methods\r\n                $(go.TextBlock, \"Methods\",\r\n                    { row: 2, font: \"italic 10pt sans-serif\" },\r\n                    new go.Binding(\"visible\", \"visible\", v => !v).ofObject(\"METHODS\")),\r\n                $(go.Panel, \"Vertical\", { name: \"METHODS\" },\r\n                    new go.Binding(\"itemArray\", \"methods\"),\r\n                    {\r\n                        row: 2, margin: 3, stretch: go.GraphObject.Fill,\r\n                        defaultAlignment: go.Spot.Left, background: \"lightyellow\",\r\n                        itemTemplate: methodTemplate\r\n                    }\r\n                ),\r\n                $(\"PanelExpanderButton\", \"METHODS\",\r\n                    { row: 2, column: 1, alignment: go.Spot.TopRight, visible: false },\r\n                    new go.Binding(\"visible\", \"methods\", arr => arr.length > 0))\r\n            )\r\n        );\r\n    myDiagram.nodeTemplateMap.add(\"Start\",\r\n        $(go.Node, \"Spot\", {\r\n            locationSpot: go.Spot.Center,\r\n            fromSpot: go.Spot.AllSides,\r\n            toSpot: go.Spot.AllSides,\r\n            desiredSize: new go.Size(75, 75)\r\n        },\r\n            new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            $(go.Shape, \"Circle\",\r\n                {\r\n                    fill: \"#52ce60\", /* green */\r\n                    stroke: null,\r\n                }),\r\n            $(go.TextBlock, \"Start\",\r\n                {\r\n                    font: \"bold 16pt helvetica, bold arial, sans-serif\",\r\n                    stroke: \"whitesmoke\"\r\n                })\r\n        )\r\n    );\r\n\r\n    myDiagram.nodeTemplateMap.add(\"End\",\r\n        $(go.Node, \"Spot\", { desiredSize: new go.Size(75, 75) },\r\n            new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify),\r\n            $(go.Shape, \"Circle\",\r\n                {\r\n                    fill: \"maroon\",\r\n                    stroke: null,\r\n                }),\r\n            $(go.Shape, \"Circle\", { fill: null, desiredSize: new go.Size(65, 65), strokeWidth: 2, stroke: \"whitesmoke\" }),\r\n            $(go.TextBlock, \"End\",\r\n                {\r\n                    font: \"bold 16pt helvetica, bold arial, sans-serif\",\r\n                    stroke: \"whitesmoke\"\r\n                })\r\n        )\r\n    );\r\n    function convertIsTreeLink(r: string) {\r\n        return r === \"generalization\";\r\n    }\r\n    function convertIsStateLink(r: string) {\r\n        return r === \"state\";\r\n    }\r\n\r\n    function convertFromArrow(r: any) {\r\n        switch (r) {\r\n            case \"generalization\": return \"\";\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    function convertToArrow(r: any) {\r\n        switch (r) {\r\n            case \"generalization\": return \"Triangle\";\r\n            case \"state\": return \"Triangle\";\r\n            case \"aggregation\": return \"StretchedDiamond\";\r\n            default: return \"\";\r\n        }\r\n    }\r\n\r\n    myDiagram.linkTemplate =\r\n        $(go.Link,\r\n            { routing: go.Link.Orthogonal },\r\n            new go.Binding(\"isLayoutPositioned\", \"relationship\", convertIsTreeLink),\r\n            new go.Binding(\"isLayoutPositioned\", \"relationship\", convertIsStateLink),\r\n            $(go.Shape),\r\n            $(go.Shape, { scale: 1.3, fill: \"white\" },\r\n                new go.Binding(\"fromArrow\", \"relationship\", convertFromArrow)),\r\n            $(go.Shape, { scale: 1.3, fill: \"white\" },\r\n                new go.Binding(\"toArrow\", \"relationship\", convertToArrow)),\r\n            $(go.TextBlock, \"\",  // the label text\r\n                {\r\n                    textAlign: \"center\",\r\n                    font: \"9pt helvetica, arial, sans-serif\",\r\n                    margin: 4,\r\n                    editable: true  // enable in-place editing\r\n                },\r\n                // editing the text automatically updates the model data\r\n                new go.Binding(\"text\").makeTwoWay())\r\n        );\r\n\r\n    myDiagram.model = new go.GraphLinksModel(\r\n        {\r\n            linkKeyProperty: 'key',\r\n            copiesArrays: true,\r\n            copiesArrayObjects: true,\r\n        });\r\n\r\n    return myDiagram;\r\n}\r\n\r\n\r\nexport default function GoClass(props: { nodedata: any, linkdata: any, arrangement: string }) {\r\n    return (\r\n        <ReactDiagram\r\n            initDiagram={initDiagram}\r\n            divClassName='diagram-component'\r\n            nodeDataArray={props.nodedata}\r\n            linkDataArray={props.linkdata}\r\n        />\r\n    );\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport * as React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport GoClass from '../GoClass';\r\n\r\nexport interface TrayItemWidgetProps {\r\n\tnode: any;\r\n}\r\n\r\nnamespace S {\r\n\texport const Tray = styled.div<{ color: string }>`\r\n\t\tcolor: white;\r\n\t\tfont-family: Helvetica, Arial;\r\n\t\tfont-size:0.6em;\r\n\t\tpadding: 2px 0px;\r\n\t\tmargin:\t 5px 10px ;\r\n\t\tborder: solid 1px ${(p) => p.color};\r\n\t\tborder-radius: 100px;\r\n\t\tmargin-bottom: 2px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: rgb(20, 20, 20);\r\n\t`;\r\n}\r\n\r\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\r\n\trender() {\r\n\t\tlet methods: any[] = []\r\n\t\tthis.props.node.methods?.forEach((method: any) => {\r\n\t\t\tmethods.push({ name: method, visibility: 'public' })\r\n\t\t});\r\n\t\tthis.props.node.ins?.forEach((method: any) => {\r\n\t\t\tmethods.push({ name: method, visibility: 'public' })\r\n\t\t});\r\n\t\tthis.props.node.outs?.forEach((method: any) => {\r\n\t\t\tmethods.push({ name: method, visibility: 'public' })\r\n\t\t});\r\n\t\tconst node = {\r\n\t\t\tkey: 0,\r\n\t\t\tname: this.props.node.name,\r\n\t\t\tmethods: methods,\r\n\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<S.Tray\r\n\t\t\t\tcolor={this.props.node.color || 'red'}\r\n\t\t\t\tdraggable={true}\r\n\t\t\t\tonDragStart={(event) => {\r\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.node));\r\n\t\t\t\t\tevent.dataTransfer.setDragImage(new Image(), 10, 10);\r\n\t\t\t\t}}\r\n\t\t\t\tclassName=\"tray-item\">\r\n\r\n\t\t\t\t{this.props.node.name}\r\n\r\n\t\t\t\t<a data-tip data-for={'tip-' + this.props.node.name} style={{ float: 'right', marginRight: '6px' }} >\r\n\t\t\t\t\t<OpenInNewIcon style={{ fontSize: '1rem' }} />\r\n\t\t\t\t</a>\r\n\t\t\t\t<ReactTooltip\r\n\t\t\t\t\tclassName=\"interactableTooltip\"\r\n\t\t\t\t\tid={'tip-' + this.props.node.name}\r\n\t\t\t\t\ttype='light' place=\"right\"\r\n\t\t\t\t\tdelayHide={500}\r\n\t\t\t\t\teffect=\"solid\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className='miniGoHolder'>\r\n\t\t\t\t\t\t<GoClass\r\n\t\t\t\t\t\t\tlinkdata={[]} nodedata={[node]} arrangement='horizontal' />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ReactTooltip>\r\n\t\t\t</S.Tray>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { css, Global } from '@emotion/react';\r\n\r\nexport interface MyCanvasWidgetProps {\r\n\tcolor?: string;\r\n\tbackground?: string;\r\n}\r\n\r\nnamespace S {\r\n\texport const Container = styled.div<{ color: string; background: string }>`\r\n\t\theight: 100%;\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tbackground-size: 50px 50px;\r\n\t\tdisplay: flex;\r\n\r\n\t\t> * {\r\n\t\t\theight: 100%;\r\n\t\t\tmin-height: 100%;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\r\n\t\tbackground-image: linear-gradient(\r\n\t\t\t\t0deg,\r\n\t\t\t\ttransparent 24%,\r\n\t\t\t\t${(p) => p.color} 25%,\r\n\t\t\t\t${(p) => p.color} 26%,\r\n\t\t\t\ttransparent 27%,\r\n\t\t\t\ttransparent 74%,\r\n\t\t\t\t${(p) => p.color} 75%,\r\n\t\t\t\t${(p) => p.color} 76%,\r\n\t\t\t\ttransparent 77%,\r\n\t\t\t\ttransparent\r\n\t\t\t),\r\n\t\t\tlinear-gradient(\r\n\t\t\t\t90deg,\r\n\t\t\t\ttransparent 24%,\r\n\t\t\t\t${(p) => p.color} 25%,\r\n\t\t\t\t${(p) => p.color} 26%,\r\n\t\t\t\ttransparent 27%,\r\n\t\t\t\ttransparent 74%,\r\n\t\t\t\t${(p) => p.color} 75%,\r\n\t\t\t\t${(p) => p.color} 76%,\r\n\t\t\t\ttransparent 77%,\r\n\t\t\t\ttransparent\r\n\t\t\t);\r\n\t`;\r\n\r\n\texport const Expand = css`\r\n\t\thtml,\r\n\t\tbody,\r\n\t\t#root {\r\n\t\t\theight: 100%;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport class MyCanvasWidget extends React.Component<MyCanvasWidgetProps> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<Global styles={S.Expand} />\r\n\t\t\t\t<S.Container\r\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\r\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</S.Container>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import { DefaultLinkModel, DefaultLinkModelOptions } from '@projectstorm/react-diagrams-defaults';\r\nimport { PointModel } from '@projectstorm/react-diagrams-core';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { RightAngleLinkFactory } from '@projectstorm/react-diagrams';\r\n\r\nexport class MyRightAngleLinkModel extends DefaultLinkModel {\r\n\tlastHoverIndexOfPath: number;\r\n\tprivate _lastPathXdirection: boolean;\r\n\tprivate _firstPathXdirection: boolean;\r\n\tconstructor(options: DefaultLinkModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\ttype: RightAngleLinkFactory.NAME,\r\n\t\t\t...options\r\n\t\t});\r\n\t\tthis.lastHoverIndexOfPath = 0;\r\n\t\tthis._lastPathXdirection = false;\r\n\t\tthis._firstPathXdirection = false;\r\n\t}\r\n\r\n\tsetFirstAndLastPathsDirection() {\r\n\t\tlet points = this.getPoints();\r\n\t\tfor (let i = 1; i < points.length; i += points.length - 2) {\r\n\t\t\tlet dx = Math.abs(points[i].getX() - points[i - 1].getX());\r\n\t\t\tlet dy = Math.abs(points[i].getY() - points[i - 1].getY());\r\n\t\t\tif (i - 1 === 0) {\r\n\t\t\t\tthis._firstPathXdirection = dx > dy;\r\n\t\t\t} else {\r\n\t\t\t\tthis._lastPathXdirection = dx > dy;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// @ts-ignore\r\n\taddPoint<P extends PointModel>(pointModel: P, index: number = 1): P {\r\n\t\t// @ts-ignore\r\n\t\tsuper.addPoint(pointModel, index);\r\n\t\tthis.setFirstAndLastPathsDirection();\r\n\t\treturn pointModel;\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.setFirstAndLastPathsDirection();\r\n\t}\r\n\r\n\tsetManuallyFirstAndLastPathsDirection(first: boolean, last: boolean) {\r\n\t\tthis._firstPathXdirection = first;\r\n\t\tthis._lastPathXdirection = last;\r\n\t}\r\n\r\n\tgetLastPathXdirection(): boolean {\r\n\t\treturn this._lastPathXdirection;\r\n\t}\r\n\tgetFirstPathXdirection(): boolean {\r\n\t\treturn this._firstPathXdirection;\r\n\t}\r\n\r\n\tsetWidth(width: number) {\r\n\t\tthis.options.width = width;\r\n\t\tthis.fireEvent({ width }, 'widthChanged');\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.options.color = color;\r\n\t\tthis.fireEvent({ color }, 'colorChanged');\r\n\t}\r\n}","import {\r\n\tPortModel,\r\n\tPortModelAlignment,\r\n\tPortModelGenerics,\r\n\tPortModelOptions\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { MyRightAngleLinkModel } from './MyRightAngleLinkModel';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\n\r\nexport interface MyPortModelOptions extends PortModelOptions {\r\n\tlabel?: string;\r\n\tin?: boolean;\r\n\thasHiddenLabel?: boolean;\r\n}\r\n\r\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\r\n\tOPTIONS: MyPortModelOptions;\r\n}\r\n\r\nexport class MyPortModel extends PortModel<DefaultPortModelGenerics> {\r\n\textras: any;\r\n\tconstructor(options: MyPortModelOptions) {\r\n\t\tsuper({\r\n\t\t\tin: options.in,\r\n\t\t\tname: options.name,\r\n\t\t\tlabel: options.label || options.name,\r\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\r\n\t\t\ttype: 'default',\r\n\t\t\textras: { hasHiddenLabel: options.hasHiddenLabel }\r\n\t\t});\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.extras = event.data.extras;\r\n\t\tthis.options.in = event.data.in;\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tin: this.options.in,\r\n\t\t\tlabel: this.options.label,\r\n\t\t\textras: this.options.extras,\r\n\t\t};\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\tconsole.log('linking ', port.getOptions().id)\r\n\t\treturn port.getOptions().id !== this.getOptions().id\r\n\t}\r\n\tcreateLinkModel(): MyRightAngleLinkModel {\r\n\r\n\t\tfunction hsl2rgb(h: any, s: any, l: any) {\r\n\t\t\tlet a = s * Math.min(l, 1 - l);\r\n\t\t\tlet f = (n: any, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n\t\t\treturn [f(0), f(8), f(4)];\r\n\t\t}\r\n\t\tlet link = new MyRightAngleLinkModel()\r\n\t\tlink.setWidth(5)\r\n\t\tlink.setColor('rgb(' + hsl2rgb(Math.random() * 360, 100, 100) +\r\n\t\t\t')')\r\n\t\treturn link\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from '../myNode/MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyEditableNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    portsIn: MyPortModel[] = [];\r\n    portsOut: MyPortModel[] = [];\r\n    extras: Object;\r\n    selectableOptions: string[];\r\n    constructor(data: any) {\r\n        super({\r\n            type: 'MyEditable',\r\n            name: data.name,\r\n            color: data.color,\r\n        });\r\n\r\n        data.extras.returnType = data.extras.returnType || 'byte'\r\n        data.extras.value = data.extras.value || 'value'\r\n\r\n        this.extras = data.extras;\r\n\r\n        data.methods?.forEach((biPort: string) => {\r\n            this.addInPort(biPort)\r\n            this.addOutPort(biPort + ' ', true, true)\r\n        });\r\n        data.ins?.forEach((inPort: string) => {\r\n            this.addInPort(inPort)\r\n        });\r\n        data.outs?.forEach((outPort: string) => {\r\n            this.addOutPort(outPort)\r\n        });\r\n        this.selectableOptions = data.extras.selectableOptions || false;\r\n\r\n        console.log('Created', this)\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(name: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: name,\r\n            label: name,\r\n            alignment: PortModelAlignment.LEFT,\r\n            hasHiddenLabel: false\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(name: string, after = true, hasHiddenLabel = false): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: name,\r\n            label: hasHiddenLabel ? name + ' ' : name,\r\n            alignment: PortModelAlignment.RIGHT,\r\n            hasHiddenLabel: hasHiddenLabel\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n        this.selectableOptions = event.data.selectableOptions\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras,\r\n            selectableOptions: this.selectableOptions\r\n        }\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [\r\n\r\n    {\r\n        name: 'test',\r\n        color: 'black',\r\n        extras: {\r\n            type: 'test',\r\n            returnType: 'void',\r\n            hasUsages: true,\r\n        },\r\n        methods: [\r\n            'int getShit()'\r\n        ]\r\n    }, {\r\n        name: 'Arduino Uno',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 14,\r\n        },\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    }, {\r\n        name: 'Arduino Nano',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 22,\r\n        },\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Mega',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 16,\r\n            digitalPorts: 54,\r\n        },\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Leonardo',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 12,\r\n            digitalPorts: 20,\r\n        },\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Flora',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 4,\r\n            digitalPorts: 8,\r\n        },\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Port',\r\n        color: 'pink',\r\n        extras: {\r\n            value: '0',\r\n            group: 'value',\r\n            type: 'port',\r\n            hasUsages: true,\r\n            hasPortType: true,\r\n            portType: 'Digital',\r\n            returnType: 'int',\r\n            selectableOptions: Array.from(Array(100).keys()).map(x => x.toString()),\r\n            hasValue: true,\r\n        },\r\n        ins: [\r\n            'in'\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Parameter(s)',\r\n        color: 'pink',\r\n        extras: {\r\n            group: 'value',\r\n            type: 'parameter',\r\n            hasUsages: true,\r\n            hasReturnType: true,\r\n            value: '0',\r\n            hasValue: true,\r\n        },\r\n        ins: [\r\n            'in'\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable(s)',\r\n        color: 'pink',\r\n        extras: {\r\n            group: 'value',\r\n            type: 'variable',\r\n            name: 'var',\r\n            hasUsages: true,\r\n            hasReturnType: true,\r\n            hasUsername: true,\r\n            hasValue: true,\r\n        },\r\n        ins: [\r\n            'in',\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Constant(s)',\r\n        color: 'pink',\r\n        extras: {\r\n            group: 'value',\r\n            type: 'constant',\r\n            name: 'con',\r\n            hasUsages: true,\r\n            hasReturnType: true,\r\n            hasUsername: true,\r\n            hasValue: true,\r\n        },\r\n        ins: [\r\n            'in'\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Digital I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void digitalWrite(int pin, int value)',\r\n            'void pinMode(int pin, int mode)',\r\n            'int digitalRead(int pin)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Analog I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void analoglWrite(int pin, int value)',\r\n            'void pinMode(int pin, int mode)',\r\n            'void analogReference(int type)',\r\n\r\n        ]\r\n    },\r\n    {\r\n        name: 'Time',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void delay(int ms)',\r\n            'void delayMicroseconds(int us)',\r\n            'unsigned long micros()',\r\n            'unsigned long millis()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Math',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void delay(int ms)',\r\n            'int abs(int x)',\r\n            'int constrain(int x, int a, int b)',\r\n            'int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)',\r\n            'any? max(any x, any y)',\r\n            'any? min(any x, any y)',\r\n            'double pow(float base, float exponent)',\r\n            'double sq(any x)',\r\n            'double sqrt(any x)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Trigonometry',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'double cos(float rad)',\r\n            'double sin(float rad)',\r\n            'double tan(float rad)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Random Numbers',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void randomSeed(long seed)',\r\n            'long random(? max)',\r\n            'long random(? min, ? max)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Zero, Due & MKR Family',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void analogReadResolution(bits bits)',\r\n            'void analogWriteResolution(bits bits)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Advanced I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        methods: [\r\n            'void noTone(int pin)',\r\n            'unsigned long pulseIn(int pin, int value)',\r\n            'unsigned long pulseIn(int pin, int value,unsigned long timeout)',\r\n            'unsigned long pulseInLong(int pin, int value)',\r\n            'unsigned long pulseInLong(int pin, int value,unsigned long timeout)',\r\n            'byte shiftIn(int dataPin, int clockPin, int bitOrder)',\r\n            'void shiftOut(int dataPin, int clockPin, int bitOrder, byte value)',\r\n            'void tone(int pin, unsigned int frequency)',\r\n            'void tone(int pin, unsigned int frequency, unsigned long duration)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'true',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in-constant',\r\n            returnType: 'int',\r\n            hasUsages: true,\r\n        },\r\n        ins: [\r\n            'in',\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    }, {\r\n        name: 'false',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in-constant',\r\n            returnType: 'int',\r\n            hasUsages: true,\r\n        },\r\n        ins: [\r\n            'in',\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    }, {\r\n        name: 'HIGH',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in-constant',\r\n            returnType: 'int',\r\n            hasUsages: true,\r\n        },\r\n        ins: [\r\n            'in',\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    }, {\r\n        name: 'LOW',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in-constant',\r\n            returnType: 'int',\r\n            hasUsages: true,\r\n        },\r\n        ins: [\r\n            'in',\r\n        ],\r\n        outs: [\r\n            'out',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Function',\r\n        extras: {\r\n            type: 'logic',\r\n            value: 'foo',\r\n            hasUsages: true,\r\n            hasReturnType: true,\r\n            // hasUsername: true,\r\n            hasValue: true,\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'call',\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n        ]\r\n    }, {\r\n        name: 'Condition',\r\n        extras: {\r\n            type: 'logic',\r\n            selectableOptions: ['==', '!=', '<', '>', '<=', '>=', '<=>'],\r\n            value: '=='\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n            'x',\r\n            'y'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Loop',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'startValue',\r\n            'stopValue'\r\n        ]\r\n    },\r\n\r\n    {\r\n        name: 'TwoWire Interface',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Wire.h'\r\n        },\r\n        methods: [\r\n            'void begin()',\r\n            'void beginTransmission()',\r\n            'void setClock()',\r\n            'void onReceive()',\r\n            'void onRequest()',\r\n            'byte requestFrom()',\r\n            'byte endTransmission()',\r\n            'byte write()',\r\n            'byte available()',\r\n            'byte read()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'PWM Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Adafruit_PWMServoDriver.h'\r\n        },\r\n        methods: [\r\n            'void begin(uint8_t prescale=0)',\r\n            'void sleep()',\r\n            'void wakeup()',\r\n            'void setExtClk(uint8_t prescale)',\r\n            'void setPWMFreq(float freq)',\r\n            'void setOutputMode(bool totempole)',\r\n            'void setPWM(uint8_t num, uint16_t on, uint16_t off)',\r\n            'void setPin(uint8_t num, uint16_t val, bool invert=false)',\r\n            'void writeMicroseconds(uint8_t num, uint16_t Microseconds)',\r\n            'void setOscillatorFrequency(uint32_t freq)',\r\n            'uint8_t getPWM(uint8_t num)',\r\n            'uint8_t readPrescale()',\r\n            'uint32_t getOscillatorFrequency()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Servo.h',\r\n            link: 'arduino.cc/reference/en/libraries/servo/'\r\n        },\r\n        methods: [\r\n            'uint8_t attach(int pin)',\r\n            'uint8_t attach(int pin, int min, int max)',\r\n            'void detach()',\r\n            'void write(int value)',\r\n            'void writeMicroseconds(int value)',\r\n            'int read()',\r\n            'int readMicroseconds()',\r\n            'bool attached()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Stepper',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Stepper.h'\r\n        },\r\n        methods: [\r\n            'Stepper(int, int, int)',\r\n            'Stepper(int, int, int, int, int)',\r\n            'Stepper(int, int, int, int, int, int)',\r\n            'void setSpeed(long whatSpeed)',\r\n            'void step(int number_of_steps)',\r\n            'int version(void)',\r\n        ]\r\n    },\r\n]","\r\nconst startDelta = 1000\r\nconst endDelta = 2000\r\nconst controllerDelta = 3000\r\nconst methodDelta = 4000\r\n\r\n\r\n\r\n\r\nexport function transformAllIntoMethods(node: any) {\r\n    let methods: any[] = []\r\n    node.ports?.forEach((method: any) => {\r\n        methods.push({ name: method.label, visibility: 'public' })\r\n    });\r\n\r\n    node.methods?.forEach((method: any) => {\r\n        methods.push({ name: method, visibility: 'public' })\r\n    });\r\n    node.ins?.forEach((method: any) => {\r\n        methods.push({ name: method, visibility: 'public' })\r\n    });\r\n    node.outs?.forEach((method: any) => {\r\n        methods.push({ name: method, visibility: 'public' })\r\n    });\r\n    return methods\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function processDynamic(node: any, index: number) {\r\n    let nodes: any[] = []\r\n    let links: any[] = []\r\n\r\n\r\n    nodes.push({ key: index + controllerDelta, name: 'MicroController' })\r\n    links.push({\r\n        key: index + controllerDelta,\r\n        from: index + startDelta,\r\n        to: index + controllerDelta,\r\n        relationship: \"state\"\r\n    })\r\n    nodes.push({ key: index + startDelta, category: \"Start\" })\r\n\r\n    transformAllIntoMethods(node).forEach((method, methodIndex) => {\r\n        links.push({\r\n            key: index + startDelta + methodIndex * methodDelta,\r\n            from: index + controllerDelta,\r\n            to: index, text: method.name,\r\n            relationship: \"state\"\r\n        })\r\n    });\r\n    nodes.push({\r\n        key: index,\r\n        name: node.name,\r\n    })\r\n    links.push({\r\n        key: index + endDelta,\r\n        from: index,\r\n        to: index + endDelta,\r\n        relationship: \"state\"\r\n    })\r\n    nodes.push({ key: index + endDelta, category: \"End\" })\r\n\r\n    return { nodes, links }\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport Prism from \"prismjs\";\r\nimport { useEffect } from \"react\";\r\nimport \"./prism.css\";\r\n// import PrismEdit from \"./PrismEdit\";\r\nimport Xarrow from \"react-xarrows\";\r\n\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport GoClass from './GoClass';\r\n\r\nimport { processDynamic } from \"../components/goBuilder\"\r\n\r\nconst returnTypes = ['byte', 'unsigned int', 'unsigned long', 'int', 'long', 'bool', 'float', 'double', 'char']\r\nconst ordinals = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh']\r\n\r\nconst paramTypes = ['variable', 'constant', 'parameter', 'port', 'built-in-constant']\r\n\r\nfunction generateCode(model: any): { code: string, problems: any[] } {\r\n\r\n    // #region Reviewed Functions\r\n    function addConstantDeclarations(constants: any) {\r\n        if (constants.length > 0) {\r\n            add(\"\")\r\n            add('// Constants')\r\n            constants.forEach((constant: any) => {\r\n                let params = constant.extras.value.split(',')\r\n                const isArray = params.length > 1\r\n                const count = isArray ? '[' + params.length + ']' : ''\r\n                params = isArray ? '{' + params.map((x: any) => x) + '}' : params\r\n                add(`#define ${constant.extras.returnType} ${constant.extras.name}${count} = ${params};`)\r\n            });\r\n        }\r\n    }\r\n    function addVariableDeclarations(variables: any) {\r\n        if (variables.length > 0) {\r\n            add(\"\")\r\n            add('// Variables')\r\n            variables.forEach((variable: any) => {\r\n                let params = variable.extras.value.split(',')\r\n                const isArray = params.length > 1\r\n                const count = isArray ? '[' + params.length + ']' : ''\r\n                params = isArray ? '{' + params.map((x: any) => x) + '}' : params\r\n                add(`${variable.extras.returnType} ${variable.extras.name}${count} = ${params};`)\r\n            });\r\n        }\r\n    }\r\n    function addFunctionDeclarations(functions: any) {\r\n        if (functions.length > 0) {\r\n            add('// Functions')\r\n            logics.forEach(logic => {\r\n                if (logic.name === \"Function\") {\r\n                    add(`${logic.extras.returnType} ${logic.extras.value}() {`)\r\n                    const callPort = logic.ports.find((x: any) => x.alignment === 'right')\r\n                    callPort.links.forEach((l: any) => {\r\n                        processLink(l)\r\n                    });\r\n                    add('}')\r\n                }\r\n            });\r\n        }\r\n    }\r\n    function addLibraries() {\r\n        const libraries: any[] = [...new Set(components.map(component => component.extras.library))]\r\n\r\n        if (libraries.length > 0) {\r\n            add(\"\")\r\n            add('// Libraries')\r\n            libraries.forEach((lib: any) => {\r\n                add('#include <' + lib + '>')\r\n            });\r\n            add('')\r\n            add('// Objects')\r\n            libraries.forEach((lib: any) => {\r\n                components.forEach(comp => {\r\n                    if (comp.extras.library === lib)\r\n                        add(comp.name + ' ' + comp.instance)\r\n                });\r\n            });\r\n        }\r\n    }\r\n    function indentCode(original: string) {\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(Math.max(level, 0)) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    function warnAboutNodesWithoutLinks(nodes: any) {\r\n        nodes.forEach((node: any) => {\r\n            let hasLink = false\r\n            node.ports.forEach((port: any) => {\r\n                if (port.links.length > 0) {\r\n                    hasLink = true\r\n                }\r\n            });\r\n            if (!hasLink) {\r\n                warn('This component has no links', [node])\r\n            }\r\n        });\r\n    }\r\n    function warnAboutPortUsage() {\r\n        usedDigital.forEach(port => {\r\n            if (port.extras.value >= controller?.extras.digitalPorts) {\r\n                warn(`This ${port.name} does not exist on this micro-controller`, [port])\r\n            }\r\n        });\r\n        usedAnalog.forEach(port => {\r\n            if (port.extras.value >= controller?.extras.analogPorts) {\r\n                warn(`This ${port.name} does not exist on this micro-controller`, [port])\r\n            }\r\n        });\r\n    }\r\n    function warnAboutMultipleUsePorts(nodes: any) {\r\n        nodes.filter((node: any) => paramTypes.includes(node.extras.type))\r\n            .forEach((node: any) => {\r\n                node.ports.forEach((port: any) => {\r\n                    if (port.links.length > 1) {\r\n                        warn(`This ${node.name.toLowerCase()} has more than one link in the same ${port.label} port.`, [node])\r\n                    } else {\r\n                        if (port.links.length === 0) {\r\n                            warn(`This ${node.name.toLowerCase()} is not being used.`, [node])\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n    }\r\n    function warnAboutLooseLinks(links: any) {\r\n        links.forEach((link: any) => {\r\n            const fromPort = getPort(link.source, link.sourcePort);\r\n            const fromNode = getNode(fromPort?.parentNode)\r\n            const toPort = getPort(link.target, link.targetPort);\r\n            if (!toPort) {\r\n                warn('Loose link', [fromNode]);\r\n            }\r\n\r\n        });\r\n    }\r\n    function getLinksFromModel(model: any) {\r\n        const temp: any[] = []\r\n        Object.entries(model.layers[0].models).forEach((link: any) => {\r\n            temp.push(link[1])\r\n        })\r\n        return temp\r\n    }\r\n    function getNodesFromModel(model: any) {\r\n        const temp: any[] = []\r\n        Object.entries(model.layers[1].models).forEach((node: any) => {\r\n            temp.push(node[1])\r\n        })\r\n        return temp\r\n    }\r\n    function getComponentsFromNodes(nodes: any) {\r\n        let temp: any[] = []\r\n        nodes.filter((node: any) => node.extras?.type === 'component')\r\n            .forEach((node: any) => {\r\n                node.instance = node.name.toLowerCase().replace(' ', '') +\r\n                    temp.filter(t => t.extras?.library === node.extras?.library).length\r\n                temp.push(node)\r\n            });\r\n        return temp\r\n    }\r\n    function warnAboutNumberOfControllers() {\r\n        const controllers: any[] = nodes.filter(node => node.extras?.type === 'controller')\r\n        if (controllers.length === 0) {\r\n            warn('No micro-controller')\r\n        }\r\n        if (controllers.length > 1) {\r\n            warn('More than one micro-controller', controllers)\r\n        }\r\n    }\r\n    function add(...message: string[]) {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n        return code;\r\n    };\r\n    function addHeaderComments() {\r\n        add(\"/* Code generated for \", controller?.name);\r\n        const uniqueDigitals = [...new Set(usedDigital.map(u => u.extras.value))]\r\n        const uniqueAnalogs = [...new Set(usedAnalog.map(u => u.extras.value))]\r\n\r\n        add(`Analog ports ${uniqueAnalogs.length}/${controller?.extras.analogPorts} ${usedAnalog.length > 0 ? `(${uniqueAnalogs.map(port => port)})` : \"\"} `)\r\n        add(`Digital ports ${uniqueDigitals.length}/${controller?.extras.digitalPorts} ${usedDigital.length > 0 ? `(${uniqueDigitals.map(port => port)})` : \"\"}`, \"    */\")\r\n    }\r\n    function getLink(linkID: string) {\r\n        return links.find(l => l.id === linkID);\r\n    }\r\n    function getPort(nodeID: string, portID: string) {\r\n        try {\r\n            return nodes.find((n: any) => n.id === nodeID).ports\r\n                .find((p: any) => p.id === portID);\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Only to be used for paramTypes !\r\n     */\r\n    function getOutPort(inPort: any) {\r\n        try {\r\n            const node = getNode(inPort.parentNode)\r\n            const portPosition = node.portsInOrder.indexOf(inPort.id)\r\n            const outPortId = node.portsOutOrder[portPosition]\r\n            const outPort = node.ports.find((p: { id: any; }) => p.id === outPortId)\r\n            return outPort\r\n        } catch (error) {\r\n            return null\r\n        }\r\n    }\r\n\r\n    function getNode(nodeID: string) {\r\n        return nodes.find((n: any) => n.id === nodeID);\r\n    }\r\n    // function getParent(childNode: any) {\r\n    //     return nodes.find((n: any) => n.id === childNode.parentNode);\r\n    // }\r\n    function warn(message: string, nodes: any[] = [], type: any = 'not used') {\r\n        problems.push({ message, nodes: nodes });\r\n        return problems;\r\n    }\r\n    function addLifecycleMethods() {\r\n        add(\"\")\r\n        add(`// Micro-controller's Lifecycle`)\r\n        controller?.ports.forEach((port: any) => {\r\n            add('void ', port.label, \"{\");\r\n            port.links.forEach((l: any) => {\r\n                processLink(l)\r\n            })\r\n            add(\"}\\n\");\r\n        })\r\n    }\r\n    // #endregion\r\n\r\n    // #region Unreviewed Functions\r\n    function processLink(l: any) {\r\n        function callWithParameters(port: any, params: any) {\r\n            console.log('calling', port, params)\r\n\r\n\r\n            const node = getNode(port.parentNode)\r\n            const expected = port.name?.split('(')[1].split(')')[0].split(',').filter((e: any) => e)\r\n            const received: any[] = []\r\n\r\n            params.forEach((p: any) => {\r\n                if (paramTypes.includes(p.extras.type)) {\r\n                    received.push(...p.extras.value.split(',').map((m: any) => p.extras.returnType + ' ' + m))\r\n                }\r\n            });\r\n\r\n            if (expected.length !== received.length) {\r\n                warn(`The function call \"${port.name}\" is receiving ${received.length} parameters instead of the expected ${expected.length}`, [node])\r\n                return\r\n            }\r\n\r\n            expected.forEach((ex: any, index: number) => {\r\n                const expectedType = returnTypes.find((rt: any) => ex.trim().startsWith(rt)) || node.extras?.returnType\r\n\r\n\r\n                const receivedType = returnTypes.find((rt: any) => received[index].startsWith(rt))\r\n                if (expectedType !== receivedType) {\r\n                    warn(`The function call \"${port.name}\" expects its ${ordinals[index]} parameter to be of type \"${expectedType}\", received \"${receivedType}\" instead`, [node])\r\n                }\r\n            });\r\n\r\n            function formattedParameters(params: any) {\r\n                return params.map((par: any) => {\r\n                    switch (par.extras.type) {\r\n                        case 'parameter':\r\n                        case 'port':\r\n                            return par.extras.value\r\n                        case 'constant':\r\n                        case 'variable':\r\n                            return par.extras.name\r\n                        case 'built-in-constant':\r\n                            console.log(par)\r\n                            return par.name\r\n                        default:\r\n                            return 'error on node type'\r\n                    }\r\n                })\r\n            }\r\n\r\n            if (node?.instance) {\r\n                add(node.instance\r\n                    + '.'\r\n                    + port.name.substring(port.name.indexOf(' ') + 1, port.name.indexOf('('))\r\n                    + '('\r\n                    + formattedParameters(params)\r\n                    + ') '\r\n                    + ';');\r\n            } else if (fromNode?.instance) {\r\n                add(fromNode.instance + '.' + (fromPort.name) + '();');\r\n            } else if (port.name.startsWith('void setValue')) {\r\n                let variableParams = formattedParameters(params)\r\n\r\n                // variableParams = variableParams.split(',')\r\n                // console.log('adding', node.extras.name, variableParams)\r\n                add(node.extras.name + ' = ' + variableParams)\r\n            } else if (node.extras.type === 'built-in') {\r\n                add(port.name.substring(port.name.indexOf(' ') + 1, port.name.indexOf('('))\r\n                    + '('\r\n                    + formattedParameters(params)\r\n                    + ') '\r\n                    + ';');\r\n            } else {\r\n                console.warn('confusion at ', port, node, fromNode)\r\n                add('confusion')\r\n                // warn('Loose connection', [fromNode]);\r\n            }\r\n            // try {\r\n            //     if (node.extras.type === 'constant') {\r\n            //         contents.push(node.extras.name);\r\n            //     } else {\r\n            //         contents.push(node.extras.value);\r\n            //     }\r\n            // } catch (error) {\r\n            //     console.log('error, no parameter?');\r\n            // }\r\n            // node.ports.forEach((port: any) => {\r\n            //     port.links.forEach((l: any) => {\r\n            //         const link = getLink(l);\r\n            //         const toPort = getPort(link.target, link.targetPort);\r\n            //         const toNode = getNode(toPort?.parentNode);\r\n            //         if (!toNode) {\r\n            //         } else if (toNode?.id === node?.id) { //skip as it is the previous link\r\n            //             if (toNode.instance) {\r\n            //                 add(toNode.instance + '.' + toPort.name.split(\"(\").shift() + '(' + contents + ');');\r\n            //             }\r\n            //         } else if (toNode?.extras?.type === 'built-in') {\r\n            //             add(toPort.name.split(\"(\").shift() + '(' + contents + ');');\r\n            //         } else if (!toNode?.instance) { //points to another variable/port\r\n            //             callWithParameters(toNode, ...extrass);\r\n            //         } else { //points to a class instance, we hope it is a method call\r\n            //             //todo: check for parameter type and numbers\r\n            //             add(toNode.instance + '.' + (toPort.name.split(\"(\").shift()) + '(' + contents + ');');\r\n            //         }\r\n            //     });\r\n            // });\r\n        }\r\n        // function getCoditionalValue(conditionNode: any, portName: any): string {\r\n        //     try {\r\n        //         let linkID = conditionNode.ports.find((p: any) => p.name === portName).links[0];\r\n        //         let link = getLink(linkID);\r\n        //         let port = getPort(link.source, link.sourcePort);\r\n        //         let parent = getParent(port);\r\n\r\n        //         if (['variable', 'port'].includes(parent.extras.type)) {\r\n        //             return parent.extras.value;\r\n        //         }\r\n        //         else if (['component'].includes(parent.extras.type)) {\r\n        //             return parent.instance + '.' + port.name;\r\n        //         } else {\r\n        //             return add('Unknown extras.type');\r\n        //         }\r\n        //     } catch (error) {\r\n        //         return '/* Lacking Value */';\r\n        //     }\r\n        // }\r\n        // function getOutcome(conditionNode: any, ifThis = 'True') {\r\n        //     try {\r\n        //         let linkID = conditionNode.ports.find((p: any) => p.name === ifThis).links[0];\r\n        //         let link = getLink(linkID);\r\n        //         return getPort(link.target, link.targetPort);\r\n        //     } catch (error) {\r\n        //         return { label: '// Lacking Outcome' };\r\n        //     }\r\n        // }\r\n\r\n        const link = getLink(l); if (!link) return\r\n        const fromPort = getPort(link.source, link.sourcePort);\r\n        const fromNode = getNode(fromPort.parentNode);\r\n        const toPort = getPort(link.target, link.targetPort); if (!toPort) return\r\n        const toNode = getNode(toPort.parentNode);\r\n\r\n        const params: any[] = []\r\n        if (paramTypes.includes(toNode?.extras?.type)) {\r\n            params.push(toNode)\r\n\r\n            let nextFromPort = getOutPort(toPort); if (!nextFromPort) return\r\n            let nextLink = getLink(nextFromPort.links[0]); if (!nextLink) return\r\n            let nextToPort = getPort(nextLink.target, nextLink.targetPort); if (!nextToPort) return\r\n            let nextToNode = getNode(nextToPort.parentNode)\r\n\r\n            while (paramTypes.includes(nextToNode?.extras?.type && nextToPort.label.startsWith('void setValue'))) {\r\n                params.push(nextToNode)\r\n\r\n                nextFromPort = getOutPort(nextToPort); if (!nextFromPort) return\r\n                nextLink = getLink(nextFromPort.links[0]); if (!nextLink) return\r\n                nextToPort = getPort(nextLink.target, nextLink.targetPort); if (!nextToPort) return\r\n                nextToNode = getNode(nextToPort.parentNode)\r\n            }\r\n\r\n            // console.log('going to call', nextToPort.name)\r\n            // console.log('with the following params', params.map((p: any) => p.extras.value))\r\n            callWithParameters(nextToPort, params)\r\n        } else { //is a component or function?\r\n            callWithParameters(toPort, params)\r\n\r\n        }\r\n\r\n        // if (toNode?.extras?.type === 'built-in') {\r\n        //     add(toPort.name + '()');\r\n        // } else if (toNode?.name === \"Function\") {\r\n        //     add(toNode.extras.value, '(', ');');\r\n        // } else if (toNode?.name === \"Condition\") {\r\n        //     const xValue = getCoditionalValue(toNode, 'x');\r\n        //     const yValue = getCoditionalValue(toNode, 'y');\r\n\r\n        //     const outcome2 = getOutcome(toNode);\r\n        //     const toNode2 = getParent(outcome2);\r\n\r\n        //     const outcome3 = getOutcome(toNode, 'False');\r\n        //     const toNode3 = getParent(outcome3);\r\n\r\n        //     add('if (', xValue, ' ' + toNode.extras.value + ' ', yValue, ') {');\r\n        //     if (toNode2) {\r\n        //         callWithParameters(toNode2);\r\n        //     } else {\r\n        //         add('/* Lacking code to be executed if conditional is true */');\r\n        //     }\r\n        //     if (toNode3) {\r\n        //         add('} else {');\r\n        //         callWithParameters(toNode3);\r\n        //     }\r\n        //     add(\"}\\n\");\r\n        // } \r\n    }\r\n\r\n    // function oldRemoveTypes(name: string): string {\r\n    //     const firstSpace = name.indexOf(' ') + 1;\r\n    //     const openningRound = name.indexOf('(');\r\n    //     const closingRound = name.indexOf(')');\r\n\r\n    //     const functionName = name.substring(firstSpace, openningRound);\r\n    //     const params = name.substring(openningRound + 1, closingRound).split(',');\r\n    //     let result = functionName;\r\n    //     params.forEach(param => {\r\n    //         if (!param.includes('=')) {\r\n    //             let thisParam = String(param.split(' ').slice(-1));\r\n    //             result += thisParam;\r\n    //         }\r\n    //     });\r\n    //     console.log('removing types from \"', name, '\" params ', params, ' returning :', result);\r\n    //     return result;\r\n    // }\r\n\r\n\r\n\r\n    // #endregion\r\n\r\n\r\n    // #region Shared Variables\r\n    let code = ''\r\n    const problems: any[] = []\r\n\r\n    const links: any[] = getLinksFromModel(model)\r\n    const nodes: any[] = getNodesFromModel(model)\r\n    const logics: any[] = nodes.filter(node => node.extras?.type === 'logic')\r\n    const components: any[] = getComponentsFromNodes(nodes)\r\n    const controller = nodes.find(node => node.extras?.type === 'controller')\r\n    const constants: any[] = nodes.filter(node => node.extras?.type === 'constant').map((constant) => {\r\n        constant.extras.name = constant.extras.name.toUpperCase()\r\n        return constant\r\n    })\r\n    const variables: any[] = nodes.filter(node => node.extras?.type === 'variable')\r\n\r\n    const usedDigital: any[] = [...new Set(nodes.filter(node => node.extras?.portType === 'Digital'))]\r\n    const usedAnalog: any[] = [...new Set(nodes.filter(node => node.extras?.portType === 'Analog'))]\r\n    // #endregion\r\n\r\n\r\n\r\n    // #region Generator Lifecycle\r\n    console.log('----- Starting Code Generation -----')\r\n    addHeaderComments()\r\n    warnAboutNumberOfControllers()\r\n    warnAboutPortUsage()\r\n    warnAboutNodesWithoutLinks(nodes)\r\n    warnAboutMultipleUsePorts(nodes)\r\n    warnAboutLooseLinks(links)\r\n    addLibraries()\r\n    addFunctionDeclarations(logics.filter(l => l.name === 'Function'))\r\n    addConstantDeclarations(constants)\r\n    addVariableDeclarations(variables)\r\n    addLifecycleMethods()\r\n    // #endregion\r\n    return { code: indentCode(code), problems };\r\n}\r\nexport default function Code(props: { model: string }) {\r\n    // console.log('CodeComponent render')\r\n\r\n    const model = props.model\r\n    let code = ''\r\n    let problems: any[] = []\r\n\r\n    if (model === \"{}\" || model === \"\") {\r\n    } else {\r\n        const generated = generateCode(JSON.parse(model))\r\n        code = generated.code\r\n        let cleanProblems: any[] = []\r\n        generated.problems.forEach(dirty => {\r\n            if (cleanProblems.findIndex(p => p.message === dirty.message) === -1) {\r\n                const sameNodes = Array.from(new Set([].concat(...generated.problems.filter(p => p.message === dirty.message).map(p => p.nodes))))\r\n                cleanProblems.push({ message: dirty.message, nodes: sameNodes })\r\n            }\r\n        });\r\n        problems = cleanProblems\r\n    }\r\n\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n    }, [props])\r\n    return (\r\n        <div className=\"Code\">\r\n            <div style={{ border: problems.length !== 0 ? 'solid yellow 2px' : 'dotted black 2px' }}>\r\n                <div style={{ border: problems.length !== 0 ? 'solid yellow 1px' : 'dotted white 1px', fontSize: '1em' }}>\r\n                    {problems.length} Problems!\r\n                </div>\r\n                {\r\n                    problems.map((p: any, index: any) => {\r\n                        if (p.nodes.length > 0) {\r\n                            p.nodes.forEach((node: any) => {\r\n                                if (node?.id) {\r\n                                    const el = document.querySelector(`[data-nodeid='${node.id}']`)\r\n                                    if (el) el.setAttribute('id', node.id)\r\n                                }\r\n                            });\r\n                        }\r\n                        const problemId = p.nodes.length > 0 ? 'problem-' + p.nodes[0].id + index : 'problem-nodeless' + index\r\n\r\n                        let nodedata: any[] = []\r\n                        let linkdata: any[] = []\r\n                        p.nodes.forEach((node: any, index: number) => {\r\n                            const { nodes, links } = processDynamic(node, index)\r\n                            nodedata.push(...nodes)\r\n                            linkdata.push(...links)\r\n                        });\r\n\r\n                        return <div id={problemId} key={problemId} style={{ fontSize: '0.6em', border: 'solid white 1px' }}>\r\n\r\n                            Model violation: {p.message}\r\n                            <a data-tip data-for={'tip-' + problemId} style={{ float: 'left', marginRight: '6px' }} >\r\n                                <OpenInNewIcon style={{ fontSize: '1rem' }} />\r\n                            </a>\r\n                            <ReactTooltip\r\n                                className=\"interactableTooltip\"\r\n                                id={'tip-' + problemId}\r\n                                type='light' place=\"bottom\"\r\n                                delayHide={500}\r\n                                effect=\"solid\"\r\n                            >\r\n                                <div className='miniGoHolder'>\r\n\r\n\r\n                                    <GoClass\r\n                                        linkdata={linkdata} nodedata={nodedata} arrangement='horizontal' />\r\n                                </div>\r\n                            </ReactTooltip>\r\n\r\n\r\n                            {p.nodes.map((node: any, index: any) => {\r\n                                return <div key={index} style={{ display: \"flex\", justifyContent: \"space-evenly\", width: \"100%\" }}>\r\n                                    <Xarrow\r\n                                        strokeWidth={2}\r\n                                        start={problemId}\r\n                                        end={node.id}\r\n                                        color='yellow'\r\n                                    />\r\n                                </div>\r\n                            })}\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n            <pre style={{\r\n                height: '100%', overflow: 'auto'\r\n            }}>\r\n                <code className=\"language-clike\">{code}</code>\r\n            </pre >\r\n        </div >\r\n    );\r\n}","import * as React from 'react';\r\nimport { Application } from './Application';\r\nimport { TrayItemWidget } from './TrayItemWidget';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { MyCanvasWidget } from './MyCanvasWidget';\r\nimport styled from '@emotion/styled';\r\nimport { MyEditableNodeModel } from './editableNode/MyEditableNodeModel';\r\nimport paletteNodes from '../../paletteNodes';\r\nimport { useState, useEffect } from 'react';\r\nimport Code from '../Code';\r\nvar ScrollArea = require('react-scrollbar').default;\r\nexport interface BodyWidgetProps {\r\n\tapp: Application;\r\n}\r\n\r\nnamespace S {\r\n\texport const Body = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-height: 100%;\r\n\t\twidth: 100%;\r\n\t\tgrid-template-columns: 55% 1fr;\r\n\t`;\r\n\r\n\texport const Content = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tflex-grow: 1;\r\n\t\t\r\n\t`;\r\n\r\n\texport const Layer = styled.div`\r\n\t\tposition: relative;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n\texport const Code = styled.div`\r\n\t\tposition: absolute;\r\n\t\tbackground-color: #2d2d2d ;\r\n\t\tleft:50%;\r\n\t\ttop:0;\r\n\t\tright:0;\r\n\t\tbottom:0;\r\n\t\tmargin:0;\r\n\t\tpadding:0;\r\n\t\t`;\r\n\r\n}\r\n\r\nfunction BodyWidget(props: BodyWidgetProps) {\r\n\tconst [model, setModel] = useState(\"{}\")\r\n\tconst [rerender, setRerender] = React.useState(false);\r\n\r\n\tconst rawModel = props.app.getDiagramEngine().getModel().serialize()\r\n\tconst stringModel = JSON.stringify(rawModel, null, 2)\r\n\r\n\tconst groups = [...new Set(paletteNodes.map(x => x.extras.group || x.extras.type))]\r\n\tuseEffect(() => {\r\n\t\tif (stringModel !== model) {\r\n\t\t\tsetModel(stringModel);\r\n\t\t}\r\n\t}, [stringModel, model]);\r\n\r\n\treturn (\r\n\t\t<S.Body>\r\n\t\t\t<S.Content >\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ScrollArea\r\n\t\t\t\t\t\tspeed={1}\r\n\t\t\t\t\t\tclassName=\"area\"\r\n\t\t\t\t\t\tcontentClassName=\"content\"\r\n\t\t\t\t\t\thorizontal={false}\r\n\t\t\t\t\t\tstyle={{ height: '95vh' }}\r\n\t\t\t\t\t\tsmoothScrolling={true}\r\n\t\t\t\t\t\tverticalScrollbarStyle={{ backgroundColor: 'white' }}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tgroups.map((group) => {\r\n\t\t\t\t\t\t\t\treturn <div key={group} style={{ border: 'dashed white 1px', marginBottom: '20px' }}>\r\n\t\t\t\t\t\t\t\t\t<h6 style={{ margin: '0px 0px 0px 0px' }}>{group[0].toUpperCase() + group.slice(1) + 's'}:</h6>\r\n\t\t\t\t\t\t\t\t\t{paletteNodes.filter(n => (n.extras.group === group || n.extras.type === group)).map((node) => {\r\n\t\t\t\t\t\t\t\t\t\treturn <TrayItemWidget key={node.name} node={node} />\r\n\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ScrollArea>\r\n\t\t\t\t</div>\r\n\t\t\t\t<S.Layer\r\n\t\t\t\t\tonDrop={(event) => {\r\n\t\t\t\t\t\tlet data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\r\n\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\tlet node: any = {};\r\n\r\n\t\t\t\t\t\t\tprops.app.getDiagramEngine().getModel().registerListener({\r\n\t\t\t\t\t\t\t\tlinksUpdated: (l: any) => {\r\n\t\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t\t\t// console.log(\"link\\n\");\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tnodesUpdated: (n: any) => {\r\n\t\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t\t\t// console.log(\"node\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data);\r\n\r\n\t\t\t\t\t\t\tnode.setPosition(props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\tprops.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonDragOver={(event: any) => {\r\n\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tonClick={(event: any) => {\r\n\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t<MyCanvasWidget >\r\n\t\t\t\t\t\t\t<CanvasWidget engine={props.app.getDiagramEngine()} />\r\n\t\t\t\t\t\t</MyCanvasWidget>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</S.Layer>\r\n\t\t\t</S.Content>\r\n\t\t\t<S.Code>\r\n\t\t\t\t<Code model={model} />\r\n\t\t\t</S.Code>\r\n\t\t</S.Body >\r\n\t)\r\n\r\n}\r\nexport default React.memo(BodyWidget)","import * as React from 'react';\r\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams-core';\r\nimport styled from '@emotion/styled';\r\nimport { MyPortModel } from '../myNode/MyPortModel';\r\n\r\nexport interface MyPortLabelProps {\r\n    port: MyPortModel;\r\n    engine: DiagramEngine;\r\n}\r\n\r\nnamespace S {\r\n    export const PortLabel = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tmargin-top: 1px;\r\n\t\talign-items: center;\r\n\t`;\r\n\r\n    export const LabelR = styled.div`\r\n\t\tpadding: 0 4px 0 0;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n    export const LabelL = styled.div`\r\n\t\tpadding: 0 0 0px 0;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n    export const Port = styled.div((props: any) => ({\r\n        border: 'solid 1px white',\r\n        width: '14px',\r\n        height: '14px',\r\n        background: (props.hasLink ? 'rgba(255, 192, 0, 0.7)' : 'rgba(255, 255, 255, 0.3)'),\r\n        '&:hover': {\r\n            background: 'rgb(192, 255, 0)',\r\n        }\r\n    }))\r\n\r\n\r\n    export const FakePort = styled.div`\r\n        width: 16px;\r\n\t\theight: 16px;\r\n\t`;\r\n}\r\n\r\nexport class MyPortLabel extends React.Component<MyPortLabelProps> {\r\n    render() {\r\n        console.log('rendering port', this.props?.port.getOptions().id, this.props?.port.getName(), this.props?.port.getOptions().label)\r\n\r\n\r\n        const hasLink = Object.keys(this.props?.port?.links).length !== 0\r\n        const hasHiddenLabel = this.props?.port?.getOptions().extras.hasHiddenLabel\r\n        let isVoid = false\r\n        if (this.props?.port?.getOptions().name?.startsWith('void')) {\r\n            if (this.props?.port?.getOptions().alignment === \"right\") {\r\n                isVoid = true\r\n            }\r\n        }\r\n        const port = isVoid ? (<S.FakePort />) : (\r\n            <PortWidget engine={this.props.engine\r\n            } port={this.props.port} >\r\n                <S.Port hasLink={hasLink} />\r\n            </PortWidget>\r\n        );\r\n\r\n        const labelR = <S.LabelR>{this.props.port.getOptions().label}</S.LabelR>;\r\n        const labelL = <S.LabelL>{this.props.port.getOptions().label}</S.LabelL>;\r\n\r\n        return (\r\n            <S.PortLabel>\r\n                {this.props.port.getOptions().in ? port : !hasHiddenLabel && labelR}\r\n                {this.props.port.getOptions().in ? !hasHiddenLabel && labelL : port}\r\n            </S.PortLabel>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport AutosizeInput from 'react-input-autosize';\r\n\r\nexport interface IEditableSingleFieldProps {\r\n  node: any;\r\n  beingEdited: boolean;\r\n  content: string;\r\n  onFocus: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\nconst Editor = ({\r\n  content,\r\n  onFocus,\r\n  onChange,\r\n  onBlurOrEnter,\r\n}: {\r\n  content: string;\r\n  onFocus: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n}) => {\r\n  return (\r\n    <AutosizeInput\r\n      autoFocus\r\n      inputStyle={{\r\n        padding: 1,\r\n        borderStyle: \"dotted\",\r\n        borderWidth: 1,\r\n        borderColor: \"black\"\r\n      }}\r\n      type=\"text\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onFocus={onFocus}\r\n      onBlur={onBlurOrEnter}\r\n      onKeyDown={(event: any) => {\r\n        if (event.keyCode === 13) onBlurOrEnter();\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default class EditableSingleField extends React.Component<\r\n  IEditableSingleFieldProps\r\n> {\r\n  constructor(props: IEditableSingleFieldProps) {\r\n    super(props);\r\n    this.state = {};\r\n    // console.log('node', this.props.node)\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onFocus={() => this.props.node.setLocked(true)}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={() => {\r\n              this.props.node.setLocked(false)\r\n              this.props.onBlurOrEnter()\r\n            }}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport interface ISelectableFieldProps {\r\n  beingEdited: boolean;\r\n  options: Array<string>\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\n\r\nexport interface ISelectableFieldState { }\r\n\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n  options\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  options: Array<string>;\r\n}) => {\r\n  return (\r\n    <select name=\"values\" id=\"values\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n    >\r\n      {\r\n        options.map((x, y) =>\r\n          <option key={y}>{x}</option>)\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default class SelectableField extends React.Component<\r\n  ISelectableFieldProps,\r\n  ISelectableFieldState\r\n> {\r\n  constructor(props: ISelectableFieldProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n            options={this.props.options}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\n//@ts-nocheck\r\nimport * as React from \"react\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport \"./MyEditableNodeWidgedStyle.css\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\r\nimport { MyPortLabel } from \"../custom-port/MyPortLabelWidget\"\r\nimport styled from '@emotion/styled';\r\n\r\nimport EditableSingleField from \"../custom-node/custom_components/EditableSingleField\";\r\nimport SelectableField from \"../custom-node/custom_components/SelectableField\";\r\n\r\nimport ReactTooltip from 'react-tooltip';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\n\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst returnTypes = ['byte', 'uint8_t', 'uint16_t', 'unsigned int', 'unsigned long', 'int', 'long', 'bool', 'float', 'double', 'char', 'string']\r\nconst portTypes = ['Digital', 'Analog']\r\n\r\nnamespace S {\r\n  export const Node = styled.div<{ background: string; selected: boolean }>`\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tborder-radius: 5px;\r\n\t\tfont-family: sans-serif;\r\n\t\tcolor: white;\r\n\t\tborder: solid 2px black;\r\n\t\toverflow: visible;\r\n\t\tfont-size: 11px;\r\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\r\n\t`;\r\n\r\n  export const Title = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.3);\r\n\t\tdisplay: flex;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n  export const TitleName = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 5px 5px;\r\n\t`;\r\n\r\n  export const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\r\n\t`;\r\n\r\n  export const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 4px;\r\n\t\t}\r\n\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport interface MyEditableWidgetProps {\r\n  nodeModel: MyEditableNodeModel;\r\n  engine: DiagramEngine\r\n}\r\n\r\nexport interface MyEditableWidgetState {\r\n  content: string;\r\n  height: number;\r\n  width: number;\r\n  editingSomething: boolean;\r\n  editingKey: string;\r\n}\r\nexport class MyEditableNodeWidget extends React.Component<\r\n  MyEditableWidgetProps,\r\n  MyEditableWidgetState\r\n> {\r\n  private divElement: HTMLDivElement;\r\n\r\n  constructor(props: MyEditableWidgetProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: { name: '', value: '' },\r\n      variableType: '',\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    };\r\n\r\n    //binding the methods to this element\r\n    this._editableObjectDoubleClick = this._editableObjectDoubleClick.bind(this);\r\n    this._contentOnChange = this._contentOnChange.bind(this);\r\n    this._onBlurOrEnter = this._onBlurOrEnter.bind(this);\r\n  }\r\n  generatePort = (port) => {\r\n    return <MyPortLabel engine={this.props.engine} port={port} key={port.getID()} />\r\n  };\r\n\r\n  /**\r\n   * Pass this on onDoubleClick.\r\n   * You change the states to make the fields know it's in edit mode, and tell who is in the edit mode\r\n   */\r\n  _editableObjectDoubleClick = (content: string) => {\r\n    if (this.state.editingSomething) return;\r\n    this.setState({\r\n      editingSomething: true,\r\n      editingKey: content\r\n    });\r\n  };\r\n\r\n  /**\r\n   * What you'll do when the content is changed\r\n   * Usually, you update the model and the state\r\n   */\r\n  _contentOnChange = (evt: React.FormEvent<HTMLInputElement>) => {\r\n\r\n    this.props.nodeModel.extras[this.state.editingKey] = evt.currentTarget.value;\r\n    this.setState({ content: evt.currentTarget.value });\r\n  };\r\n\r\n  /**\r\n   * What you will do when the InputField lost focus or you press enter\r\n   * Usually, you change the states to make the fields know it's not in edit mode\r\n   */\r\n  _onBlurOrEnter = () => {\r\n    this.setState({\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    });\r\n  };\r\n\r\n  /**\r\n   * copy atributes from nodeModel\r\n   */\r\n  UNSAFE_componentWillMount() {\r\n    this.setState({\r\n      extras: this.props.nodeModel.extras\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <S.Node\r\n        data-default-node-name={this.props.nodeModel.getOptions().name}\r\n        selected={this.props.nodeModel.isSelected()}\r\n        background={this.props.nodeModel.getOptions().color}>\r\n        <S.Title>\r\n          {this.props.nodeModel.extras.hasReturnType && <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"returnType\");\r\n                  }}\r\n                >\r\n                  <SelectableField\r\n                    elementKey=\"returnType\"\r\n                    options={returnTypes}\r\n                    editingKey={this.state.editingKey}\r\n                    beingEdited={this.state.editingSomething}\r\n                    content={this.props.nodeModel.extras.returnType}\r\n                    onChange={this._contentOnChange}\r\n                    onBlurOrEnter={this._onBlurOrEnter}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n          {this.props.nodeModel.extras.hasPortType && <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"portType\");\r\n                  }}\r\n                >\r\n                  <SelectableField\r\n                    elementKey=\"portType\"\r\n                    options={portTypes}\r\n                    editingKey={this.state.editingKey}\r\n                    beingEdited={this.state.editingSomething}\r\n                    content={this.props.nodeModel.extras.portType}\r\n                    onChange={this._contentOnChange}\r\n                    onBlurOrEnter={this._onBlurOrEnter}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n          {this.props.nodeModel.extras.hasUsername && <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"name\");\r\n                  }}\r\n                >\r\n                  <EditableSingleField\r\n                    node={this.props.nodeModel}\r\n                    elementKey=\"name\"\r\n                    editingKey={this.state.editingKey}\r\n                    beingEdited={this.state.editingSomething}\r\n                    content={this.props.nodeModel.extras.name}\r\n                    onChange={this._contentOnChange}\r\n                    onBlurOrEnter={this._onBlurOrEnter}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n\r\n          <S.TitleName>\r\n            {this.props.nodeModel.getOptions().name}:\r\n            {this.props.nodeModel.extras.hasUsages &&\r\n              (<a data-tip data-for={'tip-' + this.props.nodeModel.getOptions().id} >\r\n                <OpenInNewIcon style={{ fontSize: '1rem', marginBottom: '-5px' }} />\r\n              </a>)}\r\n            <ReactTooltip\r\n              className=\"interactableTooltip\"\r\n              id={'tip-' + this.props.nodeModel.getOptions().id}\r\n              type='light'\r\n              place=\"top\"\r\n              delayHide={500}\r\n              effect=\"solid\"\r\n            >\r\n\r\n\r\n              {this.props.nodeModel.extras?.type === 'variable' &&\r\n                <div>Setters:\r\n\r\n                  <Button onClick={() => {\r\n                    this.props.nodeModel.addBiPort('void setValue(<T> value)', true)\r\n                    this.props.engine.repaintCanvas();\r\n                  }}> + </Button>\r\n\r\n                  <Button onClick={() => {\r\n                    const nameIn = 'void'\r\n\r\n                    let isFound = false\r\n                    let index = this.props.nodeModel.portsIn.length - 1;\r\n                    for (; index >= 1; index--) {\r\n                      const portIn = this.props.nodeModel.portsIn[index]\r\n                      const portOut = this.props.nodeModel.portsOut[index]\r\n                      if (!isFound) {\r\n                        if (Object.keys(portIn.links).length !== 0 ||\r\n                          Object.keys(portOut.links).length !== 0) {\r\n                          return\r\n                        }\r\n                        // console.log('innn', portIn)\r\n                        if (portIn.options.label.startsWith(nameIn)) {\r\n                          this.props.nodeModel.removePort(portIn)\r\n                          this.props.nodeModel.removePort(portOut)\r\n                          isFound = true\r\n                        }\r\n                      }\r\n                    }\r\n                    this.props.engine.repaintCanvas();\r\n                  }}> - </Button>\r\n                </div>\r\n              }\r\n              Usages:\r\n              <Button onClick={() => {\r\n                const nameIn = this.props.nodeModel.portsIn[0].getOptions().label\r\n                const nameOut = this.props.nodeModel.portsOut[0].getOptions().label\r\n\r\n                const next = this.props.nodeModel.portsIn.filter(port => port.getOptions().label?.startsWith(nameIn)).length\r\n\r\n                this.props.nodeModel.addInPort(nameIn + '-' + next, true)\r\n                this.props.nodeModel.addOutPort(nameOut + '-' + next, true)\r\n                this.props.engine.repaintCanvas();\r\n              }}> + </Button>\r\n\r\n              <Button onClick={() => {\r\n                const nameIn = this.props.nodeModel.portsIn[0].getOptions().label\r\n\r\n                let isFound = false\r\n                let index = this.props.nodeModel.portsIn.length - 1;\r\n                for (; index >= 1; index--) {\r\n                  const portIn = this.props.nodeModel.portsIn[index]\r\n                  const portOut = this.props.nodeModel.portsOut[index]\r\n                  if (!isFound) {\r\n                    if (Object.keys(portIn.links).length !== 0 ||\r\n                      Object.keys(portOut.links).length !== 0) {\r\n                      return\r\n                    }\r\n                    // console.log('innn', portIn)\r\n                    if (portIn.options.label.startsWith(nameIn)) {\r\n                      this.props.nodeModel.removePort(portIn)\r\n                      this.props.nodeModel.removePort(portOut)\r\n                      isFound = true\r\n                    }\r\n                  }\r\n                }\r\n                this.props.engine.repaintCanvas();\r\n              }}> - </Button>\r\n            </ReactTooltip>\r\n\r\n          </S.TitleName>\r\n          {this.props.nodeModel.extras.hasValue && <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"value\");\r\n                  }}\r\n                >\r\n                  {this.props.nodeModel.selectableOptions || this.props.nodeModel.extras.returnType === 'bool' ?\r\n                    <SelectableField\r\n                      elementKey=\"value\"\r\n                      options={this.props.nodeModel.extras.returnType === 'bool' ? ['true', 'false'] : this.props.nodeModel.selectableOptions}\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.extras.value}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                    :\r\n                    <EditableSingleField\r\n                      node={this.props.nodeModel}\r\n                      elementKey=\"value\"\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.extras.value}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n        </S.Title>\r\n        <S.Ports>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getInPorts(), this.generatePort)}</S.PortsContainer>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getOutPorts(), this.generatePort)}</S.PortsContainer>\r\n        </S.Ports>\r\n      </S.Node>\r\n    );\r\n  }\r\n}\r\n","import { MyEditableNodeWidget } from \"./MyEditableNodeWidget\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport { AbstractReactFactory, GenerateModelEvent } from '@projectstorm/react-canvas-core'\r\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\r\n\r\nexport class MyEditableNodeFactory extends AbstractReactFactory<MyEditableNodeModel, DiagramEngine> {\r\n\tgenerateModel(event: GenerateModelEvent): MyEditableNodeModel {\r\n\t\tthrow new Error(\"Method not implemented.\");\r\n\t}\r\n\t// generateModel(event: import(\"@projectstorm/react-canvas-core\").GenerateModelEvent): MyEditableNodeModel {\r\n\t// \treturn new MyEditableNodeModel({});\r\n\t// }\r\n\tconstructor() {\r\n\t\tsuper(\"MyEditable\");\r\n\t}\r\n\r\n\tgenerateReactWidget(event: { model: MyEditableNodeModel }): JSX.Element {\r\n\t\treturn <MyEditableNodeWidget nodeModel={event.model} engine={this.engine} />;\r\n\t}\r\n}\r\n","import * as SRD from '@projectstorm/react-diagrams';\r\nimport { MyEditableNodeFactory } from './editableNode/MyEditableNodeFactory';\r\n\r\nimport {\r\n\tRightAngleLinkFactory,\r\n} from '@projectstorm/react-diagrams';\r\n\r\nexport class Application {\r\n\tprotected activeModel: any;//SRD.DiagramModel\r\n\tprotected diagramEngine: SRD.DiagramEngine;\r\n\r\n\tconstructor() {\r\n\t\tthis.diagramEngine = SRD.default();\r\n\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new MyEditableNodeFactory());\r\n\t\tthis.diagramEngine.getLinkFactories().registerFactory(new RightAngleLinkFactory());\r\n\r\n\t\tthis.newModel();\r\n\t}\r\n\r\n\tpublic newModel() {\r\n\t\tthis.activeModel = new SRD.DiagramModel();\r\n\t\tthis.diagramEngine.setModel(this.activeModel);\r\n\t}\r\n\r\n\tpublic getActiveDiagram(): SRD.DiagramModel {\r\n\t\treturn this.activeModel;\r\n\t}\r\n\r\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\r\n\t\treturn this.diagramEngine;\r\n\t}\r\n}\r\n","import BodyWidget from '../components/react-diagrams/BodyWidget';\r\nimport { Application } from '../components/react-diagrams/Application';\r\n\r\nexport default function EditorPage() {\r\n  var app = new Application();\r\n  return <BodyWidget app={app} />\r\n}","export default __webpack_public_path__ + \"static/media/flow.43bedc99.svg\";","export default __webpack_public_path__ + \"static/media/cym_s.cbee123b.svg\";","import flowDiagram from '../assets/flow.svg'\r\nimport cym_s from '../assets/cym_s.svg'\r\nexport default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4CPS!\r\n        </h2>\r\n        <img src={flowDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n        <img src={cym_s} alt=\"CYM-S\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","import GoClass from \"../components/GoClass\";\r\nimport paletteNodes from \"../paletteNodes\";\r\nimport { processDynamic, transformAllIntoMethods } from \"../components/goBuilder\"\r\n\r\n\r\nexport default function ModelsPage() {\r\n    let nodesStatic: any[] = [\r\n        { key: -1, name: 'MicroController' },\r\n        { key: -2, name: 'Arduino' },\r\n        { key: -3, name: 'Component' },\r\n    ]\r\n    let linksStatic: any[] = [\r\n        { key: -2, from: -2, to: -1, relationship: \"generalization\" },\r\n        { key: -3, from: -3, to: -1, relationship: \"aggregation\" },\r\n        { key: -4, from: -3, to: -3, relationship: \"aggregation\" },\r\n    ]\r\n    let nodesDynamic: any[] = []\r\n    let linksDynamic: any[] = []\r\n\r\n    paletteNodes.forEach((node, index) => {\r\n\r\n        nodesStatic.push({\r\n            key: index,\r\n            name: node.name,\r\n            methods: transformAllIntoMethods(node),\r\n        })\r\n\r\n\r\n        if (node.extras.type === 'controller') {\r\n            linksStatic.push({ key: index, from: index, to: -2, relationship: \"generalization\" })\r\n        } else {\r\n            const { nodes, links } = processDynamic(node, index)\r\n            nodesDynamic.push(...nodes)\r\n            linksDynamic.push(...links)\r\n        }\r\n\r\n    });\r\n\r\n    return <>\r\n        <GoClass linkdata={linksStatic} nodedata={nodesStatic} arrangement='horizontal' />\r\n        <GoClass linkdata={linksDynamic} nodedata={nodesDynamic} arrangement='vertical' />\r\n    </>\r\n}","export default __webpack_public_path__ + \"static/media/transformations.40b625af.png\";","import transformations from '../assets/transformations.png'\r\nexport default function TransformationsPage() {\r\n    return <div>\r\n        <img src={transformations} alt=\"Transformations\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","\r\nexport default function PalettePage() {\r\n    return <>\r\n        <h3>Planned Settings</h3>\r\n        <ul>\r\n            <li>Show/Hide copy button on code panel</li>\r\n            <li>Show/Hide all comments</li>\r\n            <li>Show/Hide all warnings</li>\r\n            <li>Show/Hide all arrows</li>\r\n            <li>Show/Hide diagram overlay</li>\r\n            <li>Show/Hide palette expansion panels</li>\r\n            <li></li>\r\n            <li>Enable/Disables constant capitalization</li>\r\n            <li></li>\r\n            <li>Enable code editing (breaks diagram to code relation)</li>\r\n            <li></li>\r\n            <li>Enforce typings</li>\r\n            <li>Enforce lose ends</li>\r\n            <li>Enforce sequencial port usage</li>\r\n            <li>Remove link restrictions</li>\r\n            <li></li>\r\n            <li>Reset all settings on this page</li>\r\n            <li>Reset custom palette</li>\r\n            <li>Erase all localStorage data</li>\r\n            <li></li>\r\n            <li>Contact info</li>\r\n        </ul>\r\n\r\n    </>\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport TransformationsPage from './pages/Transformations';\r\nimport SettingsPage from './pages/Settings';\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Routes >\r\n          <Route path='/mdd4/' element={<HomePage />} />\r\n          <Route path='/mdd4/models' element={<ModelsPage />} />\r\n          <Route path='/mdd4/transformations' element={<TransformationsPage />} />\r\n          <Route path='/mdd4/editor' element={<EditorPage />} />\r\n          <Route path='/mdd4/settings' element={<SettingsPage />} />\r\n        </Routes>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}