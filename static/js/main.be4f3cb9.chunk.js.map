{"version":3,"sources":["components/NavigationBar.tsx","components/NodeDiagram.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/myNode/MyLinkModel.ts","components/react-diagrams/myNode/MyPortModel.ts","components/react-diagrams/myNode/MyNodeModel.ts","components/react-diagrams/helpers/DemoCanvasWidget.tsx","components/react-diagrams/editableNode/MyEditableNodeModel.ts","paletteNodes.js","components/PrismEdit.tsx","components/Code.tsx","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/custom-label/EditableLabelModel.ts","components/react-diagrams/custom-label/EditableLabelWidget.tsx","components/react-diagrams/custom-label/EditableLabelFactory.tsx","components/react-diagrams/custom-node/custom_components/EditableSingleField.tsx","components/react-diagrams/custom-node/custom_components/SelectableField.tsx","components/react-diagrams/editableNode/MyEditableNodeWidget.tsx","components/react-diagrams/editableNode/MyEditableNodeFactory.tsx","components/react-diagrams/Application.ts","pages/Editor.tsx","assets/flow.svg","assets/cym_s.svg","pages/Home.tsx","assets/cym_s_extended.svg","assets/cym_d.svg","pages/Models.tsx","assets/transformations.png","pages/Transformations.tsx","pages/Palette.tsx","pages/Settings.tsx","App.tsx","index.tsx"],"names":["SimpleBottomNavigation","pathname","window","location","useState","value","setValue","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","component","Link","label","to","icon","NodeDiagram","props","maxWidth","border","fontSize","margin","backgroundColor","width","borderBottom","node","name","extras","library","ins","length","map","port","outs","S","styled","div","p","TrayItemWidget","Tray","this","draggable","onDragStart","dataTransfer","setData","JSON","stringify","setDragImage","Image","className","id","type","place","React","MyLinkModel","options","selectedColor","curvyness","getOptions","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","sourcePort","getSourceControl","translate","calculateControlOffset","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","data","fireEvent","LinkModel","MyPortModel","in","PortModel","MyNodeModel","portsIn","portsOut","lookupTable","splice","indexOf","push","after","addPort","_","portsInOrder","getPortFromID","portsOutOrder","getID","NodeModel","background","css","DemoCanvasWidget","styles","Expand","Container","children","MyEditableNodeModel","shouldHaveUserName","content","selectableOptions","forEach","method","addInPort","addOutPort","userName","selector","substring","Array","from","keys","x","toString","analogPorts","digitalPorts","Edit","editorRef","useRef","code","setCode","onEditableChange","useCallback","slice","useEditable","disabled","indentation","defaultProps","language","tokens","getTokenProps","getLineProps","ref","line","i","Fragment","filter","token","empty","key","generateCode","model","Object","links","entries","layers","models","nodes","logics","components","controllers","libraries","constants","usedDigital","usedAnalog","n","instance","toLowerCase","replace","c","includes","toUpperCase","controller","add","message","m","addOnTop","getLink","linkID","find","l","getPort","nodeID","portID","ports","error","getNode","getCoditionalValue","conditionNode","portName","link","source","parent","getParent","getOutcome","ifThis","target","childNode","parentNode","removeTypes","functionName","params","split","result","param","thisParam","String","callWithParameters","contents","console","log","toPort","toNode","shift","processLink","fromPort","fromNode","xValue","yValue","outcome2","toNode2","outcome3","toNode3","processCall","lib","comp","logic","constant","original","level","repeat","join","indentCode","Code","parse","useEffect","Prism","highlightAll","PrismEdit","ScrollArea","require","default","BodyWidget","setModel","rerender","setRerender","rawModel","app","getDiagramEngine","getModel","serialize","stringModel","groups","Set","paletteNodes","Body","Content","speed","contentClassName","horizontal","height","smoothScrolling","verticalScrollbarStyle","group","marginBottom","Button","variant","size","onClick","localStorage","setItem","getActiveDiagram","deserializeModel","getItem","setTimeout","Layer","onDrop","getData","setPosition","getRelativeMousePoint","addNode","onDragOver","preventDefault","engine","EditableLabelModel","LabelModel","EditableLabelWidget","str","setStr","Label","newVal","action","EditableLabelFactory","AbstractReactFactory","Editor","onBlurOrEnter","autoFocus","inputStyle","padding","borderStyle","borderWidth","borderColor","onBlur","onKeyDown","keyCode","EditableSingleField","state","beingEdited","editingKey","elementKey","fontStyle","isAbstract","y","SelectableField","selected","MyEditableNodeWidget","divElement","generatePort","_editableObjectDoubleClick","editingSomething","setState","_contentOnChange","evt","nodeModel","currentTarget","_onBlurOrEnter","variableType","bind","Node","isSelected","Title","onDoubleClick","TitleName","Ports","PortsContainer","getInPorts","getOutPorts","MyEditableNodeFactory","Application","activeModel","diagramEngine","SRD","getLabelFactories","registerFactory","getNodeFactories","newModel","EditorPage","HomePage","src","flowDiagram","alt","maxHeight","cym_s","ModelsPage","modelsDiagram","stateDiagram","TransformationsPage","transformations","PalettePage","display","gridTemplateColumns","gridGap","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be4f3cb9.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { AppBar } from '@material-ui/core';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\n// import SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport TransformIcon from '@mui/icons-material/Transform';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const pathname = window.location.pathname; // in case user visits the path directly. The BottomNavBar is able to follow suit.\r\n    const [value, setValue] = useState(pathname);\r\n    const handleChange = (event: any, newValue: any) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={handleChange}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction component={Link} label=\"Home\" to=\"/mdd4/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Models\" to=\"/mdd4/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Transformations\" to=\"/mdd4/transformations\" icon={<TransformIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Palette\" to=\"/mdd4/palette\" icon={<PaletteIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Editor\" to=\"/mdd4/editor\" icon={<EditIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Settings\" to=\"/mdd4/settings\" icon={<SettingsIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","\r\nexport default function NodeDiagram(props: { node: any }) {\r\n    return <>\r\n        <div style={{ maxWidth: '400px', border: 'solid', fontSize: '.9em', color: 'black', margin: '60px 0px 25px 0', backgroundColor: 'lightgrey' }}>\r\n            <div style={{ width: '100%', borderBottom: 'solid 3px', fontSize: '1.2em' }}>\r\n                {props.node.name}\r\n            </div>\r\n\r\n            {props.node.extras.library &&\r\n                <div style={{ width: '100%', borderBottom: 'solid 2px' }}>\r\n                    Library={props.node.extras.library}\r\n                </div>\r\n            }\r\n            {props.node.ins && props.node.ins.length > 0 &&\r\n                props.node.ins.map((port: any) => {\r\n                    return <div key={port}>\r\n                        <p>{port}</p>\r\n                    </div>\r\n                })\r\n            }\r\n            {props.node.outs && props.node.outs.length > 0 &&\r\n                props.node.outs.map((port: any) => {\r\n                    return <div key={port}>\r\n                        <p>{port}</p>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    </>\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport * as React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport NodeDiagram from '../../components/NodeDiagram'\r\nexport interface TrayItemWidgetProps {\r\n\tnode: any;\r\n}\r\n\r\nnamespace S {\r\n\texport const Tray = styled.div<{ color: string }>`\r\n\t\tcolor: white;\r\n\t\tfont-family: Helvetica, Arial;\r\n\t\tfont-size:0.6em;\r\n\t\tpadding: 2px 0px;\r\n\t\tmargin:\t 5px 10px ;\r\n\t\tborder: solid 1px ${(p) => p.color};\r\n\t\tborder-radius: 100px;\r\n\t\tmargin-bottom: 2px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: rgb(20, 20, 20);\r\n\t`;\r\n}\r\n\r\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\r\n\trender() {\r\n\t\t// const label = this.props.node.name.includes(\" \") && this.props.node.name.length > 15 ? (<div>\r\n\t\t// \t{this.props.node.name.substr(0, this.props.node.name.indexOf(' '))}\r\n\t\t// \t<br />\r\n\t\t// \t{this.props.node.name.substr(this.props.node.name.indexOf(' ') + 1)}</div>) : this.props.node.name\r\n\t\treturn (\r\n\t\t\t<S.Tray\r\n\t\t\t\tcolor={this.props.node.color || 'red'}\r\n\t\t\t\tdraggable={true}\r\n\t\t\t\tonDragStart={(event) => {\r\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.node));\r\n\t\t\t\t\tevent.dataTransfer.setDragImage(new Image(), 10, 10);\r\n\t\t\t\t}}\r\n\t\t\t\tclassName=\"tray-item\">\r\n\r\n\t\t\t\t{this.props.node.name}\r\n\r\n\t\t\t\t<a data-tip data-for={'tip-' + this.props.node.name} >\r\n\t\t\t\t\t<OpenInNewIcon style={{ fontSize: '1rem' }} />\r\n\t\t\t\t</a>\r\n\t\t\t\t<ReactTooltip id={'tip-' + this.props.node.name} type='light' place=\"bottom\">\r\n\t\t\t\t\t<NodeDiagram node={this.props.node} />\r\n\t\t\t\t</ReactTooltip>\r\n\t\t\t</S.Tray>\r\n\t\t);\r\n\t}\r\n}\r\n","// LabelModel,\r\nimport {\r\n\tLinkModel,\r\n\tLinkModelGenerics,\r\n\tLinkModelListener,\r\n\tPortModel,\r\n\tPortModelAlignment\r\n} from '@projectstorm/react-diagrams-core';\r\n// import { DefaultLabelModel } from './DefaultLabelModel';\r\nimport { BezierCurve } from '@projectstorm/geometry';\r\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nexport interface DefaultLinkModelListener extends LinkModelListener {\r\n\t// colorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\r\n\r\n\t// widthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\r\n\twidth?: number;\r\n\tcolor?: string;\r\n\tselectedColor?: string;\r\n\tcurvyness?: number;\r\n\ttype?: string;\r\n\ttestName?: string;\r\n}\r\n\r\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\r\n\tLISTENER: DefaultLinkModelListener;\r\n\tOPTIONS: DefaultLinkModelOptions;\r\n}\r\n\r\nexport class MyLinkModel extends LinkModel<DefaultLinkModelGenerics> {\r\n\tconstructor(options: DefaultLinkModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\ttype: 'default',\r\n\t\t\twidth: options.width || 3,\r\n\t\t\tcolor: options.color || 'gray',\r\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\r\n\t\t\tcurvyness: 50,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tcalculateControlOffset(port: PortModel): [number, number] {\r\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\r\n\t\t\treturn [this.options.curvyness || 0, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\r\n\t\t\treturn [-(this.options.curvyness || 0), 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\r\n\t\t\treturn [0, -(this.options.curvyness || 0)];\r\n\t\t}\r\n\t\treturn [0, this.options.curvyness || 0];\r\n\t}\r\n\r\n\tgetSVGPath(): string | undefined {\r\n\t\tif (this.points.length === 2) {\r\n\t\t\tconst curve = new BezierCurve();\r\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\r\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\r\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\r\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\r\n\r\n\t\t\tif (this.sourcePort) {\r\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\r\n\t\t\t}\r\n\r\n\t\t\tif (this.targetPort) {\r\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\r\n\t\t\t}\r\n\t\t\treturn curve.getSVGCurve();\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\twidth: this.options.width,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tcurvyness: this.options.curvyness,\r\n\t\t\tselectedColor: this.options.selectedColor\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.options.width = event.data.width;\r\n\t\tthis.options.curvyness = event.data.curvyness;\r\n\t\tthis.options.selectedColor = event.data.selectedColor;\r\n\t}\r\n\tsetWidth(width: number) {\r\n\t\tthis.options.width = width;\r\n\t\tthis.fireEvent({ width }, 'widthChanged');\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.options.color = color;\r\n\t\tthis.fireEvent({ color }, 'colorChanged');\r\n\t}\r\n}\r\n","import {\r\n\tLinkModel,\r\n\tPortModel,\r\n\tPortModelAlignment,\r\n\tPortModelGenerics,\r\n\tPortModelOptions\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { MyLinkModel } from './MyLinkModel';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultPortModelOptions extends PortModelOptions {\r\n\tlabel?: string;\r\n\tin?: boolean;\r\n}\r\n\r\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\r\n\tOPTIONS: DefaultPortModelOptions;\r\n}\r\n\r\nexport class MyPortModel extends PortModel<DefaultPortModelGenerics> {\r\n\tconstructor(isIn: boolean, name?: string, label?: string);\r\n\tconstructor(options: DefaultPortModelOptions);\r\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\r\n\t\tif (!!name) {\r\n\t\t\toptions = {\r\n\t\t\t\tin: !!options,\r\n\t\t\t\tname: name,\r\n\t\t\t\tlabel: label\r\n\t\t\t};\r\n\t\t}\r\n\t\toptions = options as DefaultPortModelOptions;\r\n\t\tsuper({\r\n\t\t\tlabel: options.label || options.name,\r\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\r\n\t\t\ttype: 'default',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.in = event.data.in;\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tin: this.options.in,\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\t// if (port instanceof DefaultPortModel) {\r\n\t\t// \treturn this.options.in !== port.getOptions().in;\r\n\t\t// }\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(): LinkModel {\r\n\t\tconst link = new MyLinkModel();\r\n\t\t// let label = new DefaultLabelModel();\r\n\t\t// label.setLabel(\"I'm a sad label\");\r\n\t\t// link.addLabel(label)\r\n\t\treturn link\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from './MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    protected portsIn: MyPortModel[];\r\n    protected portsOut: MyPortModel[];\r\n    extras: any;\r\n\r\n    constructor(name: string, color: string);\r\n    constructor(options?: DefaultNodeModelOptions);\r\n    constructor(options: any = {}, color?: string) {\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                name: options,\r\n                color: color\r\n            };\r\n        }\r\n        super({\r\n            type: 'default',\r\n            name: 'Untitled',\r\n            color: 'rgb(0,192,255)',\r\n            ...options\r\n        });\r\n        this.portsOut = [];\r\n        this.portsIn = [];\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras\r\n        };\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","import * as React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { css, Global } from '@emotion/react';\r\n\r\nexport interface DemoCanvasWidgetProps {\r\n\tcolor?: string;\r\n\tbackground?: string;\r\n}\r\n\r\nnamespace S {\r\n\texport const Container = styled.div<{ color: string; background: string }>`\r\n\t\theight: 100%;\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tbackground-size: 50px 50px;\r\n\t\tdisplay: flex;\r\n\r\n\t\t> * {\r\n\t\t\theight: 100%;\r\n\t\t\tmin-height: 100%;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\r\n\t\tbackground-image: linear-gradient(\r\n\t\t\t\t0deg,\r\n\t\t\t\ttransparent 24%,\r\n\t\t\t\t${(p) => p.color} 25%,\r\n\t\t\t\t${(p) => p.color} 26%,\r\n\t\t\t\ttransparent 27%,\r\n\t\t\t\ttransparent 74%,\r\n\t\t\t\t${(p) => p.color} 75%,\r\n\t\t\t\t${(p) => p.color} 76%,\r\n\t\t\t\ttransparent 77%,\r\n\t\t\t\ttransparent\r\n\t\t\t),\r\n\t\t\tlinear-gradient(\r\n\t\t\t\t90deg,\r\n\t\t\t\ttransparent 24%,\r\n\t\t\t\t${(p) => p.color} 25%,\r\n\t\t\t\t${(p) => p.color} 26%,\r\n\t\t\t\ttransparent 27%,\r\n\t\t\t\ttransparent 74%,\r\n\t\t\t\t${(p) => p.color} 75%,\r\n\t\t\t\t${(p) => p.color} 76%,\r\n\t\t\t\ttransparent 77%,\r\n\t\t\t\ttransparent\r\n\t\t\t);\r\n\t`;\r\n\r\n\texport const Expand = css`\r\n\t\thtml,\r\n\t\tbody,\r\n\t\t#root {\r\n\t\t\theight: 100%;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<Global styles={S.Expand} />\r\n\t\t\t\t<S.Container\r\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\r\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</S.Container>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from '../myNode/MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyEditableNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    portsIn: MyPortModel[] = [];\r\n    portsOut: MyPortModel[] = [];\r\n    content: Object;\r\n    extras: any;\r\n    selectableOptions: string[];\r\n    constructor(name: string, color: string, extras: any, ins: any[], outs: any[], shouldHaveUserName: boolean = true) {\r\n        super({\r\n            type: 'MyEditable',\r\n            name: name,\r\n            color: color,\r\n        });\r\n        this.extras = extras;\r\n\r\n        ins.forEach((method: string) => {\r\n            this.addInPort(method)\r\n        });\r\n        outs.forEach((method: string) => {\r\n            this.addOutPort(method)\r\n        });\r\n\r\n        let userName = shouldHaveUserName ? 'userName' : false;\r\n        const selector = name === 'Condition' ? name : outs[0].substring(0, outs[0].indexOf(' ') !== -1 ? outs[0].indexOf(' ') : outs[0].length)\r\n        switch (selector) {\r\n            case 'bool':\r\n                this.content = { name: userName, value: 'true' }\r\n                this.selectableOptions = ['true', 'false'];\r\n                break;\r\n            case 'port':\r\n                this.content = { name: userName, value: '0' }\r\n                this.selectableOptions = Array.from(Array(10).keys()).map(x => x.toString())\r\n                break;\r\n            case 'int':\r\n                this.content = { name: userName, value: '0' }\r\n                this.selectableOptions = ['something', 'went wrong'];\r\n                break;\r\n            case 'Condition':\r\n                this.content = { name: userName, value: '==' }\r\n                this.selectableOptions = ['==', '!=', '<', '>', '<=', '>=', '<=>']\r\n                break;\r\n            default:\r\n                this.content = { name: userName, value: 'value' }\r\n                this.selectableOptions = ['something', 'went wrong'];\r\n                break;\r\n        }\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n        this.content = event.data.content\r\n        this.selectableOptions = event.data.selectableOptions\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras,\r\n            content: this.content,\r\n            selectableOptions: this.selectableOptions\r\n        };\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [{\r\n        name: 'Arduino Uno',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 14,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    }, {\r\n        name: 'Arduino Nano',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 22,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Mega',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 16,\r\n            digitalPorts: 54,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Leonardo',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 12,\r\n            digitalPorts: 20,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Flora',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 4,\r\n            digitalPorts: 8,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    }, {\r\n        name: 'Digital I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        ins: [\r\n            'void digitalWrite(int pin, int value)',\r\n            'void pinMode(int pin, int mode)',\r\n        ],\r\n        outs: [\r\n            'int digitalRead(int pin)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Analog I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        ins: [\r\n            'void analoglWrite(int pin, int value)',\r\n            'void pinMode(int pin, int mode)',\r\n            'void analogReference(int type)',\r\n        ],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'Time',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        ins: [\r\n            'void delay(int ms)',\r\n            'void delayMicroseconds(int us)',\r\n        ],\r\n        outs: [\r\n            'unsigned long micros()',\r\n            'unsigned long millis()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Math',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        ins: [\r\n            'void delay(int ms)',\r\n        ],\r\n        outs: [\r\n            'int abs(int x)',\r\n            'int constrain(int x, int a, int b)',\r\n            'int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)',\r\n            'any? max(any x, any y)',\r\n            'any? min(any x, any y)',\r\n            'double pow(float base, float exponent)',\r\n            'double sq(any x)',\r\n            'double sqrt(any x)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Trigonometry',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'double cos(float rad)',\r\n            'double sin(float rad)',\r\n            'double tan(float rad)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Random Numbers',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'built-in'\r\n        },\r\n        ins: [\r\n            'void randomSeed(long seed)',\r\n        ],\r\n        outs: [\r\n            'long random(? max)',\r\n            'long random(? min, ? max)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Digital Port',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'port'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'port',\r\n        ]\r\n    }, {\r\n        name: 'Analog Port',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'port'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'port',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Function',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'call',\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n        ]\r\n    }, {\r\n        name: 'Condition',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n            'x',\r\n            'y'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Loop',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'startValue',\r\n            'stopValue'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Led',\r\n        color: 'red',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Setter.h'\r\n        },\r\n        ins: [\r\n            'setValue()'\r\n        ],\r\n        outs: []\r\n\r\n    },\r\n    {\r\n        name: 'Temperature Sensor',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Getter.h'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'getValue()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'TwoWire Interface',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Wire.h'\r\n        },\r\n        ins: [\r\n            'void begin()',\r\n            'void beginTransmission()',\r\n            'void setClock()',\r\n            'void onReceive()',\r\n            'void onRequest()'\r\n\r\n        ],\r\n        outs: [\r\n            'byte requestFrom()',\r\n            'byte endTransmission()',\r\n            'byte write()',\r\n            'byte available()',\r\n            'byte read()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Button',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Getter.h'\r\n        },\r\n        ins: [\r\n            'setValue(bool)'\r\n        ],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'PWM Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Adafruit_PWMServoDriver.h'\r\n        },\r\n        ins: [\r\n            'void begin(uint8_t prescale=0)',\r\n            'void sleep()',\r\n            'void wakeup()',\r\n            'void setExtClk(uint8_t prescale)',\r\n            'void setPWMFreq(float freq)',\r\n            'void setOutputMode(bool totempole)',\r\n            'void setPWM(uint8_t num, uint16_t on, uint16_t off)',\r\n            'void setPin(uint8_t num, uint16_t val, bool invert=false)',\r\n            'void writeMicroseconds(uint8_t num, uint16_t Microseconds)',\r\n            'void setOscillatorFrequency(uint32_t freq)',\r\n\r\n        ],\r\n        outs: [\r\n            'uint8_t getPWM(uint8_t num)',\r\n            'uint8_t readPrescale()',\r\n            'uint32_t getOscillatorFrequency()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Servo.h'\r\n        },\r\n        ins: [\r\n            'void detach()',\r\n            'void write(int)',\r\n            'void writeMicroseconds(int)',\r\n        ],\r\n        outs: [\r\n            'uint8_t attach(int)',\r\n            'uint8_t attach(int, int, int)',\r\n            'int read()',\r\n            'int readMicroseconds()',\r\n            'bool attached()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Stepper',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Stepper.h'\r\n        },\r\n        ins: [\r\n            'Stepper(int, int, int)',\r\n            'Stepper(int, int, int, int, int)',\r\n            'Stepper(int, int, int, int, int, int)',\r\n            'void setSpeed(long whatSpeed)',\r\n            'void step(int number_of_steps)',\r\n        ],\r\n        outs: [\r\n            'int version(void)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable Integer',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [\r\n            'void setValue(int)',\r\n        ],\r\n        outs: [\r\n            'int getValue()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable Boolean',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [\r\n            'void setValue(bool)',\r\n        ],\r\n        outs: [\r\n            'bool',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Constant Integer',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'constant'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'int',\r\n        ]\r\n    }, {\r\n        name: 'Constant Boolean',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'constant'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'bool',\r\n        ]\r\n    },\r\n]","import React, { useState, useRef, useCallback } from \"react\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport { useEditable } from \"use-editable\";\r\n\r\nconst Edit = () => {\r\n    const editorRef = useRef(null);\r\n    const [code, setCode] = useState('');\r\n\r\n    const onEditableChange = useCallback((code) => {\r\n        setCode(code.slice(0, -1));\r\n    }, []);\r\n\r\n    useEditable(editorRef, onEditableChange, {\r\n        disabled: false,\r\n        indentation: 2\r\n    });\r\n\r\n    return (\r\n        <Highlight {...defaultProps} code={code} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <pre className={className} style={style} ref={editorRef}>\r\n                    {tokens.map((line, i) => (\r\n                        <React.Fragment key={i}>\r\n                            {line\r\n                                .filter((token) => !token.empty)\r\n                                .map((token, key) => (\r\n                                    <span {...getTokenProps({ token, key })} />\r\n                                ))}\r\n                            {\"\\n\"}\r\n                        </React.Fragment>\r\n                    ))}\r\n                </pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n};\r\n\r\nexport default Edit;\r\n","import Prism from \"prismjs\";\r\nimport { useEffect } from \"react\";\r\nimport \"./prism.css\";\r\nimport PrismEdit from \"./PrismEdit\";\r\n\r\nfunction generateCode(model: any): string {\r\n    let code = ''\r\n    if (Object.keys(model).length === 0) {\r\n        return '// Empty Diagram!';\r\n    }\r\n    const links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    const nodes: any[] = []\r\n    const logics: any[] = []\r\n    const components: any[] = []\r\n    const controllers: any[] = []\r\n    const libraries: any[] = []\r\n    const constants: any[] = []\r\n\r\n    const usedDigital: number[] = []\r\n    const usedAnalog: number[] = []\r\n\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        const n = x[1]\r\n        nodes.push(n)\r\n        switch (n.extras.type) {\r\n            case 'component':\r\n                n.instance = n.name.toLowerCase().replace(' ', '') + components.filter(c => c.extras.library === n.extras.library).length\r\n                components.push(n)\r\n                if (!libraries.includes(n.extras.library))\r\n                    libraries.push(n.extras.library)\r\n                break\r\n            case 'controller':\r\n                controllers.push(n)\r\n                break\r\n            case 'logic':\r\n                logics.push(n)\r\n                break\r\n            case 'variable':\r\n                break\r\n            case 'constant':\r\n                n.content.name = n.content.name.toUpperCase()\r\n                constants.push(n)\r\n                break\r\n        }\r\n    })\r\n\r\n    if (nodes.length === 0) return '// You need at least one Node!'\r\n    if (controllers.length === 0) return '// You need an Arduino!'\r\n    if (controllers.length > 1) return '// Only one Arduino allowed!'\r\n\r\n    let controller = controllers[0]\r\n\r\n\r\n    const add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n        return code;\r\n    };\r\n    const addOnTop = (...message: string[]) => {\r\n        let top = ''\r\n        message.forEach((m) => {\r\n            top += m;\r\n        });\r\n        code = top + \"\\n\" + code\r\n    };\r\n    const getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    const getPort = (nodeID: string, portID: string) => {\r\n        try {\r\n            return nodes.find((n: any) => n.id === nodeID).ports\r\n                .find((p: any) => p.id === portID);\r\n        } catch (error) {\r\n            return \"// Loose end\"\r\n        }\r\n    }\r\n    const getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    const getCoditionalValue = (conditionNode: any, portName: any): string => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === portName).links[0]\r\n            let link = getLink(linkID)\r\n            let port = getPort(link.source, link.sourcePort)\r\n            let parent = getParent(port)\r\n\r\n            if (['variable', 'port'].includes(parent.extras.type)) {\r\n                return parent.content.value\r\n            }\r\n            else if (['component'].includes(parent.extras.type)) {\r\n                return parent.instance + '.' + port.name\r\n            } else {\r\n                return add('Unknown extras.type')\r\n            }\r\n        } catch (error) {\r\n            return '/* Lacking Value */'\r\n        }\r\n    }\r\n    const getOutcome = (conditionNode: any, ifThis = 'True') => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === ifThis).links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.target, link.targetPort)\r\n        } catch (error) {\r\n            return { label: '// Lacking Outcome' }\r\n        }\r\n    }\r\n    const getParent = (childNode: any) => {\r\n        return nodes.find((n: any) => n.id === childNode.parentNode)\r\n    }\r\n    const removeTypes = (name: string): string => {\r\n        const functionName = name.substring(name.indexOf(' ') + 1, name.indexOf('(') !== -1 ? name.indexOf('(') : name.length)\r\n        const params = name.substring(name.indexOf('('), name.indexOf(')') - 1).split(',')\r\n        let result = functionName\r\n        params.forEach(param => {\r\n            if (!param.includes('=')) {\r\n                let thisParam = String(param.split(' ').slice(-1))\r\n                result += thisParam\r\n            }\r\n        });\r\n        // console.log('removing types from', name, 'params ', params, ' returning', result)\r\n        return result;\r\n    }\r\n    const callWithParameters = (node: any, ...contents: any) => {\r\n        try {\r\n            if (node.extras.type === 'constant') {\r\n                contents.push(node.content.name)\r\n            } else {\r\n                contents.push(node.content.value)\r\n            }\r\n        } catch (error) {\r\n            console.log('error, no parameter?')\r\n        }\r\n        node.ports.forEach((port: any) => {\r\n            port.links.forEach((l: any) => {\r\n                const link = getLink(l);\r\n                const toPort = getPort(link.target, link.targetPort)\r\n                const toNode = getNode(toPort.parentNode)\r\n                if (toNode.id === node.id) {//skip as it is the previous link\r\n                    if (toNode.instance) {\r\n                        add(toNode.instance + '.' + removeTypes(toPort.name.split(\"(\").shift()) + '(' + contents + ');')\r\n                    }\r\n                } else if (toNode.extras.type === 'built-in') {\r\n                    add(removeTypes(toPort.name.split(\"(\").shift()) + '(' + contents + ');')\r\n                } else if (!toNode.instance) {//points to another variable/port\r\n                    callWithParameters(toNode, ...contents)\r\n                } else {//points to a class instance, we hope it is a method call\r\n                    //todo: check for parameter type and numbers\r\n                    add(toNode.instance + '.' + removeTypes(toPort.name.split(\"(\").shift()) + '(' + contents + ');')\r\n                }\r\n            })\r\n        })\r\n    }\r\n    const processCall = (fromNode: any, fromPort: any, toNode: any, toPort: any) => {\r\n        if (['variable', 'constant'].includes(toNode?.extras?.type)) {\r\n            callWithParameters(toNode)\r\n        } else if (['port'].includes(toNode?.extras?.type)) {\r\n            console.log('found port', toNode)\r\n            if (toNode.name.includes('Digital')) {\r\n                console.log('it was digital');\r\n                usedDigital.push(toNode.content.value)\r\n            } else {\r\n                console.log('it was analog');\r\n                usedAnalog.push(toNode.content.value)\r\n            }\r\n            callWithParameters(toNode)\r\n        } else {\r\n            if (toNode?.instance) {\r\n                add(toNode.instance + '.' + removeTypes(toPort.name) + '()')\r\n            } else {\r\n                add(fromNode.instance + '.' + removeTypes(fromPort.name) + '()')\r\n            }\r\n        }\r\n\r\n    }\r\n    const processLink = (l: any) => {\r\n        const link = getLink(l);\r\n        const toPort = getPort(link.target, link.targetPort)\r\n        const toNode = getNode(toPort.parentNode)\r\n        const fromPort = getPort(link.source, link.sourcePort)\r\n        const fromNode = getNode(fromPort.parentNode)\r\n\r\n        if (toNode?.extras?.type === 'built-in') {\r\n            add(removeTypes(toPort.name) + '()')\r\n        } else if (toNode?.name === \"Function\") {\r\n            add(toNode.content.value, '(', ');')\r\n        } else if (toNode?.name === \"Condition\") {\r\n            const xValue = getCoditionalValue(toNode, 'x')\r\n            const yValue = getCoditionalValue(toNode, 'y')\r\n\r\n            const outcome2 = getOutcome(toNode)\r\n            const toNode2 = getParent(outcome2)\r\n\r\n            const outcome3 = getOutcome(toNode, 'False')\r\n            const toNode3 = getParent(outcome3)\r\n\r\n            add('if (', xValue, ' ' + toNode.content.value + ' ', yValue, ') {')\r\n            if (toNode2) {\r\n                callWithParameters(toNode2)\r\n            } else {\r\n                add('/* Lacking code to be executed if conditional is true */')\r\n            }\r\n            if (toNode3) {\r\n                add('} else {')\r\n                callWithParameters(toNode3)\r\n            }\r\n            add(\"}\\n\");\r\n\r\n        } else {\r\n            processCall(fromNode, fromPort, toNode, toPort)\r\n        }\r\n    }\r\n\r\n    if (libraries.length > 0) {\r\n        add('// Libraries')\r\n        libraries.forEach(lib => {\r\n            add('#include <' + lib + '>')\r\n        });\r\n        add('')\r\n        add('// Objects')\r\n        libraries.forEach(lib => {\r\n            components.forEach(comp => {\r\n                if (comp.extras.library === lib)\r\n                    add(comp.name + ' ' + comp.instance)\r\n            });\r\n        });\r\n    }\r\n\r\n    if (logics.filter(l => l.name === 'Function').length > 0) {\r\n        add('// Functions')\r\n        logics.forEach(logic => {\r\n            if (logic.name === \"Function\") {\r\n                add('void ', logic.content.value, '() {')\r\n                const callPort = logic.ports.find((x: any) => x.alignment === 'right')\r\n                callPort.links.forEach((l: any) => {\r\n                    processLink(l)\r\n                });\r\n                add('}')\r\n            }\r\n        });\r\n    }\r\n\r\n    if (constants.length > 0) {\r\n        add('// Constants')\r\n        constants.forEach(constant => {\r\n            add(`#define ${constant.content.name} ${constant.content.value} //${constant.name}`)\r\n        });\r\n        add('')\r\n    }\r\n\r\n    add(`// Micro-controller's Lifecycle`)\r\n    // let content.value: string | null = null\r\n    controller.ports.forEach((port: any) => {\r\n        add('void ', port.label, \"{\");\r\n        port.links.forEach((l: any) => {\r\n            processLink(l)\r\n        })\r\n        add(\"}\\n\");\r\n    })\r\n\r\n    addOnTop(\"\")\r\n    addOnTop(`Digital ports ${usedDigital.length}/${controller.extras.digitalPorts} ${usedDigital.length > 0 ? `(${usedDigital})` : \"\"}`, \"*/\")\r\n    addOnTop(`Analog ports ${usedAnalog.length}/${controller.extras.analogPorts} ${usedAnalog.length > 0 ? `(${usedAnalog})` : \"\"} `)\r\n    addOnTop(\"/* Code generated for \", controller.name);\r\n\r\n    function indentCode(original: string) {\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return indentCode(code);\r\n}\r\nexport default function Code(props: { model: string }) {\r\n    // console.log('CodeComponent render')\r\n    const model = props.model\r\n    let code = 'Initializing Generator'\r\n    if (model === \"{}\" || model === \"\") {\r\n        //\r\n    } else {\r\n        try {\r\n            code = generateCode(JSON.parse(model))\r\n        } catch (error) {\r\n            code = 'Uncaught error, maybe a loose link?'\r\n            console.log(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n    }, [props])\r\n    return (\r\n        <>\r\n            <div className=\"Code\">\r\n                <pre >\r\n                    <code className=\"language-clike\">{code}</code>\r\n                </pre>\r\n            </div>\r\n            <PrismEdit />\r\n        </>\r\n    );\r\n}","import * as React from 'react';\r\nimport { Application } from './Application';\r\nimport { TrayItemWidget } from './TrayItemWidget';\r\nimport { MyNodeModel } from './myNode/MyNodeModel';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { DemoCanvasWidget } from './helpers/DemoCanvasWidget';\r\nimport styled from '@emotion/styled';\r\nimport { MyEditableNodeModel } from './editableNode/MyEditableNodeModel';\r\nimport paletteNodes from '../../paletteNodes';\r\nimport { useState } from 'react';\r\nimport Code from '../Code';\r\nimport { Button } from '@material-ui/core';\r\nvar ScrollArea = require('react-scrollbar').default;\r\nexport interface BodyWidgetProps {\r\n\tapp: Application;\r\n}\r\n\r\nnamespace S {\r\n\texport const Body = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-height: 100%;\r\n\t`;\r\n\r\n\texport const Content = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n\texport const Layer = styled.div`\r\n\t\tposition: relative;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n}\r\n\r\nfunction BodyWidget(props: BodyWidgetProps) {\r\n\tconst [model, setModel] = useState(\"{}\")\r\n\tconst [rerender, setRerender] = React.useState(false);\r\n\r\n\tconst rawModel = props.app.getDiagramEngine().getModel().serialize()\r\n\tconst stringModel = JSON.stringify(rawModel)\r\n\r\n\tconst groups = [...new Set(paletteNodes.map(x => x.extras.type))]\r\n\r\n\tif (stringModel !== model) {\r\n\t\tsetModel(stringModel);\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"float-container\" >\r\n\t\t\t<div className=\"float-child-left\">\r\n\t\t\t\t<S.Body>\r\n\t\t\t\t\t<S.Content >\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<ScrollArea\r\n\t\t\t\t\t\t\t\tspeed={1}\r\n\t\t\t\t\t\t\t\tclassName=\"area\"\r\n\t\t\t\t\t\t\t\tcontentClassName=\"content\"\r\n\t\t\t\t\t\t\t\thorizontal={false}\r\n\t\t\t\t\t\t\t\tstyle={{ height: '88vh' }}\r\n\t\t\t\t\t\t\t\tsmoothScrolling={true}\r\n\t\t\t\t\t\t\t\tverticalScrollbarStyle={{ backgroundColor: 'white' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tgroups.map((group) => {\r\n\t\t\t\t\t\t\t\t\t\treturn <div key={group} style={{ border: 'dashed white 1px', marginBottom: '20px' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<h6 style={{ margin: '0px 0px 0px 0px' }}>{group + 's'}:</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t{paletteNodes.filter(n => n.extras.type === group).map((node) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <TrayItemWidget key={node.name} node={node} />\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ScrollArea>\r\n\t\t\t\t\t\t\t<div style={{ marginBottom: '0px' }}>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" size='small'\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tlocalStorage.setItem('model', JSON.stringify(rawModel));\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('Saved')\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" size='small'\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tprops.app.getActiveDiagram().deserializeModel(\r\n\t\t\t\t\t\t\t\t\t\t\tJSON.parse(localStorage.getItem('model') || '{}'),\r\n\t\t\t\t\t\t\t\t\t\t\tprops.app.getDiagramEngine());\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('Loaded')\r\n\t\t\t\t\t\t\t\t\t\tsetModel(stringModel);\r\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t\t\t\t}, 10);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tLoad\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" size='small'\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tprops.app.getActiveDiagram().deserializeModel(\r\n\t\t\t\t\t\t\t\t\t\t\tJSON.parse('{\"id\":\"b61bb7d6-efee-4caf-8b8c-be7dfa140acd\",\"offsetX\":0,\"offsetY\":0,\"zoom\":100,\"gridSize\":0,\"layers\":[{\"id\":\"0df10e02-9519-4a32-9c90-cb48681c24cd\",\"type\":\"diagram-links\",\"isSvg\":true,\"transformed\":true,\"models\":{}},{\"id\":\"c18e36ab-c0ce-4def-8c51-0c09d00cfe0b\",\"type\":\"diagram-nodes\",\"isSvg\":false,\"transformed\":true,\"models\":{}}]}'),\r\n\t\t\t\t\t\t\t\t\t\t\tprops.app.getDiagramEngine());\r\n\t\t\t\t\t\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t\t\t\t}, 10);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tClear\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<S.Layer\r\n\t\t\t\t\t\t\tonDrop={(event) => {\r\n\t\t\t\t\t\t\t\tlet data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\r\n\t\t\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\t\t\tlet node: any = {};\r\n\t\t\t\t\t\t\t\t\tif (data.extras.type === \"variable\") {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs);\r\n\t\t\t\t\t\t\t\t\t} else if (data.extras.type === \"constant\") {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs);\r\n\t\t\t\t\t\t\t\t\t} else if (data.extras.type === 'port') {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs, false);\r\n\t\t\t\t\t\t\t\t\t} else if (data.extras.type === \"logic\") {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs, false);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyNodeModel(data.name, data.color);\r\n\t\t\t\t\t\t\t\t\t\tnode.extras = data.extras\r\n\t\t\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\t\tnode.addInPort(method)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tprops.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonDragOver={(event: any) => {\r\n\t\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={(event: any) => {\r\n\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t\t\t<DemoCanvasWidget >\r\n\t\t\t\t\t\t\t\t\t<CanvasWidget engine={props.app.getDiagramEngine()} />\r\n\t\t\t\t\t\t\t\t</DemoCanvasWidget>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</S.Layer>\r\n\t\t\t\t\t</S.Content>\r\n\t\t\t\t</S.Body >\r\n\t\t\t</div>\r\n\t\t\t<div className=\"float-child-right\">\r\n\t\t\t\t<Code model={model} />\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t)\r\n\r\n}\r\nexport default React.memo(BodyWidget)","import { LabelModel } from '@projectstorm/react-diagrams';\r\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface EditableLabelOptions extends BaseModelOptions {\r\n\tvalue?: string;\r\n}\r\n\r\nexport class EditableLabelModel extends LabelModel {\r\n\tvalue: string;\r\n\r\n\tconstructor(options: EditableLabelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\ttype: 'editable-label'\r\n\t\t});\r\n\t\tthis.value = options.value || '';\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>): void {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.value = event.data.value;\r\n\t}\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { EditableLabelModel } from './EditableLabelModel';\r\nimport styled from '@emotion/styled';\r\nimport { action } from '@storybook/addon-actions';\r\n\r\nexport interface FlowAliasLabelWidgetProps {\r\n\tmodel: EditableLabelModel;\r\n}\r\n\r\nnamespace S {\r\n\t// NOTE: this CSS rules allows to interact with elements in label\r\n\texport const Label = styled.div`\r\n\t\tuser-select: none;\r\n\t\tpointer-events: auto;\r\n\t`;\r\n}\r\n\r\n// now we can render all what we want in the label\r\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\r\n\tconst [str, setStr] = React.useState(props.model.value);\r\n\r\n\treturn (\r\n\t\t<S.Label>\r\n\t\t\t<input\r\n\t\t\t\tvalue={str}\r\n\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\tconst newVal = event.target.value;\r\n\r\n\t\t\t\t\t// update value both in internal component state\r\n\t\t\t\t\tsetStr(newVal);\r\n\t\t\t\t\t// and in model object\r\n\t\t\t\t\tprops.model.value = newVal;\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\r\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\r\n\t\t</S.Label>\r\n\t);\r\n};\r\n","import * as React from 'react';\r\nimport { AbstractReactFactory, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\r\n\r\nimport { EditableLabelModel } from './EditableLabelModel';\r\nimport { EditableLabelWidget } from './EditableLabelWidget';\r\n\r\nexport class EditableLabelFactory extends AbstractReactFactory<EditableLabelModel, DiagramEngine> {\r\n\tconstructor() {\r\n\t\tsuper('editable-label');\r\n\t}\r\n\r\n\tgenerateModel(): EditableLabelModel {\r\n\t\treturn new EditableLabelModel();\r\n\t}\r\n\r\n\tgenerateReactWidget(event: GenerateWidgetEvent<EditableLabelModel>): JSX.Element {\r\n\t\treturn <EditableLabelWidget model={event.model} />;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport AutosizeInput from 'react-input-autosize';\r\n\r\nexport interface IEditableSingleFieldProps {\r\n  beingEdited: boolean;\r\n  content: string;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n}) => {\r\n  return (\r\n    <AutosizeInput\r\n      autoFocus\r\n      inputStyle={{\r\n        padding: 1,\r\n        borderStyle: \"dotted\",\r\n        borderWidth: 1,\r\n        borderColor: \"black\"\r\n      }}\r\n      type=\"text\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n      onKeyDown={(event: any) => {\r\n        if (event.keyCode === 13) onBlurOrEnter();\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default class EditableSingleField extends React.Component<\r\n  IEditableSingleFieldProps\r\n> {\r\n  constructor(props: IEditableSingleFieldProps) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport interface ISelectableFieldProps {\r\n  beingEdited: boolean;\r\n  options: Array<string>\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\n\r\nexport interface ISelectableFieldState { }\r\n\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n  options\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  options: Array<string>;\r\n}) => {\r\n  return (\r\n    <select name=\"values\" id=\"values\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n    >\r\n      {\r\n        options.map((x, y) =>\r\n          <option key={y}>{x}</option>)\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default class SelectableField extends React.Component<\r\n  ISelectableFieldProps,\r\n  ISelectableFieldState\r\n> {\r\n  constructor(props: ISelectableFieldProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n            options={this.props.options}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","//@ts-nocheck\r\nimport * as React from \"react\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport \"./MyEditableNodeWidgedStyle.css\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { DiagramEngine, DefaultPortLabel } from \"@projectstorm/react-diagrams\";\r\nimport styled from '@emotion/styled';\r\n\r\nimport EditableSingleField from \"../custom-node/custom_components/EditableSingleField\";\r\nimport SelectableField from \"../custom-node/custom_components/SelectableField\";\r\n\r\nnamespace S {\r\n  export const Node = styled.div<{ background: string; selected: boolean }>`\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tborder-radius: 5px;\r\n\t\tfont-family: sans-serif;\r\n\t\tcolor: white;\r\n\t\tborder: solid 2px black;\r\n\t\toverflow: visible;\r\n\t\tfont-size: 11px;\r\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\r\n\t`;\r\n\r\n  export const Title = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.3);\r\n\t\tdisplay: flex;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n  export const TitleName = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 5px 5px;\r\n\t`;\r\n\r\n  export const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\r\n\t`;\r\n\r\n  export const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 10px;\r\n\t\t}\r\n\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport interface MyEditableWidgetProps {\r\n  nodeModel: MyEditableNodeModel;\r\n  engine: DiagramEngine\r\n}\r\n\r\nexport interface MyEditableWidgetState {\r\n  content: string;\r\n  height: number;\r\n  width: number;\r\n  editingSomething: boolean;\r\n  editingKey: string;\r\n}\r\nexport class MyEditableNodeWidget extends React.Component<\r\n  MyEditableWidgetProps,\r\n  MyEditableWidgetState\r\n> {\r\n  private divElement: HTMLDivElement;\r\n\r\n  constructor(props: MyEditableWidgetProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: { name: '', value: '' },\r\n      variableType: '',\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    };\r\n\r\n    //binding the methods to this element\r\n    this._editableObjectDoubleClick = this._editableObjectDoubleClick.bind(this);\r\n    this._contentOnChange = this._contentOnChange.bind(this);\r\n    this._onBlurOrEnter = this._onBlurOrEnter.bind(this);\r\n  }\r\n  generatePort = (port) => {\r\n    return <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\r\n  };\r\n\r\n  /**\r\n   * Pass this on onDoubleClick.\r\n   * You change the states to make the fields know it's in edit mode, and tell who is in the edit mode\r\n   */\r\n  _editableObjectDoubleClick = (content: string) => {\r\n    if (this.state.editingSomething) return;\r\n    this.setState({\r\n      editingSomething: true,\r\n      editingKey: content\r\n    });\r\n  };\r\n\r\n  /**\r\n   * What you'll do when the content is changed\r\n   * Usually, you update the model and the state\r\n   */\r\n  _contentOnChange = (evt: React.FormEvent<HTMLInputElement>) => {\r\n\r\n    this.props.nodeModel.content[this.state.editingKey] = evt.currentTarget.value;\r\n    this.setState({ content: evt.currentTarget.value });\r\n  };\r\n\r\n  /**\r\n   * What you will do when the InputField lost focus or you press enter\r\n   * Usually, you change the states to make the fields know it's not in edit mode\r\n   */\r\n  _onBlurOrEnter = () => {\r\n    this.setState({\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    });\r\n  };\r\n\r\n  /**\r\n   * copy atributes from nodeModel\r\n   */\r\n  UNSAFE_componentWillMount() {\r\n    this.setState({\r\n      content: this.props.nodeModel.content\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <S.Node\r\n        data-default-node-name={this.props.nodeModel.getOptions().name}\r\n        selected={this.props.nodeModel.isSelected()}\r\n        background={this.props.nodeModel.getOptions().color}>\r\n        <S.Title>\r\n          {this.props.nodeModel.content.name && <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"name\");\r\n                  }}\r\n                >\r\n                  <EditableSingleField\r\n                    elementKey=\"name\"\r\n                    editingKey={this.state.editingKey}\r\n                    beingEdited={this.state.editingSomething}\r\n                    content={this.props.nodeModel.content.name}\r\n                    onChange={this._contentOnChange}\r\n                    onBlurOrEnter={this._onBlurOrEnter}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>}\r\n          <S.TitleName>{this.props.nodeModel.getOptions().name}:\r\n          </S.TitleName>\r\n          <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"value\");\r\n                  }}\r\n                >\r\n                  {(this.props.nodeModel.portsOut[0].options.name === 'bool' ||\r\n                    this.props.nodeModel.portsOut[0].options.name === 'port' ||\r\n                    this.props.nodeModel.getOptions().name === 'Condition'\r\n                  ) ?\r\n                    <SelectableField\r\n                      elementKey=\"value\"\r\n                      options={this.props.nodeModel.selectableOptions}\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.content.value}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                    :\r\n                    <EditableSingleField\r\n                      elementKey=\"value\"\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.content.value}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </S.Title>\r\n        <S.Ports>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getInPorts(), this.generatePort)}</S.PortsContainer>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getOutPorts(), this.generatePort)}</S.PortsContainer>\r\n        </S.Ports>\r\n      </S.Node>\r\n    );\r\n  }\r\n}\r\n","import { MyEditableNodeWidget } from \"./MyEditableNodeWidget\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core'\r\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\r\n\r\nexport class MyEditableNodeFactory extends AbstractReactFactory<MyEditableNodeModel, DiagramEngine> {\r\n\tgenerateModel(event: import(\"@projectstorm/react-canvas-core\").GenerateModelEvent): MyEditableNodeModel {\r\n\t\treturn new MyEditableNodeModel('name', 'pink', 'test', ['t'], ['t']);\r\n\t}\r\n\tconstructor() {\r\n\t\tsuper(\"MyEditable\");\r\n\t}\r\n\r\n\tgenerateReactWidget(event: { model: MyEditableNodeModel }): JSX.Element {\r\n\t\treturn <MyEditableNodeWidget nodeModel={event.model} engine={this.engine} />;\r\n\t}\r\n}\r\n","import * as SRD from '@projectstorm/react-diagrams';\r\nimport { EditableLabelFactory } from './custom-label/EditableLabelFactory';\r\nimport { MyEditableNodeFactory } from './editableNode/MyEditableNodeFactory';\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Application {\r\n\tprotected activeModel: any;//SRD.DiagramModel\r\n\tprotected diagramEngine: SRD.DiagramEngine;\r\n\r\n\tconstructor() {\r\n\t\tthis.diagramEngine = SRD.default();\r\n\t\tthis.diagramEngine.getLabelFactories().registerFactory(new EditableLabelFactory());\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new MyEditableNodeFactory());\r\n\t\tthis.newModel();\r\n\t}\r\n\r\n\tpublic newModel() {\r\n\t\tthis.activeModel = new SRD.DiagramModel();\r\n\t\tthis.diagramEngine.setModel(this.activeModel);\r\n\t}\r\n\r\n\tpublic getActiveDiagram(): SRD.DiagramModel {\r\n\t\treturn this.activeModel;\r\n\t}\r\n\r\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\r\n\t\treturn this.diagramEngine;\r\n\t}\r\n}\r\n","import BodyWidget from '../components/react-diagrams/BodyWidget';\r\nimport { Application } from '../components/react-diagrams/Application';\r\n\r\nexport default function EditorPage() {\r\n  var app = new Application();\r\n  return <BodyWidget app={app} />\r\n}","export default __webpack_public_path__ + \"static/media/flow.43bedc99.svg\";","export default __webpack_public_path__ + \"static/media/cym_s.cbee123b.svg\";","import flowDiagram from '../assets/flow.svg'\r\nimport cym_s from '../assets/cym_s.svg'\r\nexport default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4CPS!\r\n        </h2>\r\n        <img src={flowDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n        <img src={cym_s} alt=\"CYM-S\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/cym_s_extended.79a380b4.svg\";","export default __webpack_public_path__ + \"static/media/cym_d.8652356e.svg\";","import modelsDiagram from '../assets/cym_s_extended.svg'\r\nimport stateDiagram from '../assets/cym_d.svg'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/transformations.40b625af.png\";","import transformations from '../assets/transformations.png'\r\nexport default function TransformationsPage() {\r\n    return <div>\r\n        <img src={transformations} alt=\"Transformations\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","import { useEffect } from \"react\";\r\nimport Prism from \"prismjs\";\r\nimport paletteNodes from \"../paletteNodes\";\r\nimport NodeDiagram from \"../components/NodeDiagram\";\r\n\r\nexport default function PalettePage() {\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n    }, [])\r\n    return <div>\r\n        {\r\n            paletteNodes.map((node) => {\r\n                return <div key={node.name} className=\"grid-container\" style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: ' 1fr 1fr',\r\n                    gridGap: '20px'\r\n                }}>\r\n                    <pre >\r\n                        <code className=\"language-clike\">{JSON.stringify(node, null, \"\\t\")}</code>\r\n                    </pre>\r\n                    <NodeDiagram node={node} />\r\n                </div>\r\n            }\r\n            )\r\n        }\r\n    </div>\r\n}","\r\nexport default function PalettePage() {\r\n    return <>\r\n        <h3>Planned Settings</h3>\r\n        <ul>\r\n            <li>Show/Hide copy button on code panel</li>\r\n            <li>Show/Hide all comments</li>\r\n            <li>Show/Hide all warnings</li>\r\n            <li>Show/Hide diagram overlay</li>\r\n            <li>Show/Hide palette expansion panels</li>\r\n            <li></li>\r\n            <li>Enable code editing</li>\r\n            <li></li>\r\n            <li>Enforce typings</li>\r\n            <li>Enforce lose ends</li>\r\n            <li>Enforce sequencial port usage</li>\r\n            <li>Remove link restrictions</li>\r\n            <li></li>\r\n            <li>Reset all settings on this page</li>\r\n            <li>Reset custom palette</li>\r\n            <li>Erase all localStorage data</li>\r\n            <li></li>\r\n            <li>Contact info</li>\r\n        </ul>\r\n\r\n    </>\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport TransformationsPage from './pages/Transformations';\r\nimport PalettePage from './pages/Palette';\r\nimport SettingsPage from './pages/Settings';\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Routes >\r\n          <Route path='/mdd4/' element={<HomePage />} />\r\n          <Route path='/mdd4/models' element={<ModelsPage />} />\r\n          <Route path='/mdd4/transformations' element={<TransformationsPage />} />\r\n          <Route path='/mdd4/palette' element={<PalettePage />} />\r\n          <Route path='/mdd4/editor' element={<EditorPage />} />\r\n          <Route path='/mdd4/settings' element={<SettingsPage />} />\r\n        </Routes>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}