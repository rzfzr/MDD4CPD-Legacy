{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","components/PrismEdit.tsx","components/Code.tsx","components/react-diagrams/TrayWidget.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/myNode/DefaultLinkModel.ts","components/react-diagrams/myNode/DefaultPortModel.ts","components/react-diagrams/myNode/MyNodeModel.ts","components/react-diagrams/helpers/DemoCanvasWidget.tsx","components/react-diagrams/diamond/DiamondPortModel.ts","components/react-diagrams/diamond/DiamondNodeModel.ts","components/react-diagrams/custom-label/EditableLabelModel.ts","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/custom-label/EditableLabelWidget.tsx","components/react-diagrams/custom-label/EditableLabelFactory.tsx","components/react-diagrams/diamond/DiamondNodeWidget.tsx","components/react-diagrams/diamond/DiamondNodeFactory.tsx","components/react-diagrams/diamond/SimplePortFactory.ts","components/react-diagrams/Application.ts","components/react-diagrams/index.tsx","pages/Editor.tsx","pages/Home.tsx","assets/staticCYM.png","pages/Models.tsx","assets/state.png","pages/State.tsx","pages/Palette.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","Edit","editorRef","useRef","code","setCode","onEditableChange","useCallback","slice","useEditable","disabled","indentation","defaultProps","language","className","tokens","getTokenProps","getLineProps","ref","map","line","i","Fragment","filter","token","empty","key","generateCode","model","Object","keys","length","links","entries","layers","models","forEach","x","nodes","logics","components","controllers","libraries","n","extras","type","instance","name","toLowerCase","includes","library","controller","add","message","m","getLink","linkID","find","l","id","getPort","nodeID","portID","ports","p","getNode","getParent","childNode","parentNode","analogPorts","digitalPorts","lib","comp","removeType","split","port","link","toPort","target","targetPort","toNode","fromPort","source","sourcePort","fromNode","conditionNode","error","getValue","outcome","getOutcome","replace","original","level","repeat","join","formatCode","Code","useEffect","Prism","highlightAll","setInterval","temp","localStorage","getItem","setItem","JSON","parse","PrismEdit","S","styled","div","TrayWidget","Tray","this","props","children","React","TrayItemWidget","draggable","onDragStart","dataTransfer","setData","stringify","DefaultLinkModel","options","width","selectedColor","curvyness","getOptions","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","getSourceControl","translate","calculateControlOffset","getSourcePort","getTargetControl","getTargetPort","getSVGCurve","data","fireEvent","LinkModel","DefaultPortModel","in","PortModel","MyNodeModel","portsIn","portsOut","lookupTable","splice","indexOf","after","addPort","_","portsInOrder","getPortFromID","portsOutOrder","getID","NodeModel","background","css","DemoCanvasWidget","styles","Expand","Container","DiamondPortModel","DiamondNodeModel","BOTTOM","EditableLabelModel","LabelModel","lastType","paletteNodes","ins","outs","BodyWidget","app","getDiagramEngine","getModel","serialize","Body","Content","height","node","margin","Layer","onDrop","getData","console","log","point","getRelativeMousePoint","setPosition","addNode","node1","DefaultNodeModel","port1","addOutPort","node2","port2","addInPort","link1","addLabel","addAll","method","forceUpdate","onDragOver","preventDefault","engine","EditableLabelWidget","str","setStr","Label","newVal","onClick","action","EditableLabelFactory","AbstractReactFactory","DiamondNodeWidget","size","dangerouslySetInnerHTML","__html","isSelected","left","Port","DiamondNodeFactory","SimplePortFactory","cb","initialConfig","AbstractModelFactory","Application","activeModel","diagramEngine","SRD","getPortFactories","registerFactory","config","getNodeFactories","getLabelFactories","newModel","setModel","EditorPage","HomePage","ModelsPage","src","modelsDiagram","alt","maxHeight","maxWidth","StatePage","stateDiagram","PalettePage","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e02a84f.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport { AppBar } from '@material-ui/core';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Models\" value=\"/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction label=\"State\" value=\"/state\" icon={<SwapHorizIcon />} />\r\n                <BottomNavigationAction label=\"Editor\" value=\"/editor\" icon={<EditIcon />} />\r\n                <BottomNavigationAction label=\"Palette\" value=\"/palette\" icon={<PaletteIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import React, { useState, useRef, useCallback } from \"react\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport { useEditable } from \"use-editable\";\r\n\r\nconst Edit = () => {\r\n    const editorRef = useRef(null);\r\n    const [code, setCode] = useState(\r\n        'function test() {}\\n\\nconsole.log(\"hello\");'\r\n    );\r\n\r\n    const onEditableChange = useCallback((code) => {\r\n        setCode(code.slice(0, -1));\r\n    }, []);\r\n\r\n    useEditable(editorRef, onEditableChange, {\r\n        disabled: false,\r\n        indentation: 2\r\n    });\r\n\r\n    return (\r\n        <Highlight {...defaultProps} code={code} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <pre className={className} style={style} ref={editorRef}>\r\n                    {tokens.map((line, i) => (\r\n                        <React.Fragment key={i}>\r\n                            {line\r\n                                .filter((token) => !token.empty)\r\n                                .map((token, key) => (\r\n                                    <span {...getTokenProps({ token, key })} />\r\n                                ))}\r\n                            {\"\\n\"}\r\n                        </React.Fragment>\r\n                    ))}\r\n                </pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n};\r\n\r\nexport default Edit;\r\n","import { useEffect, useState } from \"react\";\r\nimport Prism from \"prismjs\";\r\n// import \"prismjs/themes/prism-tomorrow.css\";\r\nimport \"./prism.css\";\r\nimport PrismEdit from \"./PrismEdit\";\r\n\r\n\r\nfunction generateCode(model: any): string {\r\n    let code = ''\r\n    if (Object.keys(model).length === 0) {\r\n        return '// Empty Diagram!';\r\n    }\r\n    let links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    let nodes: any[] = []\r\n    let logics: any[] = []\r\n    let components: any[] = []\r\n    let controllers: any[] = []\r\n    let libraries: any[] = []\r\n\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        const n = x[1]\r\n        nodes.push(n)\r\n        switch (n.extras.type) {\r\n            case 'component':\r\n                n.instance = n.name.toLowerCase()\r\n                components.push(n)\r\n                if (!libraries.includes(n.extras.library))\r\n                    libraries.push(n.extras.library)\r\n                break\r\n            case 'controller':\r\n                controllers.push(n)\r\n                break\r\n            case 'logic':\r\n                logics.push(n)\r\n                break\r\n        }\r\n    })\r\n\r\n    // console.log('Generating from model:', model, 'Parsed ', nodes, logics, components, controllers)\r\n\r\n    if (nodes.length === 0) return '// You need at least one Node!'\r\n    if (controllers.length === 0) return '// You need an Arduino!'\r\n    if (controllers.length > 1) return '// Only one Arduino allowed!'\r\n\r\n    let controller = controllers[0]\r\n\r\n    let add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n    };\r\n    let getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    let getPort = (nodeID: string, portID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID).ports\r\n            .find((p: any) => p.id === portID);\r\n    }\r\n    let getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    let getValue = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'value').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.source, link.sourcePort)\r\n        } catch (error) {\r\n            return { name: '/* Lacking Value */' }\r\n        }\r\n    }\r\n    let getOutcome = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'True').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.target, link.targetPort)\r\n        } catch (error) {\r\n            return { label: '// Lacking Outcome' }\r\n        }\r\n    }\r\n    let getParent = (childNode: any) => {\r\n        return nodes.find((n: any) => n.id === childNode.parentNode)\r\n    }\r\n    add(\"/* Code generated for \", controller.name);\r\n    add('Analog ports N/' + controller.extras.analogPorts)\r\n    add('Digital ports M/' + controller.extras.digitalPorts)\r\n    add(\"*/\")\r\n    add('')\r\n\r\n    libraries.forEach(lib => {\r\n        add('#include <' + lib + '>')\r\n        components.forEach(comp => {\r\n            if (comp.extras.library === lib)\r\n                add(comp.name + ' ' + comp.instance)\r\n        });\r\n        add('')\r\n    });\r\n\r\n\r\n    let removeType = (name: string) => {\r\n        return name.split(' ').slice(-1)\r\n    }\r\n    controller.ports.forEach((port: any) => {\r\n        add(port.label, \"{\");\r\n        port.links.forEach((l: any) => {\r\n            let link = getLink(l);\r\n            let toPort = getPort(link.target, link.targetPort)\r\n            let toNode = getNode(toPort.parentNode)\r\n            let fromPort = getPort(link.source, link.sourcePort)\r\n            let fromNode = getNode(fromPort.parentNode)\r\n            if (toNode.name === \"Condition\") {\r\n                let value = getValue(toNode)\r\n                let outcome = getOutcome(toNode)\r\n                add('if (', getParent(value)?.instance + '.' + value.name, toPort.name.replace('if', ''), ') {')\r\n                add(getParent(outcome)?.instance + '.' + outcome.label)\r\n                add(\"}\\n\");\r\n            } else {\r\n                // console.log('here', link, toNode, toPort)\r\n                if (toNode.instance) {\r\n                    add(toNode.instance + '.' + removeType(toPort.name))\r\n                } else {\r\n                    add(fromNode.instance + '.' + removeType(fromPort.name))\r\n                }\r\n            }\r\n        })\r\n        add(\"}\\n\");\r\n    })\r\n\r\n    function formatCode(original: string) {\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return formatCode(code);\r\n}\r\nexport default function Code() {\r\n    const [code, setCode] = useState('Initializing Generator')\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n        setInterval(() => {\r\n            try {\r\n                let temp = localStorage.getItem('model')\r\n                if (temp !== localStorage.getItem('oldModel')) {\r\n                    localStorage.setItem('oldModel', temp || '{}')\r\n                    setCode(generateCode(JSON.parse(temp || '{}')));\r\n                    Prism.highlightAll();\r\n                }\r\n            } catch (error) {\r\n                // console.log(error)\r\n            }\r\n        }, 1500)\r\n    }, []);\r\n    return (\r\n        <>\r\n            <div className=\"Code\">\r\n                <pre >\r\n                    <code className=\"language-clike\">{code}</code>\r\n                </pre>\r\n            </div>\r\n            <PrismEdit />\r\n\r\n        </>\r\n    );\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin:\t 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color || 'red'}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","// LabelModel,\nimport {\n\tLinkModel,\n\tLinkModelGenerics,\n\tLinkModelListener,\n\tPortModel,\n\tPortModelAlignment\n} from '@projectstorm/react-diagrams-core';\n// import { DefaultLabelModel } from './DefaultLabelModel';\nimport { BezierCurve } from '@projectstorm/geometry';\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\nexport interface DefaultLinkModelListener extends LinkModelListener {\n\t// colorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\n\n\t// widthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\n}\n\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\n\twidth?: number;\n\tcolor?: string;\n\tselectedColor?: string;\n\tcurvyness?: number;\n\ttype?: string;\n\ttestName?: string;\n}\n\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\n\tLISTENER: DefaultLinkModelListener;\n\tOPTIONS: DefaultLinkModelOptions;\n}\n\nexport class DefaultLinkModel extends LinkModel<DefaultLinkModelGenerics> {\n\tconstructor(options: DefaultLinkModelOptions = {}) {\n\t\tsuper({\n\t\t\ttype: 'default',\n\t\t\twidth: options.width || 3,\n\t\t\tcolor: options.color || 'gray',\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\n\t\t\tcurvyness: 50,\n\t\t\t...options\n\t\t});\n\t}\n\n\tcalculateControlOffset(port: PortModel): [number, number] {\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\n\t\t\treturn [this.options.curvyness || 0, 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\n\t\t\treturn [-(this.options.curvyness || 0), 0];\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\n\t\t\treturn [0, -(this.options.curvyness || 0)];\n\t\t}\n\t\treturn [0, this.options.curvyness || 0];\n\t}\n\n\tgetSVGPath(): string | undefined {\n\t\tif (this.points.length === 2) {\n\t\t\tconst curve = new BezierCurve();\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\n\n\t\t\tif (this.sourcePort) {\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\n\t\t\t}\n\n\t\t\tif (this.targetPort) {\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\n\t\t\t}\n\t\t\treturn curve.getSVGCurve();\n\t\t}\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\twidth: this.options.width,\n\t\t\tcolor: this.options.color,\n\t\t\tcurvyness: this.options.curvyness,\n\t\t\tselectedColor: this.options.selectedColor\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.options.color = event.data.color;\n\t\tthis.options.width = event.data.width;\n\t\tthis.options.curvyness = event.data.curvyness;\n\t\tthis.options.selectedColor = event.data.selectedColor;\n\t}\n\tsetWidth(width: number) {\n\t\tthis.options.width = width;\n\t\tthis.fireEvent({ width }, 'widthChanged');\n\t}\n\n\tsetColor(color: string) {\n\t\tthis.options.color = color;\n\t\tthis.fireEvent({ color }, 'colorChanged');\n\t}\n}\n","import {\r\n\tLinkModel,\r\n\tPortModel,\r\n\tPortModelAlignment,\r\n\tPortModelGenerics,\r\n\tPortModelOptions\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { DefaultLinkModel } from './DefaultLinkModel';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultPortModelOptions extends PortModelOptions {\r\n\tlabel?: string;\r\n\tin?: boolean;\r\n}\r\n\r\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\r\n\tOPTIONS: DefaultPortModelOptions;\r\n}\r\n\r\nexport class DefaultPortModel extends PortModel<DefaultPortModelGenerics> {\r\n\tconstructor(isIn: boolean, name?: string, label?: string);\r\n\tconstructor(options: DefaultPortModelOptions);\r\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\r\n\t\tif (!!name) {\r\n\t\t\toptions = {\r\n\t\t\t\tin: !!options,\r\n\t\t\t\tname: name,\r\n\t\t\t\tlabel: label\r\n\t\t\t};\r\n\t\t}\r\n\t\toptions = options as DefaultPortModelOptions;\r\n\t\tsuper({\r\n\t\t\tlabel: options.label || options.name,\r\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\r\n\t\t\ttype: 'default',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.in = event.data.in;\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tin: this.options.in,\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\t// if (port instanceof DefaultPortModel) {\r\n\t\t// \treturn this.options.in !== port.getOptions().in;\r\n\t\t// }\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(): LinkModel {\r\n\t\tconst link = new DefaultLinkModel();\r\n\t\t// let label = new DefaultLabelModel();\r\n\t\t// label.setLabel(\"I'm a sad label\");\r\n\t\t// link.addLabel(label)\r\n\t\treturn link\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { DefaultPortModel } from './DefaultPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    protected portsIn: DefaultPortModel[];\r\n    protected portsOut: DefaultPortModel[];\r\n    extras: any;\r\n\r\n    constructor(name: string, color: string);\r\n    constructor(options?: DefaultNodeModelOptions);\r\n    constructor(options: any = {}, color?: string) {\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                name: options,\r\n                color: color\r\n            };\r\n        }\r\n        super({\r\n            type: 'default',\r\n            name: 'Untitled',\r\n            color: 'rgb(0,192,255)',\r\n            ...options\r\n        });\r\n        this.portsOut = [];\r\n        this.portsIn = [];\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: DefaultPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends DefaultPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): DefaultPortModel {\r\n        const p = new DefaultPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): DefaultPortModel {\r\n        const p = new DefaultPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as DefaultPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as DefaultPortModel[];\r\n        this.extras = event.data.extras\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras\r\n        };\r\n    }\r\n\r\n    getInPorts(): DefaultPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): DefaultPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nnamespace S {\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import { LinkModel, PortModel, DefaultLinkModel, PortModelAlignment } from '@projectstorm/react-diagrams';\n\nexport class DiamondPortModel extends PortModel {\n\tconstructor(alignment: PortModelAlignment) {\n\t\tsuper({\n\t\t\ttype: 'diamond',\n\t\t\tname: alignment,\n\t\t\talignment: alignment\n\t\t});\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\treturn new DefaultLinkModel();\n\t}\n}\n","import { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams';\nimport { DiamondPortModel } from './DiamondPortModel';\n\nexport interface DiamondNodeModelGenerics {\n\tPORT: DiamondPortModel;\n}\n\nexport class DiamondNodeModel extends NodeModel<NodeModelGenerics & DiamondNodeModelGenerics> {\n\tconstructor() {\n\t\tsuper({\n\t\t\ttype: 'diamond'\n\t\t});\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.TOP));\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.LEFT));\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.BOTTOM));\n\t\tthis.addPort(new DiamondPortModel(PortModelAlignment.RIGHT));\n\t}\n}\n","import { LabelModel } from '@projectstorm/react-diagrams';\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface EditableLabelOptions extends BaseModelOptions {\n\tvalue?: string;\n}\n\nexport class EditableLabelModel extends LabelModel {\n\tvalue: string;\n\n\tconstructor(options: EditableLabelOptions = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'editable-label'\n\t\t});\n\t\tthis.value = options.value || '';\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tvalue: this.value\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>): void {\n\t\tsuper.deserialize(event);\n\t\tthis.value = event.data.value;\n\t}\n}\n","import * as React from 'react';\r\nimport { TrayWidget } from './TrayWidget';\r\nimport { Application } from './Application';\r\nimport { TrayItemWidget } from './TrayItemWidget';\r\nimport { MyNodeModel } from './myNode/MyNodeModel';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { DemoCanvasWidget } from './helpers/DemoCanvasWidget';\r\nimport styled from '@emotion/styled';\r\nimport { DiamondNodeModel } from './diamond/DiamondNodeModel';\r\nimport { EditableLabelModel } from './custom-label/EditableLabelModel';\r\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n\r\nexport interface BodyWidgetProps {\r\n\tapp: Application;\r\n}\r\n\r\nnamespace S {\r\n\texport const Body = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-height: 100%;\r\n\t`;\r\n\r\n\texport const Header = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground: rgb(30, 30, 30);\r\n\t\tflex-grow: 0;\r\n\t\tflex-shrink: 0;\r\n\t\tcolor: white;\r\n\t\tfont-family: Helvetica, Arial, sans-serif;\r\n\t\tpadding: 10px;\r\n\t\talign-items: center;\r\n\t`;\r\n\r\n\texport const Content = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n\texport const Layer = styled.div`\r\n\t\tposition: relative;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n}\r\nlet lastType = ''\r\nconst paletteNodes = [\r\n\t{\r\n\t\tname: 'Arduino Uno',\r\n\t\tcolor: 'green',\r\n\t\textras: {\r\n\t\t\ttype: 'controller',\r\n\t\t\tanalogPorts: 6,\r\n\t\t\tdigitalPorts: 14,\r\n\t\t},\r\n\t\tins: [],\r\n\t\touts: [\r\n\t\t\t'setup()',\r\n\t\t\t'loop()'\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Arduino Mega',\r\n\t\tcolor: 'green',\r\n\t\textras: {\r\n\t\t\ttype: 'controller',\r\n\t\t\tanalogPorts: 16,\r\n\t\t\tdigitalPorts: 54,\r\n\t\t},\r\n\t\tins: [],\r\n\t\touts: [\r\n\t\t\t'setup()',\r\n\t\t\t'loop()'\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Condition',\r\n\t\textras: { type: 'logic' },\r\n\t\tcolor: 'grey',\r\n\t\touts: [\r\n\t\t\t'True',\r\n\t\t\t'False'\r\n\t\t],\r\n\t\tins: [\r\n\t\t\t'if <= 20',\r\n\t\t\t'value'\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Loop',\r\n\t\textras: { type: 'logic' },\r\n\t\tcolor: 'grey',\r\n\t\touts: [\r\n\t\t\t'True',\r\n\t\t\t'False'\r\n\t\t],\r\n\t\tins: [\r\n\t\t\t'for',\r\n\t\t\t'value'\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Led',\r\n\t\tcolor: 'red',\r\n\t\textras: { type: 'component', library: 'Setter.h' },\r\n\t\tins: [\r\n\t\t\t'setValue()'\r\n\t\t],\r\n\t\touts: []\r\n\r\n\t},\r\n\t{\r\n\t\tname: 'TemperatureSensor',\r\n\t\tcolor: 'blue',\r\n\t\textras: { type: 'component', library: 'Getter.h' },\r\n\t\tins: [],\r\n\t\touts: [\r\n\t\t\t'getValue()'\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Button',\r\n\t\tcolor: 'blue',\r\n\t\textras: { type: 'component', library: 'Getter.h' },\r\n\t\tins: [\r\n\t\t\t'setValue(bool)'\r\n\t\t],\r\n\t\touts: []\r\n\t},\r\n\t{\r\n\t\tname: 'Servo',\r\n\t\tcolor: 'orange',\r\n\t\textras: { type: 'component', library: 'Servo.h' },\r\n\t\tins: [\r\n\t\t\t'void detach()',\r\n\t\t\t'void write(int)',\r\n\t\t\t'void writeMicroseconds(int)',\r\n\t\t],\r\n\t\touts: [\r\n\t\t\t'uint8_t attach(int)',\r\n\t\t\t'uint8_t attach(int, int, int)',\r\n\t\t\t'int read()',\r\n\t\t\t'int readMicroseconds()',\r\n\t\t\t'bool attached()',\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Stepper',\r\n\t\tcolor: 'orange',\r\n\t\textras: { type: 'component', library: 'Stepper.h' },\r\n\t\tins: [\r\n\t\t\t'Stepper(int, int, int)',\r\n\t\t\t'Stepper(int, int, int, int, int)',\r\n\t\t\t'Stepper(int, int, int, int, int, int)',\r\n\t\t\t'-',\r\n\t\t\t'void setSpeed(long whatSpeed)',\r\n\t\t\t'void step(int number_of_steps)',\r\n\t\t],\r\n\t\touts: [\r\n\t\t\t'int version(void)',\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Variable Integer',\r\n\t\tcolor: 'purple',\r\n\t\textras: { type: 'variable' },\r\n\t\tins: [\r\n\t\t\t'void setValue(int)',\r\n\t\t],\r\n\t\touts: [\r\n\t\t\t'int getValue()',\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Variable Boolean',\r\n\t\tcolor: 'purple',\r\n\t\textras: { type: 'variable' },\r\n\t\tins: [\r\n\t\t\t'void setValue(bool)',\r\n\t\t],\r\n\t\touts: [\r\n\t\t\t'bool getValue()',\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Constant Integer',\r\n\t\tcolor: 'purple',\r\n\t\textras: { type: 'variable' },\r\n\t\tins: [],\r\n\t\touts: [\r\n\t\t\t'value',\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Constant Boolean',\r\n\t\tcolor: 'purple',\r\n\t\textras: { type: 'variable' },\r\n\t\tins: [],\r\n\t\touts: [\r\n\t\t\t'value',\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\tname: 'Diamond',\r\n\t\tcolor: 'white',\r\n\t\textras: { type: 'testing' },\r\n\t\tins: [],\r\n\t\touts: []\r\n\t},\r\n\t{\r\n\t\tname: 'LabelEdit',\r\n\t\tcolor: 'white',\r\n\t\textras: { type: 'testing' },\r\n\t\tins: [],\r\n\t\touts: []\r\n\t}\r\n]\r\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\r\n\tcomponentDidMount() {\r\n\t\tsetInterval(() => {\r\n\t\t\tconst temp = JSON.stringify(this.props.app.getDiagramEngine().getModel().serialize())\r\n\t\t\tif (temp !== localStorage.getItem('model')) {\r\n\t\t\t\tlocalStorage.setItem('model', temp);\r\n\t\t\t}\r\n\t\t}, 1500)\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<S.Body>\r\n\t\t\t\t<S.Content style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t<TrayWidget >\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpaletteNodes.map((node) => {\r\n\t\t\t\t\t\t\t\tif (node.extras.type !== lastType) {\r\n\t\t\t\t\t\t\t\t\tlastType = node.extras.type\r\n\t\t\t\t\t\t\t\t\treturn <>\r\n\t\t\t\t\t\t\t\t\t\t<p style={{ margin: \"5px\" }}>--{node.extras.type}--</p>\r\n\t\t\t\t\t\t\t\t\t\t<TrayItemWidget key={node.name} model={node} name={node.name} color={node.color} />\r\n\t\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn <TrayItemWidget key={node.name} model={node} name={node.name} color={node.color} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t</TrayWidget>\r\n\t\t\t\t\t<S.Layer\r\n\t\t\t\t\t\tonDrop={(event) => {\r\n\t\t\t\t\t\t\tlet data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\r\n\t\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\t\tif (data.name === 'Diamond') {\r\n\t\t\t\t\t\t\t\t\tconsole.log('Found a diamond')\r\n\t\t\t\t\t\t\t\t\tconst node = new DiamondNodeModel();\r\n\t\t\t\t\t\t\t\t\tconst point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(point);\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\r\n\t\t\t\t\t\t\t\t} else if (data.name === 'LabelEdit') {\r\n\r\n\t\t\t\t\t\t\t\t\tconst node1 = new DefaultNodeModel('Node1', 'red');\r\n\t\t\t\t\t\t\t\t\tconst port1 = node1.addOutPort('out');\r\n\t\t\t\t\t\t\t\t\tnode1.setPosition(250, 100);\r\n\r\n\t\t\t\t\t\t\t\t\tconst node2 = new DefaultNodeModel('Node2', 'green');\r\n\t\t\t\t\t\t\t\t\tconst port2 = node2.addInPort('in');\r\n\t\t\t\t\t\t\t\t\tnode2.setPosition(800, 300);\r\n\r\n\t\t\t\t\t\t\t\t\t// link nodes together\r\n\t\t\t\t\t\t\t\t\tconst link1 = port1.link(port2);\r\n\r\n\t\t\t\t\t\t\t\t\t// !!!\r\n\t\t\t\t\t\t\t\t\t// add our custom label to link\r\n\t\t\t\t\t\t\t\t\tlink1.addLabel(\r\n\t\t\t\t\t\t\t\t\t\tnew EditableLabelModel({\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: 'Hello, I am label!'\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addAll(node1, port1, node2, port2, link1);\r\n\r\n\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconst node = new MyNodeModel(data.name, data.color);\r\n\t\t\t\t\t\t\t\t\tnode.extras = data.extras\r\n\t\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\tnode.addInPort(method)\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tconst point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(point);\r\n\t\t\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.forceUpdate();\r\n\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonDragOver={(event) => {\r\n\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t\t<DemoCanvasWidget >\r\n\t\t\t\t\t\t\t\t<CanvasWidget engine={this.props.app.getDiagramEngine()} />\r\n\t\t\t\t\t\t\t</DemoCanvasWidget>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</S.Layer>\r\n\t\t\t\t</S.Content>\r\n\t\t\t</S.Body >\r\n\t\t)\r\n\t}\r\n}\r\n","import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\n\nexport interface FlowAliasLabelWidgetProps {\n\tmodel: EditableLabelModel;\n}\n\nnamespace S {\n\t// NOTE: this CSS rules allows to interact with elements in label\n\texport const Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\n\tconst [str, setStr] = React.useState(props.model.value);\n\n\treturn (\n\t\t<S.Label>\n\t\t\t<input\n\t\t\t\tvalue={str}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst newVal = event.target.value;\n\n\t\t\t\t\t// update value both in internal component state\n\t\t\t\t\tsetStr(newVal);\n\t\t\t\t\t// and in model object\n\t\t\t\t\tprops.model.value = newVal;\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\n\t\t</S.Label>\n\t);\n};\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport { EditableLabelWidget } from './EditableLabelWidget';\n\nexport class EditableLabelFactory extends AbstractReactFactory<EditableLabelModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('editable-label');\n\t}\n\n\tgenerateModel(): EditableLabelModel {\n\t\treturn new EditableLabelModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<EditableLabelModel>): JSX.Element {\n\t\treturn <EditableLabelWidget model={event.model} />;\n\t}\n}\n","// @ts-nocheck\nimport * as React from 'react';\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport { DiagramEngine, PortModelAlignment, PortWidget } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\n\n\nexport interface DiamondNodeWidgetProps {\n\tnode: DiamondNodeModel;\n\tengine: DiagramEngine;\n\tsize?: number;\n}\n\nnamespace S {\n\texport const Port = styled.div`\n\t\twidth: 16px;\n\t\theight: 16px;\n\t\tz-index: 10;\n\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\tborder-radius: 8px;\n\t\tcursor: pointer;\n\n\t\t&:hover {\n\t\t\tbackground: rgba(0, 0, 0, 1);\n\t\t}\n\t`;\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class DiamondNodeWidget extends React.Component<DiamondNodeWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={'diamond-node'}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: 'relative',\n\t\t\t\t\twidth: this.props.size,\n\t\t\t\t\theight: this.props.size\n\t\t\t\t}}>\n\t\t\t\t<svg\n\t\t\t\t\twidth={this.props.size}\n\t\t\t\t\theight={this.props.size}\n\t\t\t\t\tdangerouslySetInnerHTML={{\n\t\t\t\t\t\t__html:\n\t\t\t\t\t\t\t`\n          <g id=\"Layer_1\">\n          </g>\n          <g id=\"Layer_2\">\n            <polygon fill=\"mediumpurple\" stroke=\"${this.props.node.isSelected() ? 'white' : '#000000'\n\t\t\t\t\t\t\t}\" stroke-width=\"3\" stroke-miterlimit=\"10\" points=\"10,` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t`,10 ` +\n\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t` ` +\n\t\t\t\t\t\t\tthis.props.size / 2 +\n\t\t\t\t\t\t\t`,` +\n\t\t\t\t\t\t\t(this.props.size - 10) +\n\t\t\t\t\t\t\t` \"/>\n          </g>\n        `\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\tleft: -8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.LEFT)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\ttop: -8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.TOP)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size - 8,\n\t\t\t\t\t\ttop: this.props.size / 2 - 8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.RIGHT)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t\t<PortWidget\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.props.size / 2 - 8,\n\t\t\t\t\t\ttop: this.props.size - 8,\n\t\t\t\t\t\tposition: 'absolute'\n\t\t\t\t\t}}\n\t\t\t\t\tport={this.props.node.getPort(PortModelAlignment.BOTTOM)}\n\t\t\t\t\tengine={this.props.engine}>\n\t\t\t\t\t<S.Port />\n\t\t\t\t</PortWidget>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { DiamondNodeWidget } from './DiamondNodeWidget';\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport * as React from 'react';\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nexport class DiamondNodeFactory extends AbstractReactFactory<DiamondNodeModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('diamond');\n\t}\n\n\tgenerateReactWidget(event: any): JSX.Element {\n\t\treturn <DiamondNodeWidget engine={this.engine} size={50} node={event.model} />;\n\t}\n\n\tgenerateModel(event: any) {\n\t\treturn new DiamondNodeModel();\n\t}\n}\n","import { DiagramEngine, PortModel } from '@projectstorm/react-diagrams';\nimport { AbstractModelFactory } from '@projectstorm/react-canvas-core';\n\nexport class SimplePortFactory extends AbstractModelFactory<PortModel, DiagramEngine> {\n\tcb: (initialConfig?: any) => PortModel;\n\n\tconstructor(type: string, cb: (initialConfig?: any) => PortModel) {\n\t\tsuper(type);\n\t\tthis.cb = cb;\n\t}\n\n\tgenerateModel(event: any): PortModel {\n\t\treturn this.cb(event.initialConfig);\n\t}\n}\n","import * as SRD from '@projectstorm/react-diagrams';\r\nimport { PortModelAlignment } from '@projectstorm/react-diagrams';\r\nimport { EditableLabelFactory } from './custom-label/EditableLabelFactory';\r\nimport { DiamondNodeFactory } from './diamond/DiamondNodeFactory';\r\nimport { DiamondPortModel } from './diamond/DiamondPortModel';\r\nimport { SimplePortFactory } from './diamond/SimplePortFactory';\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Application {\r\n\tprotected activeModel: any;//SRD.DiagramModel\r\n\tprotected diagramEngine: SRD.DiagramEngine;\r\n\r\n\tconstructor() {\r\n\t\tthis.diagramEngine = SRD.default();\r\n\t\tthis.diagramEngine\r\n\t\t\t.getPortFactories()\r\n\t\t\t.registerFactory(new SimplePortFactory('diamond', (config) => new DiamondPortModel(PortModelAlignment.LEFT)));\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new DiamondNodeFactory());\r\n\t\tthis.diagramEngine.getLabelFactories().registerFactory(new EditableLabelFactory());\r\n\t\tthis.newModel();\r\n\t}\r\n\r\n\tpublic newModel() {\r\n\t\tthis.activeModel = new SRD.DiagramModel();\r\n\t\tthis.diagramEngine.setModel(this.activeModel);\r\n\t}\r\n\r\n\tpublic getActiveDiagram(): SRD.DiagramModel {\r\n\t\treturn this.activeModel;\r\n\t}\r\n\r\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\r\n\t\treturn this.diagramEngine;\r\n\t}\r\n}\r\n","import * as React from 'react';\n\nimport { BodyWidget } from './BodyWidget';\nimport { Application } from './Application';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default () => {\n\tvar app = new Application();\n\treturn <BodyWidget app={app} />;\n};\n","import Code from \"../components/Code\"\r\nimport DiagramWithPalette from '../components/react-diagrams/index';\r\n\r\nexport default function EditorPage() {\r\n  return <div className=\"float-container\" >\r\n    <div className=\"float-child-left\">\r\n      <DiagramWithPalette />\r\n    </div>\r\n    <div className=\"float-child-right\">\r\n      <Code />\r\n    </div>\r\n  </div>\r\n}","export default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4IoT!\r\n        </h2>\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/staticCYM.6a3ccd64.png\";","import modelsDiagram from '../assets/staticCYM.png'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/state.da9f951e.png\";","import stateDiagram from '../assets/state.png'\r\nexport default function StatePage() {\r\n    return <div>\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","export default function PalettePage() {\r\n    return <div>\r\n        <h3>\r\n            Testing zone for now.\r\n        </h3>\r\n        <div style={{ width: '80vh', height: '60vh' }}>\r\n        </div>\r\n    </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\n\r\nimport history from './history'\r\n\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport StatePage from './pages/State';\r\nimport PalettePage from './pages/Palette';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <Route path='/models' exact component={ModelsPage} />\r\n          <Route path='/state' exact component={StatePage} />\r\n          <Route path='/palette' exact component={PalettePage} />\r\n          <Route path='/editor' component={EditorPage} />\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}