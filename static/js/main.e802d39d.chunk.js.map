{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","GlobalContext.tsx","components/Code.tsx","components/react-diagrams/EditableLabelModel.ts","components/react-diagrams/EditableLabelWidget.tsx","components/react-diagrams/EditableLabelFactory.tsx","components/Diagram.tsx","pages/Editor.tsx","assets/master.svg","pages/Home.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","GlobalContext","createContext","model","setModel","a","Code","props","useEffect","Prism","highlightAll","className","language","code","EditableLabelModel","options","type","this","data","LabelModel","S","styled","div","EditableLabelWidget","React","str","setStr","Label","newVal","target","onClick","action","EditableLabelFactory","AbstractReactFactory","useContext","engine","createEngine","getLabelFactories","registerFactory","nextModel","DiagramModel","n0","DefaultNodeModel","p00","addOutPort","setPosition","n2","p20","addInPort","p21","p23","n3","p30","n5","n4","p40","addAll","link","console","log","serialize","width","height","generateCode","links","Object","entries","layers","models","forEach","x","nodes","controller","find","name","add","message","m","getLink","linkID","l","id","getPort","nodeID","portID","n","ports","p","port","toPort","targetPort","toNode","parentNode","conditionNode","source","sourcePort","getValue","outcome","getOutcome","replace","original","level","split","line","includes","repeat","join","formatCode","EditorPage","keys","length","HomePage","src","masterDiagram","alt","backgroundColor","App","providerValue","useMemo","path","exact","component","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e802d39d.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { AppBar } from '@material-ui/core';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Editor\" value=\"/editor\" icon={<EditIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import { createContext } from \"react\";\r\n\r\nexport const GlobalContext = createContext({\r\n    model: {} as object,\r\n    setModel: (a: any) => { },\r\n});","import { useEffect } from \"react\";\r\nimport Prism from \"prismjs\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\n// import \"./prism.css\";\r\nexport default function Code(props: { code: string, language: string }) {\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n    }, []);\r\n    return (\r\n        <div className=\"Code\">\r\n            <pre className=\"line-numbers\">\r\n                <code className={`language-${props.language}`}>{props.code}</code>\r\n            </pre>\r\n        </div>\r\n    );\r\n}","import { LabelModel } from '@projectstorm/react-diagrams';\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\n\nexport interface EditableLabelOptions extends BaseModelOptions {\n\tvalue?: string;\n}\n\nexport class EditableLabelModel extends LabelModel {\n\tvalue: string;\n\n\tconstructor(options: EditableLabelOptions = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\ttype: 'editable-label'\n\t\t});\n\t\tthis.value = options.value || '';\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tvalue: this.value\n\t\t};\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>): void {\n\t\tsuper.deserialize(event);\n\t\tthis.value = event.data.value;\n\t}\n}\n","import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\n\nexport interface FlowAliasLabelWidgetProps {\n\tmodel: EditableLabelModel;\n}\n\nnamespace S {\n\t// NOTE: this CSS rules allows to interact with elements in label\n\texport const Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\n\tconst [str, setStr] = React.useState(props.model.value);\n\n\treturn (\n\t\t<S.Label>\n\t\t\t<input\n\t\t\t\tvalue={str}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst newVal = event.target.value;\n\n\t\t\t\t\t// update value both in internal component state\n\t\t\t\t\tsetStr(newVal);\n\t\t\t\t\t// and in model object\n\t\t\t\t\tprops.model.value = newVal;\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\n\t\t</S.Label>\n\t);\n};\n","import * as React from 'react';\nimport { AbstractReactFactory, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport { EditableLabelWidget } from './EditableLabelWidget';\n\nexport class EditableLabelFactory extends AbstractReactFactory<EditableLabelModel, DiagramEngine> {\n\tconstructor() {\n\t\tsuper('editable-label');\n\t}\n\n\tgenerateModel(): EditableLabelModel {\n\t\treturn new EditableLabelModel();\n\t}\n\n\tgenerateReactWidget(event: GenerateWidgetEvent<EditableLabelModel>): JSX.Element {\n\t\treturn <EditableLabelWidget model={event.model} />;\n\t}\n}\n","import { useContext, useEffect } from 'react';\r\nimport { GlobalContext } from '../GlobalContext';\r\nimport createEngine, {\r\n    DefaultNodeModel,\r\n    DiagramModel\r\n} from '@projectstorm/react-diagrams';\r\n\r\nimport {\r\n    CanvasWidget\r\n} from '@projectstorm/react-canvas-core';\r\nimport { EditableLabelFactory } from './react-diagrams/EditableLabelFactory';\r\n\r\n\r\nexport default function SimpleBottomNavigation() {\r\n\r\n    const { model, setModel } = useContext(GlobalContext)\r\n    const engine = createEngine();\r\n\r\n    engine.getLabelFactories().registerFactory(new EditableLabelFactory());\r\n\r\n    const nextModel = new DiagramModel();\r\n\r\n    const n0 = new DefaultNodeModel('Arduino', 'green');\r\n    const p00 = n0.addOutPort('setup()');\r\n    n0.addOutPort('loop()');\r\n    n0.setPosition(50, 70);\r\n\r\n    const n2 = new DefaultNodeModel('Condition', 'grey')\r\n    const p20 = n2.addInPort('if <= 20');\r\n    const p21 = n2.addInPort('value');\r\n    const p23 = n2.addOutPort('True');\r\n    n2.addOutPort('False');\r\n    n2.setPosition(230, 100)\r\n\r\n    const n3 = new DefaultNodeModel('Led', 'red');\r\n    const p30 = n3.addInPort('set(bool)');\r\n    n3.setPosition(400, 70);\r\n\r\n    const n5 = new DefaultNodeModel('Servo', 'green');\r\n    n5.addInPort('turn(int)');\r\n    n5.setPosition(400, 170);\r\n\r\n\r\n\r\n    const n4 = new DefaultNodeModel('TemperatureSensor', 'Blue');\r\n    const p40 = n4.addOutPort('getValue()');\r\n    n4.setPosition(30, 170);\r\n\r\n    nextModel.addAll(n0, n2, p00.link(p20), p23.link(p30), p40.link(p21), n3, n4, n5);\r\n    console.log('Setting Engine')\r\n    engine.setModel(nextModel);\r\n\r\n    useEffect(() => {\r\n        console.log('Rendering Diagram')\r\n        if (nextModel.serialize() !== model) {\r\n            setModel(nextModel.serialize())\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{ width: '100%', height: '100%' }}>\r\n            {/* <Button\r\n                onClick={() => {\r\n                    setModel(nextModel.serialize());\r\n                }}>Save</Button> */}\r\n            <CanvasWidget className='canvas' engine={engine} />\r\n        </div>\r\n    );\r\n}","import { useContext } from 'react';\r\nimport { GlobalContext } from '../GlobalContext';\r\n\r\nimport Code from \"../components/Code\"\r\nimport Diagram from \"../components/Diagram\";\r\n\r\nfunction generateCode(model: any): string {\r\n\r\n  // console.log('Generating code from model:', model)\r\n  let code = ''\r\n  // let code = \"Model: \" + JSON.stringify(model) + \"\\n\\n\\n\"\r\n  let links: any[] = []\r\n  Object.entries(model.layers[0].models).forEach((x: any) => {\r\n    links.push(x[1])\r\n  })\r\n  let nodes: any[] = []\r\n  Object.entries(model.layers[1].models).forEach((x: any) => {\r\n    nodes.push(x[1])\r\n  })\r\n  let controller = nodes.find((x: any) => x.name === 'Arduino')\r\n  // console.log('Controller:', controller, 'Links:', links, 'Nodes:', nodes)\r\n\r\n\r\n\r\n  let add = (...message: string[]) => {\r\n    message.forEach((m) => {\r\n      code += m;\r\n    });\r\n    code += \"\\n\";\r\n  };\r\n  let getLink = (linkID: string) => {\r\n    return links.find(l => l.id === linkID)\r\n  }\r\n  let getPort = (nodeID: string, portID: string) => {\r\n    return nodes.find((n: any) => n.id === nodeID).ports\r\n      .find((p: any) => p.id === portID);\r\n  }\r\n  let getNode = (nodeID: string) => {\r\n    return nodes.find((n: any) => n.id === nodeID)\r\n  }\r\n  let getValue = (conditionNode: any) => {\r\n    let linkID = conditionNode.ports.find((p: any) => p.name === 'value').links[0]\r\n    let link = getLink(linkID)\r\n    return getPort(link.source, link.sourcePort)\r\n  }\r\n  let getOutcome = (conditionNode: any) => {\r\n    let linkID = conditionNode.ports.find((p: any) => p.name === 'True').links[0]\r\n    let link = getLink(linkID)\r\n    return getPort(link.target, link.targetPort)\r\n  }\r\n\r\n\r\n\r\n  controller.ports.forEach((port: any) => {\r\n    add(port.label, \"{\\n\");\r\n\r\n    port.links.forEach((l: any) => {\r\n      let link = getLink(l);\r\n      let toPort = getPort(link.target, link.targetPort)\r\n      let toNode = getNode(toPort.parentNode)\r\n\r\n\r\n\r\n      if (toNode.name === \"Condition\") {\r\n        let value = getValue(toNode)\r\n        let outcome = getOutcome(toNode)\r\n\r\n        add('if (', value.name, toPort.name.replace('if', ''), ') {')\r\n\r\n\r\n        add(outcome.label)\r\n\r\n\r\n\r\n        add(\"}\\n\");\r\n\r\n      }\r\n      // add(link.target)\r\n\r\n\r\n\r\n\r\n\r\n\r\n    })\r\n\r\n    add(\"}\\n\");\r\n    // getToPorts(port)\r\n\r\n  })\r\n\r\n  //     element.methods.forEach((method) => {\r\n\r\n  //       console.log(\"................................\", this.getToElements(method));\r\n\r\n  //       this.getToElements(method).forEach((toElement) => {\r\n  //         console.log(\"getToElements:\", method, toElement);\r\n\r\n  //         let relation = this.relations.find((rel) => rel.toElement == toElement);\r\n\r\n  //         console.log(\"-------------------------------------method, \", method);\r\n  //         console.log(\"toElement, \", toElement);\r\n  //         console.log(\"relation, \", relation);\r\n  //         if (toElement.name && (toElement.name.includes(\"if\") || toElement.name.includes(\"while\")) && relation) {\r\n  //           const conditionText = toElement.name.includes(\"if\") ? \"if\" : \"while\"; //todo add more\r\n\r\n  //           // let value = toElement.methodText;\r\n\r\n  //           let value = this.relations.find(\r\n  //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"Value\"\r\n  //           ).toElement.methodText;\r\n\r\n  //           let ifTrues = this.relations.filter(\r\n  //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"True\"\r\n  //           );\r\n  //           console.log(\"trues: --------------------------------\");\r\n  //           ifTrues.forEach((t) => {\r\n  //             console.log(t);\r\n  //             console.log(t.coordinates.h, t.coordinates.w, t.coordinates.x, t.coordinates.y);\r\n\r\n  //             console.table(t.toElement);\r\n  //           });\r\n  //           console.log(\"--------------------------------\");\r\n\r\n  //           let ifFalses = this.relations.filter(\r\n  //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"False\"\r\n  //           );\r\n\r\n  //           let condition = toElement.name.replace(\"if\", \"\").replace(\"while\", \"\").replace(\" \", \"\");\r\n\r\n  //           p(conditionText, \" (\", value, \" \", condition, \"){ \\n\");\r\n\r\n  //           ifTrues.forEach((ifTrue) => {\r\n  //             p(ifTrue.toElement.name || ifTrue.toElement.parentName, \";\");\r\n  //           });\r\n\r\n  //           ifFalses.forEach((ifFalse) => {\r\n  //             p(\"else {\");\r\n  //             p(ifFalse.toElement.name || ifFalse.toElement.parentName, \";\");\r\n  //           });\r\n\r\n  //           p(\"}\");\r\n  //         } else {\r\n  //           p(toElement.methodText, \";\");\r\n  //           p(\"\\n}\");\r\n  //         }\r\n  //       });\r\n\r\n  //       p(\"}\\n\");\r\n  //     });\r\n  //   };\r\n\r\n\r\n  //   let usedDigital = 0;\r\n  //   let usedAnalog = 0;\r\n  //   let usedLibraries = [];\r\n\r\n  //   this.components.forEach((component) => {\r\n  //     usedDigital += parseInt(component.digitalPorts);\r\n  //     usedAnalog += parseInt(component.analogPorts);\r\n  //     console.log(component);\r\n\r\n  //     if (component.type == \"component\") usedLibraries.push(component.name);\r\n  //   });\r\n\r\n  //   usedLibraries.forEach((lib) => {\r\n  //     p(\"#include <\" + lib + \".h>\");\r\n  //   });\r\n  //   p(\"// Code generated for Arduino \", this.arduino.model);\r\n  //   p(\r\n  //     \"// with \",\r\n  //     this.arduino.digitalPorts,\r\n  //     \" digital ports in total with \",\r\n  //     usedDigital,\r\n  //     \" in use and \",\r\n  //     this.arduino.digitalPorts - usedDigital,\r\n  //     \" free\"\r\n  //   );\r\n  //   p(\r\n  //     \"// and \",\r\n  //     this.arduino.analogPorts,\r\n  //     \" analog ports in total with \",\r\n  //     usedAnalog,\r\n  //     \" in use and \",\r\n  //     this.arduino.analogPorts - usedAnalog,\r\n  //     \" free\"\r\n  //   );\r\n\r\n  //   generateDecision(this.arduino);\r\n\r\n\r\n  function formatCode(original: string) {\r\n    let code: any[] = [];\r\n    let level = 0;\r\n    let tab = \"    \";\r\n    original.split(\"\\n\").forEach((line) => {\r\n      if (line.includes(\"}\")) {\r\n        level--;\r\n      }\r\n      code.push(tab.repeat(level) + line);\r\n      if (line.includes(\"{\")) {\r\n        level++;\r\n      }\r\n    });\r\n    return code.join(\"\\n\");\r\n  }\r\n  return formatCode(code);\r\n}\r\nexport default function EditorPage() {\r\n  const { model } = useContext(GlobalContext)\r\n  return <div className=\"float-container\" >\r\n    <div className=\"float-child-left\">\r\n      <Diagram />\r\n    </div>\r\n    <div className=\"float-child-right\">\r\n      {Object.keys(model).length === 0 ? null : <Code code={generateCode(model)} language=\"clike\" />}\r\n    </div>\r\n  </div>\r\n}","export default __webpack_public_path__ + \"static/media/master.ed79098a.svg\";","import masterDiagram from '../assets/master.svg'\r\nexport default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4IoT!\r\n        </h2>\r\n        <div>\r\n            <img src={masterDiagram} alt=\"Architecture Diagram\" style={{ backgroundColor: \"white\" }} />\r\n        </div>\r\n\r\n    </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\n\r\nimport history from './history'\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport { useMemo, useState } from 'react';\r\n\r\nexport default function App() {\r\n  const [model, setModel] = useState({})\r\n\r\n  const providerValue = useMemo(() => ({\r\n    model, setModel\r\n  }), [model])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <GlobalContext.Provider value={providerValue}>\r\n            <Route path='/editor' component={EditorPage} />\r\n          </GlobalContext.Provider>\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}