{"version":3,"sources":["components/NavigationBar.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/myNode/MyLinkModel.ts","components/react-diagrams/myNode/MyPortModel.ts","components/react-diagrams/myNode/MyNodeModel.ts","components/react-diagrams/helpers/DemoCanvasWidget.tsx","components/react-diagrams/editableNode/MyEditableNodeModel.ts","paletteNodes.js","components/PrismEdit.tsx","components/Code.tsx","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/custom-label/EditableLabelModel.ts","components/react-diagrams/custom-label/EditableLabelWidget.tsx","components/react-diagrams/custom-label/EditableLabelFactory.tsx","components/react-diagrams/custom-node/custom_components/EditableSingleField.tsx","components/react-diagrams/custom-node/custom_components/SelectableField.tsx","components/react-diagrams/editableNode/MyEditableNodeWidget.tsx","components/react-diagrams/editableNode/MyEditableNodeFactory.tsx","components/react-diagrams/Application.ts","pages/Editor.tsx","assets/flow.svg","assets/cym_s.svg","pages/Home.tsx","assets/cym_s_extended.svg","pages/Models.tsx","assets/cym_d.svg","pages/State.tsx","pages/Palette.tsx","App.tsx","index.tsx"],"names":["SimpleBottomNavigation","pathname","window","location","useState","value","setValue","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","showLabels","BottomNavigationAction","component","Link","label","to","icon","S","styled","div","p","TrayItemWidget","Tray","this","props","node","draggable","onDragStart","dataTransfer","setData","JSON","stringify","setDragImage","Image","className","name","fontSize","id","type","place","width","height","backgroundColor","border","borderBottom","extras","library","ins","length","map","port","outs","React","MyLinkModel","options","selectedColor","curvyness","getOptions","alignment","PortModelAlignment","RIGHT","LEFT","TOP","points","curve","BezierCurve","setSource","getFirstPoint","getPosition","setTarget","getLastPoint","setSourceControl","clone","setTargetControl","sourcePort","getSourceControl","translate","calculateControlOffset","getSourcePort","targetPort","getTargetControl","getTargetPort","getSVGCurve","data","fireEvent","LinkModel","MyPortModel","in","PortModel","MyNodeModel","portsIn","portsOut","lookupTable","splice","indexOf","push","after","addPort","_","portsInOrder","getPortFromID","portsOutOrder","getID","NodeModel","background","css","DemoCanvasWidget","styles","Expand","Container","children","MyEditableNodeModel","content","selectableOptions","forEach","method","addInPort","addOutPort","console","log","Array","from","keys","x","toString","analogPorts","digitalPorts","Edit","editorRef","useRef","code","setCode","onEditableChange","useCallback","slice","useEditable","disabled","indentation","defaultProps","language","tokens","getTokenProps","getLineProps","ref","line","i","Fragment","filter","token","empty","key","Code","model","Object","links","entries","layers","models","nodes","logics","components","controllers","libraries","constants","usedDigital","usedAnalog","n","instance","toLowerCase","replace","c","includes","toUpperCase","controller","add","message","m","addOnTop","getLink","linkID","find","l","getPort","nodeID","portID","ports","error","getNode","getCoditionalValue","conditionNode","portName","link","source","parent","getParent","getOutcome","ifThis","target","childNode","parentNode","removeTypes","functionName","substring","params","split","result","param","thisParam","String","callWithParameters","contents","toPort","toNode","shift","processLink","fromPort","fromNode","xValue","yValue","outcome2","toNode2","outcome3","toNode3","lib","comp","logic","constant","original","level","repeat","join","indentCode","generateCode","parse","useEffect","Prism","highlightAll","PrismEdit","ScrollArea","require","default","BodyWidget","setModel","rerender","setRerender","rawModel","app","getDiagramEngine","getModel","serialize","stringModel","groups","Set","paletteNodes","Body","Content","speed","contentClassName","horizontal","smoothScrolling","verticalScrollbarStyle","group","marginBottom","margin","Button","variant","size","onClick","temp","localStorage","setItem","getActiveDiagram","deserializeModel","getItem","Layer","onDrop","getData","setPosition","getRelativeMousePoint","addNode","onDragOver","preventDefault","engine","EditableLabelModel","LabelModel","EditableLabelWidget","str","setStr","Label","newVal","action","EditableLabelFactory","AbstractReactFactory","Editor","onBlurOrEnter","autoFocus","inputStyle","padding","borderStyle","borderWidth","borderColor","onBlur","onKeyDown","keyCode","EditableSingleField","state","beingEdited","editingKey","elementKey","fontStyle","isAbstract","y","SelectableField","selected","MyEditableNodeWidget","divElement","generatePort","_editableObjectDoubleClick","editingSomething","setState","_contentOnChange","evt","nodeModel","currentTarget","_onBlurOrEnter","variableType","bind","Node","isSelected","Title","onDoubleClick","TitleName","Ports","PortsContainer","getInPorts","getOutPorts","MyEditableNodeFactory","Application","activeModel","diagramEngine","SRD","getLabelFactories","registerFactory","getNodeFactories","newModel","EditorPage","HomePage","src","flowDiagram","alt","maxHeight","maxWidth","cym_s","ModelsPage","modelsDiagram","StatePage","stateDiagram","PalettePage","display","gridTemplateColumns","gridGap","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.553d264c.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport { AppBar } from '@material-ui/core';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const pathname = window.location.pathname; // in case user visits the path directly. The BottomNavBar is able to follow suit.\r\n    const [value, setValue] = useState(pathname);\r\n    const handleChange = (event: any, newValue: any) => {\r\n        setValue(newValue);\r\n    };\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={handleChange}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction component={Link} label=\"Home\" to=\"/mdd4/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Models\" to=\"/mdd4/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"State\" to=\"/mdd4/state\" icon={<SwapHorizIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Palette\" to=\"/mdd4/palette\" icon={<PaletteIcon />} />\r\n                <BottomNavigationAction component={Link} label=\"Editor\" to=\"/mdd4/editor\" icon={<EditIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport * as React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\r\nimport ReactTooltip from 'react-tooltip';\r\nexport interface TrayItemWidgetProps {\r\n\tnode: any;\r\n}\r\n\r\nnamespace S {\r\n\texport const Tray = styled.div<{ color: string }>`\r\n\t\tcolor: white;\r\n\t\tfont-family: Helvetica, Arial;\r\n\t\tfont-size:0.6em;\r\n\t\tpadding: 2px 0px;\r\n\t\tmargin:\t 5px 10px ;\r\n\t\tborder: solid 1px ${(p) => p.color};\r\n\t\tborder-radius: 100px;\r\n\t\tmargin-bottom: 2px;\r\n\t\tcursor: pointer;\r\n\t\tbackground: rgb(20, 20, 20);\r\n\t`;\r\n}\r\n\r\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\r\n\trender() {\r\n\t\t// const label = this.props.node.name.includes(\" \") && this.props.node.name.length > 15 ? (<div>\r\n\t\t// \t{this.props.node.name.substr(0, this.props.node.name.indexOf(' '))}\r\n\t\t// \t<br />\r\n\t\t// \t{this.props.node.name.substr(this.props.node.name.indexOf(' ') + 1)}</div>) : this.props.node.name\r\n\t\treturn (\r\n\t\t\t<S.Tray\r\n\t\t\t\tcolor={this.props.node.color || 'red'}\r\n\t\t\t\tdraggable={true}\r\n\t\t\t\tonDragStart={(event) => {\r\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.node));\r\n\t\t\t\t\tevent.dataTransfer.setDragImage(new Image(), 10, 10);\r\n\t\t\t\t}}\r\n\t\t\t\tclassName=\"tray-item\">\r\n\r\n\t\t\t\t{this.props.node.name}\r\n\r\n\t\t\t\t<a data-tip data-for={'tip-' + this.props.node.name} >\r\n\t\t\t\t\t<OpenInNewIcon style={{ fontSize: '1rem' }} />\r\n\t\t\t\t</a>\r\n\t\t\t\t<ReactTooltip id={'tip-' + this.props.node.name} type='light' place=\"bottom\">\r\n\t\t\t\t\t<div style={{ width: '300px', height: '300px', backgroundColor: 'white', border: 'solid', fontSize: '1.3em' }}>\r\n\t\t\t\t\t\t<div style={{ width: '100%', borderBottom: 'solid 3px', fontSize: '2em' }}>\r\n\t\t\t\t\t\t\t{this.props.node.name}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div style={{ width: '100%', borderBottom: 'solid 2px' }}>\r\n\t\t\t\t\t\t\tLibrary={this.props.node.extras.library}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{this.props.node.ins && this.props.node.ins.length > 0 &&\r\n\t\t\t\t\t\t\tthis.props.node.ins.map((port: any) => {\r\n\t\t\t\t\t\t\t\treturn <div key={port}>\r\n\t\t\t\t\t\t\t\t\t<p>{port}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{this.props.node.outs && this.props.node.outs.length > 0 &&\r\n\t\t\t\t\t\t\tthis.props.node.outs.map((port: any) => {\r\n\t\t\t\t\t\t\t\treturn <div key={port}>\r\n\t\t\t\t\t\t\t\t\t<p>{port}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{/* {JSON.stringify(this.props.node)} */}\r\n\t\t\t\t</ReactTooltip>\r\n\t\t\t</S.Tray>\r\n\t\t);\r\n\t}\r\n}\r\n","// LabelModel,\r\nimport {\r\n\tLinkModel,\r\n\tLinkModelGenerics,\r\n\tLinkModelListener,\r\n\tPortModel,\r\n\tPortModelAlignment\r\n} from '@projectstorm/react-diagrams-core';\r\n// import { DefaultLabelModel } from './DefaultLabelModel';\r\nimport { BezierCurve } from '@projectstorm/geometry';\r\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nexport interface DefaultLinkModelListener extends LinkModelListener {\r\n\t// colorChanged?(event: BaseEntityEvent<DefaultLinkModel> & { color: null | string }): void;\r\n\r\n\t// widthChanged?(event: BaseEntityEvent<DefaultLinkModel> & { width: 0 | number }): void;\r\n}\r\n\r\nexport interface DefaultLinkModelOptions extends BaseModelOptions {\r\n\twidth?: number;\r\n\tcolor?: string;\r\n\tselectedColor?: string;\r\n\tcurvyness?: number;\r\n\ttype?: string;\r\n\ttestName?: string;\r\n}\r\n\r\nexport interface DefaultLinkModelGenerics extends LinkModelGenerics {\r\n\tLISTENER: DefaultLinkModelListener;\r\n\tOPTIONS: DefaultLinkModelOptions;\r\n}\r\n\r\nexport class MyLinkModel extends LinkModel<DefaultLinkModelGenerics> {\r\n\tconstructor(options: DefaultLinkModelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\ttype: 'default',\r\n\t\t\twidth: options.width || 3,\r\n\t\t\tcolor: options.color || 'gray',\r\n\t\t\tselectedColor: options.selectedColor || 'rgb(0,192,255)',\r\n\t\t\tcurvyness: 50,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tcalculateControlOffset(port: PortModel): [number, number] {\r\n\t\tif (port.getOptions().alignment === PortModelAlignment.RIGHT) {\r\n\t\t\treturn [this.options.curvyness || 0, 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.LEFT) {\r\n\t\t\treturn [-(this.options.curvyness || 0), 0];\r\n\t\t} else if (port.getOptions().alignment === PortModelAlignment.TOP) {\r\n\t\t\treturn [0, -(this.options.curvyness || 0)];\r\n\t\t}\r\n\t\treturn [0, this.options.curvyness || 0];\r\n\t}\r\n\r\n\tgetSVGPath(): string | undefined {\r\n\t\tif (this.points.length === 2) {\r\n\t\t\tconst curve = new BezierCurve();\r\n\t\t\tcurve.setSource(this.getFirstPoint().getPosition());\r\n\t\t\tcurve.setTarget(this.getLastPoint().getPosition());\r\n\t\t\tcurve.setSourceControl(this.getFirstPoint().getPosition().clone());\r\n\t\t\tcurve.setTargetControl(this.getLastPoint().getPosition().clone());\r\n\r\n\t\t\tif (this.sourcePort) {\r\n\t\t\t\tcurve.getSourceControl().translate(...this.calculateControlOffset(this.getSourcePort()));\r\n\t\t\t}\r\n\r\n\t\t\tif (this.targetPort) {\r\n\t\t\t\tcurve.getTargetControl().translate(...this.calculateControlOffset(this.getTargetPort()));\r\n\t\t\t}\r\n\t\t\treturn curve.getSVGCurve();\r\n\t\t}\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\twidth: this.options.width,\r\n\t\t\tcolor: this.options.color,\r\n\t\t\tcurvyness: this.options.curvyness,\r\n\t\t\tselectedColor: this.options.selectedColor\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.color = event.data.color;\r\n\t\tthis.options.width = event.data.width;\r\n\t\tthis.options.curvyness = event.data.curvyness;\r\n\t\tthis.options.selectedColor = event.data.selectedColor;\r\n\t}\r\n\tsetWidth(width: number) {\r\n\t\tthis.options.width = width;\r\n\t\tthis.fireEvent({ width }, 'widthChanged');\r\n\t}\r\n\r\n\tsetColor(color: string) {\r\n\t\tthis.options.color = color;\r\n\t\tthis.fireEvent({ color }, 'colorChanged');\r\n\t}\r\n}\r\n","import {\r\n\tLinkModel,\r\n\tPortModel,\r\n\tPortModelAlignment,\r\n\tPortModelGenerics,\r\n\tPortModelOptions\r\n} from '@projectstorm/react-diagrams-core';\r\nimport { MyLinkModel } from './MyLinkModel';\r\nimport { DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface DefaultPortModelOptions extends PortModelOptions {\r\n\tlabel?: string;\r\n\tin?: boolean;\r\n}\r\n\r\nexport interface DefaultPortModelGenerics extends PortModelGenerics {\r\n\tOPTIONS: DefaultPortModelOptions;\r\n}\r\n\r\nexport class MyPortModel extends PortModel<DefaultPortModelGenerics> {\r\n\tconstructor(isIn: boolean, name?: string, label?: string);\r\n\tconstructor(options: DefaultPortModelOptions);\r\n\tconstructor(options: DefaultPortModelOptions | boolean, name?: string, label?: string) {\r\n\t\tif (!!name) {\r\n\t\t\toptions = {\r\n\t\t\t\tin: !!options,\r\n\t\t\t\tname: name,\r\n\t\t\t\tlabel: label\r\n\t\t\t};\r\n\t\t}\r\n\t\toptions = options as DefaultPortModelOptions;\r\n\t\tsuper({\r\n\t\t\tlabel: options.label || options.name,\r\n\t\t\talignment: options.in ? PortModelAlignment.LEFT : PortModelAlignment.RIGHT,\r\n\t\t\ttype: 'default',\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>) {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.options.in = event.data.in;\r\n\t\tthis.options.label = event.data.label;\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tin: this.options.in,\r\n\t\t\tlabel: this.options.label\r\n\t\t};\r\n\t}\r\n\r\n\tcanLinkToPort(port: PortModel): boolean {\r\n\t\t// if (port instanceof DefaultPortModel) {\r\n\t\t// \treturn this.options.in !== port.getOptions().in;\r\n\t\t// }\r\n\t\treturn true;\r\n\t}\r\n\r\n\tcreateLinkModel(): LinkModel {\r\n\t\tconst link = new MyLinkModel();\r\n\t\t// let label = new DefaultLabelModel();\r\n\t\t// label.setLabel(\"I'm a sad label\");\r\n\t\t// link.addLabel(label)\r\n\t\treturn link\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from './MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    protected portsIn: MyPortModel[];\r\n    protected portsOut: MyPortModel[];\r\n    extras: any;\r\n\r\n    constructor(name: string, color: string);\r\n    constructor(options?: DefaultNodeModelOptions);\r\n    constructor(options: any = {}, color?: string) {\r\n        if (typeof options === 'string') {\r\n            options = {\r\n                name: options,\r\n                color: color\r\n            };\r\n        }\r\n        super({\r\n            type: 'default',\r\n            name: 'Untitled',\r\n            color: 'rgb(0,192,255)',\r\n            ...options\r\n        });\r\n        this.portsOut = [];\r\n        this.portsIn = [];\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras\r\n        };\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","import * as React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { css, Global } from '@emotion/react';\r\n\r\nexport interface DemoCanvasWidgetProps {\r\n\tcolor?: string;\r\n\tbackground?: string;\r\n}\r\n\r\nnamespace S {\r\n\texport const Container = styled.div<{ color: string; background: string }>`\r\n\t\theight: 100%;\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tbackground-size: 50px 50px;\r\n\t\tdisplay: flex;\r\n\r\n\t\t> * {\r\n\t\t\theight: 100%;\r\n\t\t\tmin-height: 100%;\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\r\n\t\tbackground-image: linear-gradient(\r\n\t\t\t\t0deg,\r\n\t\t\t\ttransparent 24%,\r\n\t\t\t\t${(p) => p.color} 25%,\r\n\t\t\t\t${(p) => p.color} 26%,\r\n\t\t\t\ttransparent 27%,\r\n\t\t\t\ttransparent 74%,\r\n\t\t\t\t${(p) => p.color} 75%,\r\n\t\t\t\t${(p) => p.color} 76%,\r\n\t\t\t\ttransparent 77%,\r\n\t\t\t\ttransparent\r\n\t\t\t),\r\n\t\t\tlinear-gradient(\r\n\t\t\t\t90deg,\r\n\t\t\t\ttransparent 24%,\r\n\t\t\t\t${(p) => p.color} 25%,\r\n\t\t\t\t${(p) => p.color} 26%,\r\n\t\t\t\ttransparent 27%,\r\n\t\t\t\ttransparent 74%,\r\n\t\t\t\t${(p) => p.color} 75%,\r\n\t\t\t\t${(p) => p.color} 76%,\r\n\t\t\t\ttransparent 77%,\r\n\t\t\t\ttransparent\r\n\t\t\t);\r\n\t`;\r\n\r\n\texport const Expand = css`\r\n\t\thtml,\r\n\t\tbody,\r\n\t\t#root {\r\n\t\t\theight: 100%;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<Global styles={S.Expand} />\r\n\t\t\t\t<S.Container\r\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\r\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\r\n\t\t\t\t\t{this.props.children}\r\n\t\t\t\t</S.Container>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n","import * as _ from 'lodash';\r\nimport { NodeModel, NodeModelGenerics, PortModelAlignment } from '@projectstorm/react-diagrams-core';\r\nimport { BasePositionModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\nimport { MyPortModel } from '../myNode/MyPortModel';\r\n\r\nexport interface DefaultNodeModelOptions extends BasePositionModelOptions {\r\n    name?: string;\r\n    color?: string;\r\n}\r\n\r\nexport interface DefaultNodeModelGenerics extends NodeModelGenerics {\r\n    OPTIONS: DefaultNodeModelOptions;\r\n}\r\n\r\nexport class MyEditableNodeModel extends NodeModel<DefaultNodeModelGenerics> {\r\n    portsIn: MyPortModel[] = [];\r\n    portsOut: MyPortModel[] = [];\r\n    content: Object;\r\n    extras: any;\r\n    selectableOptions: string[];\r\n    constructor(name: string, color: string, extras: any, ins: any[], outs: any[]) {\r\n        super({\r\n            type: 'MyEditable',\r\n            name: name,\r\n            color: color,\r\n        });\r\n        this.extras = extras;\r\n\r\n        ins.forEach((method: string) => {\r\n            this.addInPort(method)\r\n        });\r\n        outs.forEach((method: string) => {\r\n            this.addOutPort(method)\r\n        });\r\n\r\n        console.log('creating', this.portsOut, name, outs[0], color)\r\n        switch (outs[0]) {\r\n            case 'bool':\r\n                this.content = { name: 'boolName', value: 'true' }\r\n                this.selectableOptions = ['true', 'false'];\r\n                break;\r\n            case 'int':\r\n                this.content = { name: 'name', value: '0' }\r\n                this.selectableOptions = Array.from(Array(10).keys()).map(x => x.toString())\r\n                break;\r\n            default:\r\n                this.content = { name: '', value: '' }\r\n                this.selectableOptions = ['something', 'went wrong'];\r\n                break;\r\n        }\r\n    }\r\n\r\n    doClone(lookupTable: {}, clone: any): void {\r\n        clone.portsIn = [];\r\n        clone.portsOut = [];\r\n        super.doClone(lookupTable, clone);\r\n    }\r\n\r\n    removePort(port: MyPortModel): void {\r\n        super.removePort(port);\r\n        if (port.getOptions().in) {\r\n            this.portsIn.splice(this.portsIn.indexOf(port), 1);\r\n        } else {\r\n            this.portsOut.splice(this.portsOut.indexOf(port), 1);\r\n        }\r\n    }\r\n\r\n    addPort<T extends MyPortModel>(port: T): T {\r\n        super.addPort(port);\r\n        if (port.getOptions().in) {\r\n            if (this.portsIn.indexOf(port) === -1) {\r\n                this.portsIn.push(port);\r\n            }\r\n        } else {\r\n            if (this.portsOut.indexOf(port) === -1) {\r\n                this.portsOut.push(port);\r\n            }\r\n        }\r\n        return port;\r\n    }\r\n\r\n    addInPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: true,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.LEFT\r\n        });\r\n        if (!after) {\r\n            this.portsIn.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addOutPort(label: string, after = true): MyPortModel {\r\n        const p = new MyPortModel({\r\n            in: false,\r\n            name: label,\r\n            label: label,\r\n            alignment: PortModelAlignment.RIGHT\r\n        });\r\n        if (!after) {\r\n            this.portsOut.splice(0, 0, p);\r\n        }\r\n        return this.addPort(p);\r\n    }\r\n\r\n    addExtras(extras: any): any {\r\n        this.extras = extras;\r\n        return this.extras\r\n    }\r\n\r\n    deserialize(event: DeserializeEvent<this>) {\r\n        super.deserialize(event);\r\n        this.options.name = event.data.name;\r\n        this.options.color = event.data.color;\r\n        this.portsIn = _.map(event.data.portsInOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.portsOut = _.map(event.data.portsOutOrder, (id) => {\r\n            return this.getPortFromID(id);\r\n        }) as MyPortModel[];\r\n        this.extras = event.data.extras\r\n        this.content = event.data.content\r\n        this.selectableOptions = event.data.selectableOptions\r\n    }\r\n\r\n    serialize(): any {\r\n        return {\r\n            ...super.serialize(),\r\n            name: this.options.name,\r\n            color: this.options.color,\r\n            portsInOrder: _.map(this.portsIn, (port) => {\r\n                return port.getID();\r\n            }),\r\n            portsOutOrder: _.map(this.portsOut, (port) => {\r\n                return port.getID();\r\n            }),\r\n            extras: this.extras,\r\n            content: this.content,\r\n            selectableOptions: this.selectableOptions\r\n        };\r\n    }\r\n\r\n    getInPorts(): MyPortModel[] {\r\n        return this.portsIn;\r\n    }\r\n\r\n    getOutPorts(): MyPortModel[] {\r\n        return this.portsOut;\r\n    }\r\n}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [{\r\n        name: 'Arduino Uno',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 14,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    }, {\r\n        name: 'Arduino Nano',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 6,\r\n            digitalPorts: 22,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Mega',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 16,\r\n            digitalPorts: 54,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Leonardo',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 12,\r\n            digitalPorts: 20,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Arduino Flora',\r\n        color: 'green',\r\n        extras: {\r\n            type: 'controller',\r\n            analogPorts: 4,\r\n            digitalPorts: 8,\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'setup()',\r\n            'loop()'\r\n        ]\r\n    }, {\r\n        name: 'Digital I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'Built-in'\r\n        },\r\n        ins: [\r\n            'void digitalWrite(int pin, int value)',\r\n            'void pinMode(int pin, int mode)',\r\n        ],\r\n        outs: [\r\n            'int digitalRead(int pin)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Analog I/O',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'Built-in'\r\n        },\r\n        ins: [\r\n            'void analoglWrite(int pin, int value)',\r\n            'void pinMode(int pin, int mode)',\r\n            'void analogReference(int type)',\r\n        ],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'Time',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'Built-in'\r\n        },\r\n        ins: [\r\n            'void delay(int ms)',\r\n            'void delayMicroseconds(int us)',\r\n        ],\r\n        outs: [\r\n            'unsigned long micros()',\r\n            'unsigned long millis()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Math',\r\n        color: 'cyan',\r\n        extras: {\r\n            type: 'Built-in'\r\n        },\r\n        ins: [\r\n            'void delay(int ms)',\r\n        ],\r\n        outs: [\r\n            'int abs(int x)',\r\n            'int constrain(int x, int a, int b)',\r\n            'int map(int value, int fromLow, int fromHigh, int toLow, int toHigh)',\r\n            'any? max(any x, any y)',\r\n            'any? min(any x, any y)',\r\n            'double pow(float base, float exponent)',\r\n            'double sq(any x)',\r\n            'double sqrt(any x)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Digital Port',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'port'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'port',\r\n        ]\r\n    }, {\r\n        name: 'Analog Port',\r\n        color: 'white',\r\n        extras: {\r\n            type: 'port'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'port',\r\n        ]\r\n    },\r\n    {\r\n        name: 'CustomFunction',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'call',\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n        ]\r\n    }, {\r\n        name: 'Condition',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'trigger',\r\n            'x',\r\n            'y'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Loop',\r\n        extras: {\r\n            type: 'logic'\r\n        },\r\n        color: 'grey',\r\n        outs: [\r\n            'True',\r\n            'False'\r\n        ],\r\n        ins: [\r\n            'startValue',\r\n            'stopValue'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Led',\r\n        color: 'red',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Setter.h'\r\n        },\r\n        ins: [\r\n            'setValue()'\r\n        ],\r\n        outs: []\r\n\r\n    },\r\n    {\r\n        name: 'Temperature Sensor',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Getter.h'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'getValue()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'TwoWire Interface',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Wire.h'\r\n        },\r\n        ins: [\r\n            'void begin()',\r\n            'void beginTransmission()',\r\n            'void setClock()',\r\n            'void onReceive()',\r\n            'void onRequest()'\r\n\r\n        ],\r\n        outs: [\r\n            'byte requestFrom()',\r\n            'byte endTransmission()',\r\n            'byte write()',\r\n            'byte available()',\r\n            'byte read()'\r\n        ]\r\n    },\r\n    {\r\n        name: 'Button',\r\n        color: 'blue',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Getter.h'\r\n        },\r\n        ins: [\r\n            'setValue(bool)'\r\n        ],\r\n        outs: []\r\n    },\r\n    {\r\n        name: 'PWM Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Adafruit_PWMServoDriver.h'\r\n        },\r\n        ins: [\r\n            'void begin(uint8_t prescale=0)',\r\n            'void sleep()',\r\n            'void wakeup()',\r\n            'void setExtClk(uint8_t prescale)',\r\n            'void setPWMFreq(float freq)',\r\n            'void setOutputMode(bool totempole)',\r\n            'void setPWM(uint8_t num, uint16_t on, uint16_t off)',\r\n            'void setPin(uint8_t num, uint16_t val, bool invert=false)',\r\n            'void writeMicroseconds(uint8_t num, uint16_t Microseconds)',\r\n            'void setOscillatorFrequency(uint32_t freq)',\r\n\r\n        ],\r\n        outs: [\r\n            'uint8_t getPWM(uint8_t num)',\r\n            'uint8_t readPrescale()',\r\n            'uint32_t getOscillatorFrequency()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Servo',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Servo.h'\r\n        },\r\n        ins: [\r\n            'void detach()',\r\n            'void write(int)',\r\n            'void writeMicroseconds(int)',\r\n        ],\r\n        outs: [\r\n            'uint8_t attach(int)',\r\n            'uint8_t attach(int, int, int)',\r\n            'int read()',\r\n            'int readMicroseconds()',\r\n            'bool attached()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Stepper',\r\n        color: 'orange',\r\n        extras: {\r\n            type: 'component',\r\n            library: 'Stepper.h'\r\n        },\r\n        ins: [\r\n            'Stepper(int, int, int)',\r\n            'Stepper(int, int, int, int, int)',\r\n            'Stepper(int, int, int, int, int, int)',\r\n            'void setSpeed(long whatSpeed)',\r\n            'void step(int number_of_steps)',\r\n        ],\r\n        outs: [\r\n            'int version(void)',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable Integer',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [\r\n            'void setValue(int)',\r\n        ],\r\n        outs: [\r\n            'int getValue()',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Variable Boolean',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'variable'\r\n        },\r\n        ins: [\r\n            'void setValue(bool)',\r\n        ],\r\n        outs: [\r\n            'bool',\r\n        ]\r\n    },\r\n    {\r\n        name: 'Constant Integer',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'constant'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'int',\r\n        ]\r\n    }, {\r\n        name: 'Constant Boolean',\r\n        color: 'pink',\r\n        extras: {\r\n            type: 'constant'\r\n        },\r\n        ins: [],\r\n        outs: [\r\n            'bool',\r\n        ]\r\n    },\r\n]","import React, { useState, useRef, useCallback } from \"react\";\r\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\r\nimport { useEditable } from \"use-editable\";\r\n\r\nconst Edit = () => {\r\n    const editorRef = useRef(null);\r\n    const [code, setCode] = useState('');\r\n\r\n    const onEditableChange = useCallback((code) => {\r\n        setCode(code.slice(0, -1));\r\n    }, []);\r\n\r\n    useEditable(editorRef, onEditableChange, {\r\n        disabled: false,\r\n        indentation: 2\r\n    });\r\n\r\n    return (\r\n        <Highlight {...defaultProps} code={code} language=\"jsx\">\r\n            {({ className, style, tokens, getLineProps, getTokenProps }) => (\r\n                <pre className={className} style={style} ref={editorRef}>\r\n                    {tokens.map((line, i) => (\r\n                        <React.Fragment key={i}>\r\n                            {line\r\n                                .filter((token) => !token.empty)\r\n                                .map((token, key) => (\r\n                                    <span {...getTokenProps({ token, key })} />\r\n                                ))}\r\n                            {\"\\n\"}\r\n                        </React.Fragment>\r\n                    ))}\r\n                </pre>\r\n            )}\r\n        </Highlight>\r\n    );\r\n};\r\n\r\nexport default Edit;\r\n","import Prism from \"prismjs\";\r\nimport { useEffect } from \"react\";\r\nimport \"./prism.css\";\r\nimport PrismEdit from \"./PrismEdit\";\r\n\r\nfunction generateCode(model: any): string {\r\n    let code = ''\r\n    if (Object.keys(model).length === 0) {\r\n        return '// Empty Diagram!';\r\n    }\r\n    const links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    const nodes: any[] = []\r\n    const logics: any[] = []\r\n    const components: any[] = []\r\n    const controllers: any[] = []\r\n    const libraries: any[] = []\r\n    const constants: any[] = []\r\n\r\n    const usedDigital: number[] = []\r\n    const usedAnalog: number[] = []\r\n\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        const n = x[1]\r\n        nodes.push(n)\r\n        switch (n.extras.type) {\r\n            case 'component':\r\n                n.instance = n.name.toLowerCase().replace(' ', '') + components.filter(c => c.extras.library === n.extras.library).length\r\n                components.push(n)\r\n                if (!libraries.includes(n.extras.library))\r\n                    libraries.push(n.extras.library)\r\n                break\r\n            case 'controller':\r\n                controllers.push(n)\r\n                break\r\n            case 'logic':\r\n                logics.push(n)\r\n                break\r\n            case 'variable':\r\n                break\r\n            case 'constant':\r\n                n.content.name = n.content.name.toUpperCase()\r\n                constants.push(n)\r\n                break\r\n        }\r\n    })\r\n\r\n    if (nodes.length === 0) return '// You need at least one Node!'\r\n    if (controllers.length === 0) return '// You need an Arduino!'\r\n    if (controllers.length > 1) return '// Only one Arduino allowed!'\r\n\r\n    let controller = controllers[0]\r\n\r\n    let add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        // console.log('----', code);\r\n        code += \"\\n\";\r\n        return code;\r\n    };\r\n    let addOnTop = (...message: string[]) => {\r\n        let top = ''\r\n        message.forEach((m) => {\r\n            top += m;\r\n        });\r\n        code = top + \"\\n\" + code\r\n    };\r\n\r\n    let getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    let getPort = (nodeID: string, portID: string) => {\r\n        try {\r\n            return nodes.find((n: any) => n.id === nodeID).ports\r\n                .find((p: any) => p.id === portID);\r\n        } catch (error) {\r\n            return \"// Loose end\"\r\n        }\r\n    }\r\n    let getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    let getCoditionalValue = (conditionNode: any, portName: any): string => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === portName).links[0]\r\n            let link = getLink(linkID)\r\n            let port = getPort(link.source, link.sourcePort)\r\n            let parent = getParent(port)\r\n\r\n            if (['variable', 'port'].includes(parent.extras.type)) {\r\n                return parent.content.value\r\n            }\r\n            else if (['component'].includes(parent.extras.type)) {\r\n                return parent.instance + '.' + port.name\r\n            } else {\r\n                return add('Unknown extras.type')\r\n            }\r\n        } catch (error) {\r\n            return '/* Lacking Value */'\r\n        }\r\n    }\r\n    let getOutcome = (conditionNode: any, ifThis = 'True') => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === ifThis).links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.target, link.targetPort)\r\n        } catch (error) {\r\n            return { label: '// Lacking Outcome' }\r\n        }\r\n    }\r\n    let getParent = (childNode: any) => {\r\n        return nodes.find((n: any) => n.id === childNode.parentNode)\r\n    }\r\n    let removeTypes = (name: string): string => {\r\n        const functionName = name.substring(name.indexOf(' ') + 1, name.indexOf('(') !== -1 ? name.indexOf('(') : name.length)\r\n        const params = name.substring(name.indexOf('('), name.indexOf(')') - 1).split(',')\r\n        let result = functionName\r\n        params.forEach(param => {\r\n            if (!param.includes('=')) {\r\n                let thisParam = String(param.split(' ').slice(-1))\r\n                result += thisParam\r\n            }\r\n        });\r\n        // console.log('removing types from', name, 'params ', params, ' returning', result)\r\n        return result;\r\n    }\r\n\r\n    let callWithParameters = (node: any, ...contents: any) => {\r\n        if (node.extras.type === 'constant') {\r\n            contents.push(node.content.name)\r\n        } else {\r\n            contents.push(node.content.value)\r\n        }\r\n\r\n\r\n        node.ports.forEach((port: any) => {\r\n            port.links.forEach((l: any) => {\r\n                const link = getLink(l);\r\n                const toPort = getPort(link.target, link.targetPort)\r\n                const toNode = getNode(toPort.parentNode)\r\n                if (toNode.id === node.id) {\r\n                    //skip as it is the previous link\r\n                } else if (!toNode.instance) {//points to another variable/port\r\n                    callWithParameters(toNode, ...contents)\r\n                } else {//points to a class instance, we hope it is a method call\r\n                    //todo: check for parameter type and numbers\r\n                    add(toNode.instance + '.' + removeTypes(toPort.name.split(\"(\").shift()) + '(' + contents + ')')\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    const processLink = (l: any) => {\r\n        const link = getLink(l);\r\n        const toPort = getPort(link.target, link.targetPort)\r\n        const toNode = getNode(toPort.parentNode)\r\n        const fromPort = getPort(link.source, link.sourcePort)\r\n        const fromNode = getNode(fromPort.parentNode)\r\n\r\n        if (toNode?.name === \"Function\") {\r\n            console.log('fun', toNode);\r\n            add(toNode.content.value, '(', ');')\r\n        } else if (toNode?.name === \"Condition\") {\r\n            const xValue = getCoditionalValue(toNode, 'x')\r\n            const yValue = getCoditionalValue(toNode, 'y')\r\n\r\n            const outcome2 = getOutcome(toNode)\r\n            const toNode2 = getParent(outcome2)\r\n\r\n            const outcome3 = getOutcome(toNode, 'False')\r\n            const toNode3 = getParent(outcome3)\r\n\r\n            add('if (', xValue, ' ' + toNode.content.value + ' ', yValue, ') {')\r\n            if (toNode2) {\r\n                callWithParameters(toNode2)\r\n            } else {\r\n                add('/* Lacking code to be executed if conditional is true */')\r\n            }\r\n            if (toNode3) {\r\n                add('} else {')\r\n                callWithParameters(toNode3)\r\n            }\r\n            add(\"}\\n\");\r\n\r\n        } else {\r\n            if (['variable', 'constant'].includes(toNode?.extras?.type)) {\r\n                callWithParameters(toNode)\r\n            } else if (['port'].includes(toNode?.extras?.type)) {\r\n                console.log('found port', toNode)\r\n                if (toNode.name.includes('Digital')) {\r\n                    console.log('it was digital');\r\n                    usedDigital.push(toNode.content.value)\r\n                } else {\r\n                    console.log('it was analog');\r\n                    usedAnalog.push(toNode.content.value)\r\n                }\r\n                callWithParameters(toNode)\r\n            } else {\r\n                if (toNode?.instance) {\r\n                    add(toNode.instance + '.' + removeTypes(toPort.name) + '()')\r\n                } else {\r\n                    add(fromNode.instance + '.' + removeTypes(fromPort.name) + '()')\r\n                }\r\n            }\r\n        }\r\n    }\r\n    add('// Libraries')\r\n    libraries.forEach(lib => {\r\n        add('#include <' + lib + '>')\r\n    });\r\n\r\n    add('')\r\n\r\n    add('// Objects')\r\n    libraries.forEach(lib => {\r\n        components.forEach(comp => {\r\n            if (comp.extras.library === lib)\r\n                add(comp.name + ' ' + comp.instance)\r\n        });\r\n    });\r\n\r\n    add('// Functions')\r\n    logics.forEach(logic => {\r\n        if (logic.name === \"Function\") {\r\n            add('void ', logic.content.value, '() {')\r\n\r\n            const callPort = logic.ports.find((x: any) => x.alignment === 'right')\r\n            callPort.links.forEach((l: any) => {\r\n                processLink(l)\r\n            });\r\n            add('}')\r\n        }\r\n    });\r\n\r\n\r\n\r\n    add('// Constants')\r\n    constants.forEach(constant => {\r\n        add(`#define ${constant.content.name} ${constant.content.value} //${constant.name}`)\r\n    });\r\n\r\n\r\n    add('')\r\n    add('// Micro-controller Lifecycle')\r\n    // let content.value: string | null = null\r\n    controller.ports.forEach((port: any) => {\r\n        add(port.label, \"{\");\r\n        port.links.forEach((l: any) => {\r\n            processLink(l)\r\n        })\r\n        add(\"}\\n\");\r\n    })\r\n\r\n    addOnTop(\"\")\r\n    addOnTop(`Digital ports ${usedDigital.length}/${controller.extras.digitalPorts} ${usedDigital.length > 0 ? `(${usedDigital})` : \"\"}`, \"*/\")\r\n    addOnTop(`Analog ports ${usedAnalog.length}/${controller.extras.analogPorts} ${usedAnalog.length > 0 ? `(${usedAnalog})` : \"\"} `)\r\n    addOnTop(\"/* Code generated for \", controller.name);\r\n\r\n    function indentCode(original: string) {\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return indentCode(code);\r\n}\r\nexport default function Code(props: { model: string }) {\r\n    // console.log('CodeComponent render')\r\n    const model = props.model\r\n    let code = 'Initializing Generator'\r\n    if (model === \"{}\" || model === \"\") {\r\n        //\r\n    } else {\r\n        code = generateCode(JSON.parse(model))\r\n    }\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n    }, [props])\r\n    return (\r\n        <>\r\n            <div className=\"Code\">\r\n                <pre >\r\n                    <code className=\"language-clike\">{code}</code>\r\n                </pre>\r\n            </div>\r\n            <PrismEdit />\r\n        </>\r\n    );\r\n}","import * as React from 'react';\r\nimport { Application } from './Application';\r\nimport { TrayItemWidget } from './TrayItemWidget';\r\nimport { MyNodeModel } from './myNode/MyNodeModel';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { DemoCanvasWidget } from './helpers/DemoCanvasWidget';\r\nimport styled from '@emotion/styled';\r\nimport { MyEditableNodeModel } from './editableNode/MyEditableNodeModel';\r\nimport paletteNodes from '../../paletteNodes';\r\nimport { useState } from 'react';\r\nimport Code from '../Code';\r\nimport { Button } from '@material-ui/core';\r\nvar ScrollArea = require('react-scrollbar').default;\r\nexport interface BodyWidgetProps {\r\n\tapp: Application;\r\n}\r\n\r\nnamespace S {\r\n\texport const Body = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tmin-height: 100%;\r\n\t`;\r\n\r\n\texport const Header = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground: rgb(30, 30, 30);\r\n\t\tflex-grow: 0;\r\n\t\tflex-shrink: 0;\r\n\t\tcolor: white;\r\n\t\tfont-family: Helvetica, Arial, sans-serif;\r\n\t\tpadding: 10px;\r\n\t\talign-items: center;\r\n\t`;\r\n\r\n\texport const Content = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n\r\n\texport const Layer = styled.div`\r\n\t\tposition: relative;\r\n\t\tflex-grow: 1;\r\n\t`;\r\n}\r\n\r\nfunction BodyWidget(props: BodyWidgetProps) {\r\n\tconst [model, setModel] = useState(\"{}\")\r\n\tconst [rerender, setRerender] = React.useState(false);\r\n\r\n\tconst rawModel = props.app.getDiagramEngine().getModel().serialize()\r\n\tconst stringModel = JSON.stringify(rawModel)\r\n\r\n\tconst groups = [...new Set(paletteNodes.map(x => x.extras.type))]\r\n\r\n\tif (stringModel !== model) {\r\n\t\tsetModel(stringModel);\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"float-container\" >\r\n\t\t\t<div className=\"float-child-left\">\r\n\t\t\t\t<S.Body>\r\n\t\t\t\t\t<S.Content style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t<div>\r\n\r\n\t\t\t\t\t\t\t<ScrollArea\r\n\t\t\t\t\t\t\t\tspeed={1}\r\n\t\t\t\t\t\t\t\tclassName=\"area\"\r\n\t\t\t\t\t\t\t\tcontentClassName=\"content\"\r\n\t\t\t\t\t\t\t\thorizontal={false}\r\n\t\t\t\t\t\t\t\tstyle={{ height: '88vh' }}\r\n\t\t\t\t\t\t\t\tsmoothScrolling={true}\r\n\t\t\t\t\t\t\t\tverticalScrollbarStyle={{ backgroundColor: 'white' }}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tgroups.map((group) => {\r\n\t\t\t\t\t\t\t\t\t\treturn <div key={group} style={{ border: 'dashed white 1px', marginBottom: '20px' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<h6 style={{ margin: '0px 0px 0px 0px' }}>{group + 's'}:</h6>\r\n\t\t\t\t\t\t\t\t\t\t\t{paletteNodes.filter(n => n.extras.type === group).map((node) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn <TrayItemWidget key={node.name} node={node} />\r\n\t\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ScrollArea>\r\n\t\t\t\t\t\t\t<div style={{ marginBottom: '0px' }}>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" size='small'\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tconst temp = JSON.stringify(rawModel)\r\n\t\t\t\t\t\t\t\t\t\tlocalStorage.setItem('model', temp);\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('Saved')\r\n\t\t\t\t\t\t\t\t\t\t// alert('Saved!')\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Button variant=\"contained\" size='small'\r\n\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\tprops.app.getActiveDiagram().deserializeModel(\r\n\t\t\t\t\t\t\t\t\t\t\tJSON.parse(localStorage.getItem('model') || '{}'),\r\n\t\t\t\t\t\t\t\t\t\t\tprops.app.getDiagramEngine());\r\n\t\t\t\t\t\t\t\t\t\tsetModel(stringModel);\r\n\t\t\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t\t\t\tconsole.log('Loaded')\r\n\t\t\t\t\t\t\t\t\t\t// setTimeout(() => {\r\n\t\t\t\t\t\t\t\t\t\t// \talert('Loaded!')\r\n\t\t\t\t\t\t\t\t\t\t// }, 10);\r\n\t\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\tLoad\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<S.Layer\r\n\t\t\t\t\t\t\tonDrop={(event) => {\r\n\t\t\t\t\t\t\t\tlet data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\r\n\r\n\t\t\t\t\t\t\t\tif (data) {\r\n\t\t\t\t\t\t\t\t\tlet node: any = {};\r\n\t\t\t\t\t\t\t\t\tif (data.extras.type === \"variable\") {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs);\r\n\t\t\t\t\t\t\t\t\t} else if (data.extras.type === \"constant\") {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs);\r\n\t\t\t\t\t\t\t\t\t} else if (data.extras.type === 'port') {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs);\r\n\t\t\t\t\t\t\t\t\t} else if (data.extras.type === \"logic\") {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyEditableNodeModel(data.name, data.color, data.extras, data.ins, data.outs);\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t\tnode = new MyNodeModel(data.name, data.color);\r\n\t\t\t\t\t\t\t\t\t\tnode.extras = data.extras\r\n\t\t\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\r\n\t\t\t\t\t\t\t\t\t\t\tnode.addInPort(method)\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tnode.setPosition(props.app.getDiagramEngine().getRelativeMousePoint(event));\r\n\t\t\t\t\t\t\t\t\tprops.app.getDiagramEngine().getModel().addNode(node);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonDragOver={(event: any) => {\r\n\t\t\t\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tonClick={(event: any) => {\r\n\t\t\t\t\t\t\t\tsetRerender(!rerender);\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\r\n\t\t\t\t\t\t\t\t<DemoCanvasWidget >\r\n\t\t\t\t\t\t\t\t\t<CanvasWidget engine={props.app.getDiagramEngine()} />\r\n\t\t\t\t\t\t\t\t</DemoCanvasWidget>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</S.Layer>\r\n\t\t\t\t\t</S.Content>\r\n\t\t\t\t</S.Body >\r\n\t\t\t</div>\r\n\t\t\t<div className=\"float-child-right\">\r\n\t\t\t\t<Code model={model} />\r\n\t\t\t</div>\r\n\t\t</div >\r\n\t)\r\n\r\n}\r\nexport default React.memo(BodyWidget)","import { LabelModel } from '@projectstorm/react-diagrams';\r\nimport { BaseModelOptions, DeserializeEvent } from '@projectstorm/react-canvas-core';\r\n\r\nexport interface EditableLabelOptions extends BaseModelOptions {\r\n\tvalue?: string;\r\n}\r\n\r\nexport class EditableLabelModel extends LabelModel {\r\n\tvalue: string;\r\n\r\n\tconstructor(options: EditableLabelOptions = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\ttype: 'editable-label'\r\n\t\t});\r\n\t\tthis.value = options.value || '';\r\n\t}\r\n\r\n\tserialize() {\r\n\t\treturn {\r\n\t\t\t...super.serialize(),\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\r\n\tdeserialize(event: DeserializeEvent<this>): void {\r\n\t\tsuper.deserialize(event);\r\n\t\tthis.value = event.data.value;\r\n\t}\r\n}\r\n","import * as React from 'react';\r\n\r\nimport { EditableLabelModel } from './EditableLabelModel';\r\nimport styled from '@emotion/styled';\r\nimport { action } from '@storybook/addon-actions';\r\n\r\nexport interface FlowAliasLabelWidgetProps {\r\n\tmodel: EditableLabelModel;\r\n}\r\n\r\nnamespace S {\r\n\t// NOTE: this CSS rules allows to interact with elements in label\r\n\texport const Label = styled.div`\r\n\t\tuser-select: none;\r\n\t\tpointer-events: auto;\r\n\t`;\r\n}\r\n\r\n// now we can render all what we want in the label\r\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\r\n\tconst [str, setStr] = React.useState(props.model.value);\r\n\r\n\treturn (\r\n\t\t<S.Label>\r\n\t\t\t<input\r\n\t\t\t\tvalue={str}\r\n\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\tconst newVal = event.target.value;\r\n\r\n\t\t\t\t\t// update value both in internal component state\r\n\t\t\t\t\tsetStr(newVal);\r\n\t\t\t\t\t// and in model object\r\n\t\t\t\t\tprops.model.value = newVal;\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\r\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\r\n\t\t</S.Label>\r\n\t);\r\n};\r\n","import * as React from 'react';\r\nimport { AbstractReactFactory, GenerateWidgetEvent } from '@projectstorm/react-canvas-core';\r\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\r\n\r\nimport { EditableLabelModel } from './EditableLabelModel';\r\nimport { EditableLabelWidget } from './EditableLabelWidget';\r\n\r\nexport class EditableLabelFactory extends AbstractReactFactory<EditableLabelModel, DiagramEngine> {\r\n\tconstructor() {\r\n\t\tsuper('editable-label');\r\n\t}\r\n\r\n\tgenerateModel(): EditableLabelModel {\r\n\t\treturn new EditableLabelModel();\r\n\t}\r\n\r\n\tgenerateReactWidget(event: GenerateWidgetEvent<EditableLabelModel>): JSX.Element {\r\n\t\treturn <EditableLabelWidget model={event.model} />;\r\n\t}\r\n}\r\n","import * as React from \"react\";\r\nimport AutosizeInput from 'react-input-autosize';\r\n\r\nexport interface IEditableSingleFieldProps {\r\n  beingEdited: boolean;\r\n  content: string;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n}) => {\r\n  return (\r\n    <AutosizeInput\r\n      autoFocus\r\n      inputStyle={{\r\n        padding: 1,\r\n        borderStyle: \"dotted\",\r\n        borderWidth: 1,\r\n        borderColor: \"black\"\r\n      }}\r\n      type=\"text\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n      onKeyDown={(event: any) => {\r\n        if (event.keyCode === 13) onBlurOrEnter();\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default class EditableSingleField extends React.Component<\r\n  IEditableSingleFieldProps\r\n> {\r\n  constructor(props: IEditableSingleFieldProps) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport interface ISelectableFieldProps {\r\n  beingEdited: boolean;\r\n  options: Array<string>\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  editingKey: string;\r\n  elementKey: string;\r\n  isAbstract?: boolean;\r\n}\r\n\r\nexport interface ISelectableFieldState { }\r\n\r\nconst Editor = ({\r\n  content,\r\n  onChange,\r\n  onBlurOrEnter,\r\n  options\r\n}: {\r\n  content: string;\r\n  onChange: (evt: React.ChangeEvent<HTMLSelectElement>) => void;\r\n  onBlurOrEnter: () => void;\r\n  options: Array<string>;\r\n}) => {\r\n  return (\r\n    <select name=\"values\" id=\"values\"\r\n      value={content}\r\n      onChange={onChange}\r\n      onBlur={onBlurOrEnter}\r\n    >\r\n      {\r\n        options.map((x, y) =>\r\n          <option key={y}>{x}</option>)\r\n      }\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default class SelectableField extends React.Component<\r\n  ISelectableFieldProps,\r\n  ISelectableFieldState\r\n> {\r\n  constructor(props: ISelectableFieldProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        {this.props.beingEdited &&\r\n          this.props.editingKey === this.props.elementKey ? (\r\n          <Editor\r\n            content={this.props.content}\r\n            onChange={this.props.onChange}\r\n            onBlurOrEnter={this.props.onBlurOrEnter}\r\n            options={this.props.options}\r\n          />\r\n        ) : (\r\n          <p\r\n            style={{\r\n              margin: 0,\r\n              padding: 0,\r\n              fontStyle: this.props.isAbstract ? \"italic\" : \"normal\"\r\n            }}\r\n          >\r\n            {this.props.content}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","//@ts-nocheck\r\nimport * as React from \"react\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport \"./MyEditableNodeWidgedStyle.css\";\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nimport { DiagramEngine, DefaultPortLabel } from \"@projectstorm/react-diagrams\";\r\nimport styled from '@emotion/styled';\r\n\r\nimport EditableSingleField from \"../custom-node/custom_components/EditableSingleField\";\r\nimport SelectableField from \"../custom-node/custom_components/SelectableField\";\r\n\r\nnamespace S {\r\n  export const Node = styled.div<{ background: string; selected: boolean }>`\r\n\t\tbackground-color: ${(p) => p.background};\r\n\t\tborder-radius: 5px;\r\n\t\tfont-family: sans-serif;\r\n\t\tcolor: white;\r\n\t\tborder: solid 2px black;\r\n\t\toverflow: visible;\r\n\t\tfont-size: 11px;\r\n\t\tborder: solid 2px ${(p) => (p.selected ? 'rgb(0,192,255)' : 'black')};\r\n\t`;\r\n\r\n  export const Title = styled.div`\r\n\t\tbackground: rgba(0, 0, 0, 0.3);\r\n\t\tdisplay: flex;\r\n\t\twhite-space: nowrap;\r\n\t\tjustify-items: center;\r\n\t`;\r\n\r\n  export const TitleName = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tpadding: 5px 5px;\r\n\t`;\r\n\r\n  export const Ports = styled.div`\r\n\t\tdisplay: flex;\r\n\t\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));\r\n\t`;\r\n\r\n  export const PortsContainer = styled.div`\r\n\t\tflex-grow: 1;\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\t&:first-of-type {\r\n\t\t\tmargin-right: 10px;\r\n\t\t}\r\n\r\n\t\t&:only-child {\r\n\t\t\tmargin-right: 0px;\r\n\t\t}\r\n\t`;\r\n}\r\n\r\nexport interface MyEditableWidgetProps {\r\n  nodeModel: MyEditableNodeModel;\r\n  engine: DiagramEngine\r\n}\r\n\r\nexport interface MyEditableWidgetState {\r\n  content: string;\r\n  height: number;\r\n  width: number;\r\n  editingSomething: boolean;\r\n  editingKey: string;\r\n}\r\nexport class MyEditableNodeWidget extends React.Component<\r\n  MyEditableWidgetProps,\r\n  MyEditableWidgetState\r\n> {\r\n  private divElement: HTMLDivElement;\r\n\r\n  constructor(props: MyEditableWidgetProps) {\r\n    super(props);\r\n    this.state = {\r\n      content: { name: '', value: '' },\r\n      variableType: '',\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    };\r\n\r\n    //binding the methods to this element\r\n    this._editableObjectDoubleClick = this._editableObjectDoubleClick.bind(this);\r\n    this._contentOnChange = this._contentOnChange.bind(this);\r\n    this._onBlurOrEnter = this._onBlurOrEnter.bind(this);\r\n  }\r\n  generatePort = (port) => {\r\n    return <DefaultPortLabel engine={this.props.engine} port={port} key={port.getID()} />;\r\n  };\r\n\r\n  /**\r\n   * Pass this on onDoubleClick.\r\n   * You change the states to make the fields know it's in edit mode, and tell who is in the edit mode\r\n   */\r\n  _editableObjectDoubleClick = (content: string) => {\r\n    if (this.state.editingSomething) return;\r\n    this.setState({\r\n      editingSomething: true,\r\n      editingKey: content\r\n    });\r\n  };\r\n\r\n  /**\r\n   * What you'll do when the content is changed\r\n   * Usually, you update the model and the state\r\n   */\r\n  _contentOnChange = (evt: React.FormEvent<HTMLInputElement>) => {\r\n\r\n    this.props.nodeModel.content[this.state.editingKey] = evt.currentTarget.value;\r\n    this.setState({ content: evt.currentTarget.value });\r\n  };\r\n\r\n  /**\r\n   * What you will do when the InputField lost focus or you press enter\r\n   * Usually, you change the states to make the fields know it's not in edit mode\r\n   */\r\n  _onBlurOrEnter = () => {\r\n    this.setState({\r\n      editingSomething: false,\r\n      editingKey: \"\"\r\n    });\r\n  };\r\n\r\n  /**\r\n   * copy atributes from nodeModel\r\n   */\r\n  UNSAFE_componentWillMount() {\r\n    this.setState({\r\n      content: this.props.nodeModel.content\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <S.Node\r\n        data-default-node-name={this.props.nodeModel.getOptions().name}\r\n        selected={this.props.nodeModel.isSelected()}\r\n        background={this.props.nodeModel.getOptions().color}>\r\n        <S.Title>\r\n          <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"name\");\r\n                  }}\r\n                >\r\n                  <EditableSingleField\r\n                    elementKey=\"name\"\r\n                    editingKey={this.state.editingKey}\r\n                    beingEdited={this.state.editingSomething}\r\n                    content={this.props.nodeModel.content.name}\r\n                    onChange={this._contentOnChange}\r\n                    onBlurOrEnter={this._onBlurOrEnter}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <S.TitleName>{this.props.nodeModel.getOptions().name}:\r\n          </S.TitleName>\r\n          <div className={\"editable-node\"}\r\n            ref={divElement => (this.divElement = divElement)}>\r\n            <div className=\"editable-border\">\r\n              <div className=\"editable-header\">\r\n                <div\r\n                  onDoubleClick={() => {\r\n                    this._editableObjectDoubleClick(\"value\");\r\n                  }}\r\n                >\r\n                  {(this.props.nodeModel.portsOut[0].options.name === 'bool' ||\r\n                    this.props.nodeModel.portsOut[0].options.name === 'port'\r\n                  ) ?\r\n                    <SelectableField\r\n                      elementKey=\"value\"\r\n                      options={this.props.nodeModel.selectableOptions}\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.content.value}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                    :\r\n                    <EditableSingleField\r\n                      elementKey=\"value\"\r\n                      editingKey={this.state.editingKey}\r\n                      beingEdited={this.state.editingSomething}\r\n                      content={this.props.nodeModel.content.value}\r\n                      onChange={this._contentOnChange}\r\n                      onBlurOrEnter={this._onBlurOrEnter}\r\n                    />\r\n                  }\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </S.Title>\r\n        <S.Ports>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getInPorts(), this.generatePort)}</S.PortsContainer>\r\n          <S.PortsContainer>{_.map(this.props.nodeModel.getOutPorts(), this.generatePort)}</S.PortsContainer>\r\n        </S.Ports>\r\n      </S.Node>\r\n    );\r\n  }\r\n}\r\n","import { MyEditableNodeWidget } from \"./MyEditableNodeWidget\";\r\nimport { MyEditableNodeModel } from \"./MyEditableNodeModel\";\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core'\r\nimport { DiagramEngine } from \"@projectstorm/react-diagrams\";\r\n\r\nexport class MyEditableNodeFactory extends AbstractReactFactory<MyEditableNodeModel, DiagramEngine> {\r\n\tgenerateModel(event: import(\"@projectstorm/react-canvas-core\").GenerateModelEvent): MyEditableNodeModel {\r\n\t\treturn new MyEditableNodeModel('name', 'pink', 'test', ['t'], ['t']);\r\n\t}\r\n\tconstructor() {\r\n\t\tsuper(\"MyEditable\");\r\n\t}\r\n\r\n\tgenerateReactWidget(event: { model: MyEditableNodeModel }): JSX.Element {\r\n\t\treturn <MyEditableNodeWidget nodeModel={event.model} engine={this.engine} />;\r\n\t}\r\n}\r\n","import * as SRD from '@projectstorm/react-diagrams';\r\nimport { EditableLabelFactory } from './custom-label/EditableLabelFactory';\r\nimport { MyEditableNodeFactory } from './editableNode/MyEditableNodeFactory';\r\n\r\n/**\r\n * @author Dylan Vorster\r\n */\r\nexport class Application {\r\n\tprotected activeModel: any;//SRD.DiagramModel\r\n\tprotected diagramEngine: SRD.DiagramEngine;\r\n\r\n\tconstructor() {\r\n\t\tthis.diagramEngine = SRD.default();\r\n\t\tthis.diagramEngine.getLabelFactories().registerFactory(new EditableLabelFactory());\r\n\t\tthis.diagramEngine.getNodeFactories().registerFactory(new MyEditableNodeFactory());\r\n\t\tthis.newModel();\r\n\t}\r\n\r\n\tpublic newModel() {\r\n\t\tthis.activeModel = new SRD.DiagramModel();\r\n\t\tthis.diagramEngine.setModel(this.activeModel);\r\n\t}\r\n\r\n\tpublic getActiveDiagram(): SRD.DiagramModel {\r\n\t\treturn this.activeModel;\r\n\t}\r\n\r\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\r\n\t\treturn this.diagramEngine;\r\n\t}\r\n}\r\n","import BodyWidget from '../components/react-diagrams/BodyWidget';\r\nimport { Application } from '../components/react-diagrams/Application';\r\n\r\nexport default function EditorPage() {\r\n  var app = new Application();\r\n  return <BodyWidget app={app} />\r\n}","export default __webpack_public_path__ + \"static/media/flow.43bedc99.svg\";","export default __webpack_public_path__ + \"static/media/cym_s.cbee123b.svg\";","import flowDiagram from '../assets/flow.svg'\r\nimport cym_s from '../assets/cym_s.svg'\r\nexport default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4CPS!\r\n        </h2>\r\n        <img src={flowDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n        <img src={cym_s} alt=\"CYM-S\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/cym_s_extended.79a380b4.svg\";","import modelsDiagram from '../assets/cym_s_extended.svg'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/cym_d.8652356e.svg\";","import stateDiagram from '../assets/cym_d.svg'\r\nexport default function StatePage() {\r\n    return <div>\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","import { useEffect } from \"react\";\r\nimport Prism from \"prismjs\";\r\nimport paletteNodes from \"../paletteNodes\";\r\n\r\nexport default function PalettePage() {\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n    }, [])\r\n    return <div>\r\n\r\n        {\r\n            paletteNodes.map((node) => {\r\n                return <div key={node.name} className=\"grid-container\" style={{\r\n                    display: 'grid',\r\n                    gridTemplateColumns: ' 1fr 1fr',\r\n                    gridGap: '20px'\r\n                }}>\r\n                    <pre className=\"grid-child \">\r\n                        <code className=\"language-clike\">{JSON.stringify(node, null, \"\\t\")}</code>\r\n                    </pre>\r\n                    <div className=\"grid-child\">\r\n                        <div style={{ maxWidth: '400px', border: 'solid', fontSize: '.9em', color: 'black', margin: '60px 0px 25px 0', backgroundColor: 'lightgrey' }}>\r\n                            <div style={{ width: '100%', borderBottom: 'solid 3px', fontSize: '1.2em' }}>\r\n                                {node.name}\r\n                            </div>\r\n\r\n                            {node.extras.library &&\r\n                                <div style={{ width: '100%', borderBottom: 'solid 2px' }}>\r\n                                    Library={node.extras.library}\r\n                                </div>\r\n                            }\r\n                            {node.ins && node.ins.length > 0 &&\r\n                                node.ins.map((port: any) => {\r\n                                    return <div key={port}>\r\n                                        <p>{port}</p>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                            {node.outs && node.outs.length > 0 &&\r\n                                node.outs.map((port: any) => {\r\n                                    return <div key={port}>\r\n                                        <p>{port}</p>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            )\r\n        }\r\n\r\n    </div>\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport StatePage from './pages/State';\r\nimport PalettePage from './pages/Palette';\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Routes >\r\n          <Route path='/mdd4/' element={<HomePage />} />\r\n          <Route path='/mdd4/models' element={<ModelsPage />} />\r\n          <Route path='/mdd4/state' element={<StatePage />} />\r\n          <Route path='/mdd4/palette' element={<PalettePage />} />\r\n          <Route path='/mdd4/editor' element={<EditorPage />} />\r\n        </Routes>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}