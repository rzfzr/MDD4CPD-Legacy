{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","components/Code.tsx","components/react-diagrams/TrayWidget.tsx","components/react-diagrams/TrayItemWidget.tsx","components/react-diagrams/helpers/DemoCanvasWidget.tsx","components/react-diagrams/BodyWidget.tsx","components/react-diagrams/Application.ts","components/react-diagrams/index.tsx","pages/Editor.tsx","pages/Home.tsx","assets/models.png","pages/Models.tsx","assets/state.png","pages/State.tsx","pages/Palette.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","generateCode","model","Object","keys","length","console","log","links","entries","layers","models","forEach","x","nodes","code","add","message","m","getLink","linkID","find","l","id","getPort","nodeID","portID","n","ports","p","controller","name","includes","port","link","toPort","target","targetPort","toNode","parentNode","conditionNode","source","sourcePort","error","getValue","outcome","getOutcome","replace","original","level","split","line","repeat","join","formatCode","Code","setCode","useEffect","Prism","highlightAll","setInterval","temp","localStorage","getItem","setItem","JSON","parse","className","S","styled","div","TrayWidget","Tray","this","props","children","React","TrayItemWidget","draggable","onDragStart","dataTransfer","setData","stringify","background","css","DemoCanvasWidget","styles","Expand","Container","paletteNodes","analogPorts","digitalPorts","ins","outs","BodyWidget","app","getDiagramEngine","getModel","serialize","Body","Content","width","height","map","node","Layer","onDrop","data","getData","DefaultNodeModel","method","addOutPort","addInPort","point","getRelativeMousePoint","setPosition","addNode","forceUpdate","onDragOver","preventDefault","engine","Application","activeModel","diagramEngine","SRD","newModel","setModel","EditorPage","HomePage","ModelsPage","src","modelsDiagram","alt","maxHeight","maxWidth","StatePage","stateDiagram","PalettePage","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52595277.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport { AppBar } from '@material-ui/core';\r\nimport PaletteIcon from '@material-ui/icons/Palette';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Models\" value=\"/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction label=\"State\" value=\"/state\" icon={<SwapHorizIcon />} />\r\n                <BottomNavigationAction label=\"Editor\" value=\"/editor\" icon={<EditIcon />} />\r\n                <BottomNavigationAction label=\"Palette\" value=\"/palette\" icon={<PaletteIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\nimport Prism from \"prismjs\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\n// import \"./prism.css\";\r\n\r\n\r\nfunction generateCode(model: any): string {\r\n\r\n    if (Object.keys(model).length === 0) {\r\n        return 'Empty Diagram';\r\n    }\r\n\r\n    console.log('generating from ', model)\r\n    let links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    let nodes: any[] = []\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        nodes.push(x[1])\r\n    })\r\n\r\n\r\n    // if (links.length === 0) {\r\n    //     return 'No links'\r\n    // }\r\n    if (nodes.length === 0) {\r\n        return 'No nodes'\r\n    }\r\n\r\n\r\n    // localStorage.setItem('oldModel', model);\r\n\r\n    // setCode(generateCode(JSON.parse(localStorage.getItem('model') || '{}')));\r\n\r\n\r\n    // console.log('Generating code from model:', model)\r\n    // let code = \"Model: \" + JSON.stringify(model) + \"\\n\\n\\n\"\r\n    let code = ''\r\n\r\n    // console.log('Controller:', controller, 'Links:', links, 'Nodes:', nodes)\r\n\r\n    let add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n    };\r\n    let getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    let getPort = (nodeID: string, portID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID).ports\r\n            .find((p: any) => p.id === portID);\r\n    }\r\n    let getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    let getValue = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'value').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.source, link.sourcePort)\r\n        } catch (error) {\r\n            // console.log(error)\r\n            return { name: '/* Lacking Value */' }\r\n        }\r\n    }\r\n    let getOutcome = (conditionNode: any) => {\r\n        try {\r\n            let linkID = conditionNode.ports.find((p: any) => p.name === 'True').links[0]\r\n            let link = getLink(linkID)\r\n            return getPort(link.target, link.targetPort)\r\n        } catch (error) {\r\n            // console.log(error)\r\n            return { label: '//Lacking Outcome' }\r\n        }\r\n    }\r\n    let controller = nodes.find((x: any) => x.name.includes('Arduino'))\r\n\r\n\r\n\r\n    if (!controller) return 'No Arduino'\r\n\r\n\r\n    controller.ports.forEach((port: any) => {\r\n        add(port.label, \"{\\n\");\r\n\r\n        port.links.forEach((l: any) => {\r\n            let link = getLink(l);\r\n            let toPort = getPort(link.target, link.targetPort)\r\n            let toNode = getNode(toPort.parentNode)\r\n\r\n\r\n\r\n            if (toNode.name === \"Condition\") {\r\n                let value = getValue(toNode)\r\n                let outcome = getOutcome(toNode)\r\n\r\n                add('if (', value.name, toPort.name.replace('if', ''), ') {')\r\n                add(outcome.label)\r\n                add(\"}\\n\");\r\n            } else {\r\n                console.log(toNode)\r\n                // let outcome = getOutcome(toNode)\r\n                add(toNode.ports[0].name)\r\n\r\n\r\n            }\r\n            // add(link.target)\r\n\r\n\r\n\r\n\r\n\r\n\r\n        })\r\n\r\n        add(\"}\\n\");\r\n        // getToPorts(port)\r\n\r\n    })\r\n\r\n    //     element.methods.forEach((method) => {\r\n\r\n    //       console.log(\"................................\", this.getToElements(method));\r\n\r\n    //       this.getToElements(method).forEach((toElement) => {\r\n    //         console.log(\"getToElements:\", method, toElement);\r\n\r\n    //         let relation = this.relations.find((rel) => rel.toElement == toElement);\r\n\r\n    //         console.log(\"-------------------------------------method, \", method);\r\n    //         console.log(\"toElement, \", toElement);\r\n    //         console.log(\"relation, \", relation);\r\n    //         if (toElement.name && (toElement.name.includes(\"if\") || toElement.name.includes(\"while\")) && relation) {\r\n    //           const conditionText = toElement.name.includes(\"if\") ? \"if\" : \"while\"; //todo add more\r\n\r\n    //           // let value = toElement.methodText;\r\n\r\n    //           let value = this.relations.find(\r\n    //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"Value\"\r\n    //           ).toElement.methodText;\r\n\r\n    //           let ifTrues = this.relations.filter(\r\n    //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"True\"\r\n    //           );\r\n    //           console.log(\"trues: --------------------------------\");\r\n    //           ifTrues.forEach((t) => {\r\n    //             console.log(t);\r\n    //             console.log(t.coordinates.h, t.coordinates.w, t.coordinates.x, t.coordinates.y);\r\n\r\n    //             console.table(t.toElement);\r\n    //           });\r\n    //           console.log(\"--------------------------------\");\r\n\r\n    //           let ifFalses = this.relations.filter(\r\n    //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"False\"\r\n    //           );\r\n\r\n    //           let condition = toElement.name.replace(\"if\", \"\").replace(\"while\", \"\").replace(\" \", \"\");\r\n\r\n    //           p(conditionText, \" (\", value, \" \", condition, \"){ \\n\");\r\n\r\n    //           ifTrues.forEach((ifTrue) => {\r\n    //             p(ifTrue.toElement.name || ifTrue.toElement.parentName, \";\");\r\n    //           });\r\n\r\n    //           ifFalses.forEach((ifFalse) => {\r\n    //             p(\"else {\");\r\n    //             p(ifFalse.toElement.name || ifFalse.toElement.parentName, \";\");\r\n    //           });\r\n\r\n    //           p(\"}\");\r\n    //         } else {\r\n    //           p(toElement.methodText, \";\");\r\n    //           p(\"\\n}\");\r\n    //         }\r\n    //       });\r\n\r\n    //       p(\"}\\n\");\r\n    //     });\r\n    //   };\r\n\r\n\r\n    //   let usedDigital = 0;\r\n    //   let usedAnalog = 0;\r\n    //   let usedLibraries = [];\r\n\r\n    //   this.components.forEach((component) => {\r\n    //     usedDigital += parseInt(component.digitalPorts);\r\n    //     usedAnalog += parseInt(component.analogPorts);\r\n    //     console.log(component);\r\n\r\n    //     if (component.type == \"component\") usedLibraries.push(component.name);\r\n    //   });\r\n\r\n    //   usedLibraries.forEach((lib) => {\r\n    //     p(\"#include <\" + lib + \".h>\");\r\n    //   });\r\n    //   p(\"// Code generated for Arduino \", this.arduino.model);\r\n    //   p(\r\n    //     \"// with \",\r\n    //     this.arduino.digitalPorts,\r\n    //     \" digital ports in total with \",\r\n    //     usedDigital,\r\n    //     \" in use and \",\r\n    //     this.arduino.digitalPorts - usedDigital,\r\n    //     \" free\"\r\n    //   );\r\n    //   p(\r\n    //     \"// and \",\r\n    //     this.arduino.analogPorts,\r\n    //     \" analog ports in total with \",\r\n    //     usedAnalog,\r\n    //     \" in use and \",\r\n    //     this.arduino.analogPorts - usedAnalog,\r\n    //     \" free\"\r\n    //   );\r\n\r\n    //   generateDecision(this.arduino);\r\n    function formatCode(original: string) {\r\n        // console.log('formatting ', original)\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return formatCode(code);\r\n}\r\nexport default function Code() {\r\n    const [code, setCode] = useState('Hello World')\r\n    useEffect(() => {\r\n        Prism.highlightAll();\r\n        setInterval(() => {\r\n            try {\r\n                let temp = localStorage.getItem('model')\r\n                if (temp === localStorage.getItem('oldModel')) {\r\n                    // console.log('Same as old, skipping code generation')\r\n                } else {\r\n                    localStorage.setItem('oldModel', temp || '{}')\r\n                    setCode(generateCode(JSON.parse(temp || '{}')));\r\n                }\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }, 1500)\r\n    }, []);\r\n    return (\r\n        <div className=\"Code\">\r\n            <pre className=\"line-numbers\">\r\n                <code className={`language-clike`}>{code}</code>\r\n            </pre>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nnamespace S {\n\texport const Tray = styled.div`\n\t\tmin-width: 200px;\n\t\tbackground: rgb(20, 20, 20);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t`;\n}\n\nexport class TrayWidget extends React.Component {\n\trender() {\n\t\treturn <S.Tray>{this.props.children}</S.Tray>;\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\n\nexport interface TrayItemWidgetProps {\n\tmodel: any;\n\tcolor?: string;\n\tname: string;\n}\n\nnamespace S {\n\texport const Tray = styled.div<{ color: string }>`\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial;\n\t\tpadding: 5px;\n\t\tmargin: 0px 10px;\n\t\tborder: solid 1px ${(p) => p.color};\n\t\tborder-radius: 5px;\n\t\tmargin-bottom: 2px;\n\t\tcursor: pointer;\n\t`;\n}\n\nexport class TrayItemWidget extends React.Component<TrayItemWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<S.Tray\n\t\t\t\tcolor={this.props.color || 'red'}\n\t\t\t\tdraggable={true}\n\t\t\t\tonDragStart={(event) => {\n\t\t\t\t\tevent.dataTransfer.setData('storm-diagram-node', JSON.stringify(this.props.model));\n\t\t\t\t}}\n\t\t\t\tclassName=\"tray-item\">\n\t\t\t\t{this.props.name}\n\t\t\t</S.Tray>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css, Global } from '@emotion/react';\n\nexport interface DemoCanvasWidgetProps {\n\tcolor?: string;\n\tbackground?: string;\n}\n\nnamespace S {\n\texport const Container = styled.div<{ color: string; background: string }>`\n\t\theight: 100%;\n\t\tbackground-color: ${(p) => p.background};\n\t\tbackground-size: 50px 50px;\n\t\tdisplay: flex;\n\n\t\t> * {\n\t\t\theight: 100%;\n\t\t\tmin-height: 100%;\n\t\t\twidth: 100%;\n\t\t}\n\n\t\tbackground-image: linear-gradient(\n\t\t\t\t0deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t),\n\t\t\tlinear-gradient(\n\t\t\t\t90deg,\n\t\t\t\ttransparent 24%,\n\t\t\t\t${(p) => p.color} 25%,\n\t\t\t\t${(p) => p.color} 26%,\n\t\t\t\ttransparent 27%,\n\t\t\t\ttransparent 74%,\n\t\t\t\t${(p) => p.color} 75%,\n\t\t\t\t${(p) => p.color} 76%,\n\t\t\t\ttransparent 77%,\n\t\t\t\ttransparent\n\t\t\t);\n\t`;\n\n\texport const Expand = css`\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\theight: 100%;\n\t\t}\n\t`;\n}\n\nexport class DemoCanvasWidget extends React.Component<DemoCanvasWidgetProps> {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Global styles={S.Expand} />\n\t\t\t\t<S.Container\n\t\t\t\t\tbackground={this.props.background || 'rgb(60, 60, 60)'}\n\t\t\t\t\tcolor={this.props.color || 'rgba(255,255,255, 0.05)'}>\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</S.Container>\n\t\t\t</>\n\t\t);\n\t}\n}\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { TrayWidget } from './TrayWidget';\nimport { Application } from './Application';\nimport { TrayItemWidget } from './TrayItemWidget';\nimport { DefaultNodeModel } from '@projectstorm/react-diagrams';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from './helpers/DemoCanvasWidget';\nimport styled from '@emotion/styled';\nimport { Button } from '@material-ui/core';\n\nexport interface BodyWidgetProps {\n\tapp: Application;\n}\n\nnamespace S {\n\texport const Body = styled.div`\n\t\tflex-grow: 1;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tmin-height: 100%;\n\t`;\n\n\texport const Header = styled.div`\n\t\tdisplay: flex;\n\t\tbackground: rgb(30, 30, 30);\n\t\tflex-grow: 0;\n\t\tflex-shrink: 0;\n\t\tcolor: white;\n\t\tfont-family: Helvetica, Arial, sans-serif;\n\t\tpadding: 10px;\n\t\talign-items: center;\n\t`;\n\n\texport const Content = styled.div`\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t`;\n\n\texport const Layer = styled.div`\n\t\tposition: relative;\n\t\tflex-grow: 1;\n\t`;\n}\n\nlet paletteNodes = [\n\t{\n\t\tname: 'Arduino Uno',\n\t\tcolor: 'green',\n\t\tanalogPorts: 6,\n\t\tdigitalPorts: 14,\n\t\tins: [],\n\t\touts: [\n\t\t\t'setup()',\n\t\t\t'loop()'\n\t\t]\n\t}, {\n\t\tname: 'Condition',\n\t\tcolor: 'grey',\n\t\touts: [\n\t\t\t'True',\n\t\t\t'False'\n\t\t],\n\t\tins: [\n\t\t\t'if <= 20',\n\t\t\t'value'\n\t\t]\n\t}, {\n\t\tname: 'Led',\n\t\tcolor: 'red',\n\t\tins: [\n\t\t\t'setValue()'\n\t\t],\n\t\touts: []\n\n\t}, {\n\t\tname: 'TemperatureSensor',\n\t\tcolor: 'blue',\n\t\tins: [],\n\t\touts: [\n\t\t\t'getValue()'\n\t\t]\n\t}, {\n\t\tname: 'Button',\n\t\tcolor: 'blue',\n\t\tins: [],\n\t\touts: [\n\t\t\t'getValue()'\n\t\t]\n\t}, {\n\t\tname: 'Servo',\n\t\tcolor: 'orange',\n\t\tins: [\n\t\t\t'void detach()',\n\t\t\t'void write(int)',\n\t\t\t'void writeMicroseconds(int)',\n\t\t],\n\t\touts: [\n\t\t\t'uint8_t attach(int)',\n\t\t\t'uint8_t attach(int, int, int)',\n\t\t\t'int read()',\n\t\t\t'int readMicroseconds()',\n\t\t\t'bool attached()',\n\t\t]\n\t}, {\n\t\tname: 'Stepper',\n\t\tcolor: 'orange',\n\t\tins: [\n\t\t\t'Stepper(int, int, int)',\n\t\t\t'Stepper(int, int, int, int, int)',\n\t\t\t'Stepper(int, int, int, int, int, int)',\n\t\t\t'-',\n\t\t\t'void setSpeed(long whatSpeed)',\n\t\t\t'void step(int number_of_steps)',\n\t\t],\n\t\touts: [\n\t\t\t'int version(void)',\n\t\t]\n\t}\n]\n\n\n\nexport class BodyWidget extends React.Component<BodyWidgetProps> {\n\tcomponentDidMount() {\n\t\tsetInterval(() => {\n\t\t\tlet temp = JSON.stringify(this.props.app.getDiagramEngine().getModel().serialize())\n\t\t\tif (temp !== localStorage.getItem('model')) {\n\t\t\t\tlocalStorage.setItem('model', temp);\n\t\t\t}\n\t\t}, 1500)\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<S.Body>\n\t\t\t\t<S.Content style={{ width: '100%', height: '100%' }}>\n\t\t\t\t\t<TrayWidget>\n\n\t\t\t\t\t\t{paletteNodes.map(node =>\n\t\t\t\t\t\t\t// <Favorite key={favorite.position} favorite={favorite} />\n\t\t\t\t\t\t\t<TrayItemWidget model={node} name={node.name} color={node.color} />\n\t\t\t\t\t\t)}\n\n\n\t\t\t\t\t\t{/* <TrayItemWidget model={{ type: 'Condition' }} name=\"Condition\" color=\"grey\" /> */}\n\t\t\t\t\t\t{/* <div style={{ width: '100%', height: '5%' }}>\n\t\t\t\t\t\t\t<Button variant=\"contained\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tlocalStorage.setItem('model', JSON.stringify(this.props.app.getDiagramEngine().getModel().serialize()));\n\t\t\t\t\t\t\t\t}}>Save</Button>\n\t\t\t\t\t\t</div> */}\n\t\t\t\t\t</TrayWidget>\n\n\t\t\t\t\t<S.Layer\n\t\t\t\t\t\tonDrop={(event) => {\n\t\t\t\t\t\t\tvar data = JSON.parse(event.dataTransfer.getData('storm-diagram-node'));\n\t\t\t\t\t\t\t// var nodesCount = _.keys(this.props.app.getDiagramEngine().getModel().getNodes()).length;\n\n\t\t\t\t\t\t\tlet node: any = null;//DefaultNodeModel\n\t\t\t\t\t\t\tif (data) {\n\t\t\t\t\t\t\t\t// console.log('node', node)\n\t\t\t\t\t\t\t\tnode = new DefaultNodeModel(data.name, data.color);\n\t\t\t\t\t\t\t\tdata.outs.forEach((method: string) => {\n\t\t\t\t\t\t\t\t\tnode.addOutPort(method)\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tdata.ins.forEach((method: string) => {\n\t\t\t\t\t\t\t\t\tnode.addInPort(method)\n\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar point = this.props.app.getDiagramEngine().getRelativeMousePoint(event);\n\t\t\t\t\t\t\tnode.setPosition(point);\n\t\t\t\t\t\t\tthis.props.app.getDiagramEngine().getModel().addNode(node);\n\t\t\t\t\t\t\tthis.forceUpdate();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tonDragOver={(event) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t<div style={{ width: '100%', height: '100%' }}>\n\t\t\t\t\t\t\t<DemoCanvasWidget >\n\t\t\t\t\t\t\t\t<CanvasWidget engine={this.props.app.getDiagramEngine()} />\n\t\t\t\t\t\t\t</DemoCanvasWidget>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</S.Layer>\n\t\t\t\t</S.Content>\n\t\t\t</S.Body>\n\t\t)\n\t}\n}\n","import * as SRD from '@projectstorm/react-diagrams';\n\n/**\n * @author Dylan Vorster\n */\nexport class Application {\n\tprotected activeModel: any;//SRD.DiagramModel\n\tprotected diagramEngine: SRD.DiagramEngine;\n\n\tconstructor() {\n\t\tthis.diagramEngine = SRD.default();\n\t\tthis.newModel();\n\t}\n\n\tpublic newModel() {\n\t\tthis.activeModel = new SRD.DiagramModel();\n\t\tthis.diagramEngine.setModel(this.activeModel);\n\n\t\t//3-A) create a default node\n\t\t// var node1 = new SRD.DefaultNodeModel('Node 1', 'rgb(0,192,255)');\n\t\t// let port = node1.addOutPort('Out');\n\t\t// node1.setPosition(100, 100);\n\n\t\t//3-B) create another default node\n\t\t// var node2 = new SRD.DefaultNodeModel('Node 2', 'rgb(192,255,0)');\n\t\t// let port2 = node2.addInPort('In');\n\t\t// node2.setPosition(400, 100);\n\n\t\t// link the ports\n\t\t// let link1 = port.link(port2);\n\n\t\t// this.activeModel.addAll(node2);\n\t\t// this.activeModel.addAll(node1, node2, link1);\n\t}\n\n\tpublic getActiveDiagram(): SRD.DiagramModel {\n\t\treturn this.activeModel;\n\t}\n\n\tpublic getDiagramEngine(): SRD.DiagramEngine {\n\t\treturn this.diagramEngine;\n\t}\n}\n","import * as React from 'react';\n\nimport { BodyWidget } from './BodyWidget';\nimport { Application } from './Application';\n\nexport default () => {\n\tvar app = new Application();\n\treturn <BodyWidget app={app} />;\n};\n","import Code from \"../components/Code\"\r\nimport DiagramWithPalette from '../components/react-diagrams/index';\r\n\r\nexport default function EditorPage() {\r\n  return <div className=\"float-container\" >\r\n    <div className=\"float-child-left\">\r\n      <DiagramWithPalette />\r\n    </div>\r\n    <div className=\"float-child-right\">\r\n      <Code />\r\n    </div>\r\n  </div>\r\n}","export default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4IoT!\r\n        </h2>\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/models.d4b41b6f.png\";","import modelsDiagram from '../assets/models.png'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/state.da9f951e.png\";","import stateDiagram from '../assets/state.png'\r\nexport default function StatePage() {\r\n    return <div>\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","import Diagram from \"../components/Diagram\";\r\nexport default function PalettePage() {\r\n    return <div>\r\n        <h3>\r\n            Caution!\r\n        </h3>\r\n        <div style={{ width: '80vh', height: '60vh' }}>\r\n            {/* <Diagram /> */}\r\n        </div>\r\n    </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\n\r\nimport history from './history'\r\n\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport ModelsPage from './pages/Models';\r\nimport StatePage from './pages/State';\r\nimport PalettePage from './pages/Palette';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <Route path='/models' exact component={ModelsPage} />\r\n          <Route path='/state' exact component={StatePage} />\r\n          <Route path='/palette' exact component={PalettePage} />\r\n          <Route path='/editor' component={EditorPage} />\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}