{"version":3,"sources":["history.tsx","components/NavigationBar.tsx","GlobalContext.tsx","components/Code.tsx","components/Diagram.tsx","pages/Editor.tsx","pages/Home.tsx","assets/models.png","pages/Models.tsx","assets/state.png","pages/State.tsx","App.tsx","index.tsx"],"names":["createHashHistory","SimpleBottomNavigation","useState","value","setValue","currentPath","history","location","pathname","AppBar","position","color","style","top","bottom","BottomNavigation","onChange","event","newValue","push","showLabels","BottomNavigationAction","label","icon","GlobalContext","createContext","model","setModel","a","generateCode","code","links","Object","entries","layers","models","forEach","x","nodes","controller","find","name","add","message","m","getLink","linkID","l","id","getPort","nodeID","portID","n","ports","p","port","link","toPort","target","targetPort","toNode","parentNode","conditionNode","source","sourcePort","getValue","outcome","getOutcome","replace","original","level","split","line","includes","repeat","join","formatCode","Code","setCode","useEffect","Prism","highlightAll","setInterval","JSON","parse","localStorage","getItem","error","console","log","className","engine","createEngine","nextModel","DiagramModel","n0","DefaultNodeModel","p00","addOutPort","setPosition","n2","p20","addInPort","p21","p23","n3","p30","n4","p40","addAll","getDefaultModel","setItem","stringify","serialize","width","height","EditorPage","HomePage","ModelsPage","src","modelsDiagram","alt","maxHeight","maxWidth","StatePage","stateDiagram","App","providerValue","useMemo","path","exact","component","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c14d4156.chunk.js","sourcesContent":["import { createHashHistory } from 'history'\r\nexport default createHashHistory({\r\n})","import { useState } from 'react';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport MapIcon from '@material-ui/icons/Map';\r\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\r\nimport { AppBar } from '@material-ui/core';\r\nimport history from '../history';\r\n\r\nexport default function SimpleBottomNavigation() {\r\n    const [value, setValue] = useState('/');\r\n    let currentPath = history.location.pathname\r\n    if (value !== currentPath)\r\n        setValue(currentPath)\r\n    return (\r\n        <AppBar position=\"fixed\" color=\"primary\" style={{ top: \"auto\", bottom: 0 }}>\r\n            <BottomNavigation\r\n                value={value}\r\n                onChange={(event, newValue) => {\r\n                    setValue(newValue);\r\n                    history.push(newValue)\r\n                }}\r\n                showLabels\r\n            >\r\n                location.pathname\r\n                <BottomNavigationAction label=\"Home\" value=\"/\" icon={<HomeIcon />} />\r\n                <BottomNavigationAction label=\"Models\" value=\"/models\" icon={<MapIcon />} />\r\n                <BottomNavigationAction label=\"State\" value=\"/state\" icon={<SwapHorizIcon />} />\r\n                <BottomNavigationAction label=\"Editor\" value=\"/editor\" icon={<EditIcon />} />\r\n            </BottomNavigation>\r\n        </AppBar>\r\n    );\r\n}","import { createContext } from \"react\";\r\n\r\nexport const GlobalContext = createContext({\r\n    model: {} as Object,\r\n    setModel: (a: any) => { },\r\n});","import { useEffect, useState } from \"react\";\r\nimport Prism from \"prismjs\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\nimport \"./prism.css\";\r\n\r\n\r\nfunction generateCode(model: any): string {\r\n\r\n\r\n    // console.log('Generating code from model:', model)\r\n    let code = ''\r\n    // let code = \"Model: \" + JSON.stringify(model) + \"\\n\\n\\n\"\r\n    let links: any[] = []\r\n    Object.entries(model.layers[0].models).forEach((x: any) => {\r\n        links.push(x[1])\r\n    })\r\n    let nodes: any[] = []\r\n    Object.entries(model.layers[1].models).forEach((x: any) => {\r\n        nodes.push(x[1])\r\n    })\r\n    let controller = nodes.find((x: any) => x.name === 'Arduino')\r\n    // console.log('Controller:', controller, 'Links:', links, 'Nodes:', nodes)\r\n\r\n\r\n\r\n    let add = (...message: string[]) => {\r\n        message.forEach((m) => {\r\n            code += m;\r\n        });\r\n        code += \"\\n\";\r\n    };\r\n    let getLink = (linkID: string) => {\r\n        return links.find(l => l.id === linkID)\r\n    }\r\n    let getPort = (nodeID: string, portID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID).ports\r\n            .find((p: any) => p.id === portID);\r\n    }\r\n    let getNode = (nodeID: string) => {\r\n        return nodes.find((n: any) => n.id === nodeID)\r\n    }\r\n    let getValue = (conditionNode: any) => {\r\n        let linkID = conditionNode.ports.find((p: any) => p.name === 'value').links[0]\r\n        let link = getLink(linkID)\r\n        return getPort(link.source, link.sourcePort)\r\n    }\r\n    let getOutcome = (conditionNode: any) => {\r\n        let linkID = conditionNode.ports.find((p: any) => p.name === 'True').links[0]\r\n        let link = getLink(linkID)\r\n        return getPort(link.target, link.targetPort)\r\n    }\r\n\r\n\r\n\r\n    controller.ports.forEach((port: any) => {\r\n        add(port.label, \"{\\n\");\r\n\r\n        port.links.forEach((l: any) => {\r\n            let link = getLink(l);\r\n            let toPort = getPort(link.target, link.targetPort)\r\n            let toNode = getNode(toPort.parentNode)\r\n\r\n\r\n\r\n            if (toNode.name === \"Condition\") {\r\n                let value = getValue(toNode)\r\n                let outcome = getOutcome(toNode)\r\n\r\n                add('if (', value.name, toPort.name.replace('if', ''), ') {')\r\n\r\n\r\n                add(outcome.label)\r\n\r\n\r\n\r\n                add(\"}\\n\");\r\n\r\n            }\r\n            // add(link.target)\r\n\r\n\r\n\r\n\r\n\r\n\r\n        })\r\n\r\n        add(\"}\\n\");\r\n        // getToPorts(port)\r\n\r\n    })\r\n\r\n    //     element.methods.forEach((method) => {\r\n\r\n    //       console.log(\"................................\", this.getToElements(method));\r\n\r\n    //       this.getToElements(method).forEach((toElement) => {\r\n    //         console.log(\"getToElements:\", method, toElement);\r\n\r\n    //         let relation = this.relations.find((rel) => rel.toElement == toElement);\r\n\r\n    //         console.log(\"-------------------------------------method, \", method);\r\n    //         console.log(\"toElement, \", toElement);\r\n    //         console.log(\"relation, \", relation);\r\n    //         if (toElement.name && (toElement.name.includes(\"if\") || toElement.name.includes(\"while\")) && relation) {\r\n    //           const conditionText = toElement.name.includes(\"if\") ? \"if\" : \"while\"; //todo add more\r\n\r\n    //           // let value = toElement.methodText;\r\n\r\n    //           let value = this.relations.find(\r\n    //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"Value\"\r\n    //           ).toElement.methodText;\r\n\r\n    //           let ifTrues = this.relations.filter(\r\n    //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"True\"\r\n    //           );\r\n    //           console.log(\"trues: --------------------------------\");\r\n    //           ifTrues.forEach((t) => {\r\n    //             console.log(t);\r\n    //             console.log(t.coordinates.h, t.coordinates.w, t.coordinates.x, t.coordinates.y);\r\n\r\n    //             console.table(t.toElement);\r\n    //           });\r\n    //           console.log(\"--------------------------------\");\r\n\r\n    //           let ifFalses = this.relations.filter(\r\n    //             (relation) => relation.fromElement.name == toElement.name && relation.name == \"False\"\r\n    //           );\r\n\r\n    //           let condition = toElement.name.replace(\"if\", \"\").replace(\"while\", \"\").replace(\" \", \"\");\r\n\r\n    //           p(conditionText, \" (\", value, \" \", condition, \"){ \\n\");\r\n\r\n    //           ifTrues.forEach((ifTrue) => {\r\n    //             p(ifTrue.toElement.name || ifTrue.toElement.parentName, \";\");\r\n    //           });\r\n\r\n    //           ifFalses.forEach((ifFalse) => {\r\n    //             p(\"else {\");\r\n    //             p(ifFalse.toElement.name || ifFalse.toElement.parentName, \";\");\r\n    //           });\r\n\r\n    //           p(\"}\");\r\n    //         } else {\r\n    //           p(toElement.methodText, \";\");\r\n    //           p(\"\\n}\");\r\n    //         }\r\n    //       });\r\n\r\n    //       p(\"}\\n\");\r\n    //     });\r\n    //   };\r\n\r\n\r\n    //   let usedDigital = 0;\r\n    //   let usedAnalog = 0;\r\n    //   let usedLibraries = [];\r\n\r\n    //   this.components.forEach((component) => {\r\n    //     usedDigital += parseInt(component.digitalPorts);\r\n    //     usedAnalog += parseInt(component.analogPorts);\r\n    //     console.log(component);\r\n\r\n    //     if (component.type == \"component\") usedLibraries.push(component.name);\r\n    //   });\r\n\r\n    //   usedLibraries.forEach((lib) => {\r\n    //     p(\"#include <\" + lib + \".h>\");\r\n    //   });\r\n    //   p(\"// Code generated for Arduino \", this.arduino.model);\r\n    //   p(\r\n    //     \"// with \",\r\n    //     this.arduino.digitalPorts,\r\n    //     \" digital ports in total with \",\r\n    //     usedDigital,\r\n    //     \" in use and \",\r\n    //     this.arduino.digitalPorts - usedDigital,\r\n    //     \" free\"\r\n    //   );\r\n    //   p(\r\n    //     \"// and \",\r\n    //     this.arduino.analogPorts,\r\n    //     \" analog ports in total with \",\r\n    //     usedAnalog,\r\n    //     \" in use and \",\r\n    //     this.arduino.analogPorts - usedAnalog,\r\n    //     \" free\"\r\n    //   );\r\n\r\n    //   generateDecision(this.arduino);\r\n\r\n\r\n    function formatCode(original: string) {\r\n        // console.log('formatting ', original)\r\n        let code: any[] = [];\r\n        let level = 0;\r\n        let tab = \"    \";\r\n        original.split(\"\\n\").forEach((line) => {\r\n            if (line.includes(\"}\")) {\r\n                level--;\r\n            }\r\n            code.push(tab.repeat(level) + line);\r\n            if (line.includes(\"{\")) {\r\n                level++;\r\n            }\r\n        });\r\n        return code.join(\"\\n\");\r\n    }\r\n    return formatCode(code);\r\n}\r\n\r\n\r\n\r\nexport default function Code() {\r\n    const [code, setCode] = useState('Hello World')\r\n\r\n    useEffect(() => {\r\n        // console.log('Rendering Code')\r\n        Prism.highlightAll();\r\n        setInterval(() => {\r\n            // console.log('Getting from localstorage')\r\n            try {\r\n                setCode(generateCode(JSON.parse(localStorage.getItem('model') || '{}')));\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }, 5000)\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"Code\">\r\n            <pre className=\"line-numbers\">\r\n                <code className={`language-clike`}>{code}</code>\r\n            </pre>\r\n        </div>\r\n    );\r\n}","import { useContext, useEffect } from 'react';\r\nimport { GlobalContext } from '../GlobalContext';\r\nimport createEngine, {\r\n    DefaultNodeModel,\r\n    DiagramModel\r\n} from '@projectstorm/react-diagrams';\r\nimport { Button, TextField } from '@material-ui/core';\r\n\r\nimport {\r\n    CanvasWidget\r\n} from '@projectstorm/react-canvas-core';\r\nimport { EditableLabelModel } from './react-diagrams/EditableLabelModel';\r\nimport { EditableLabelFactory } from './react-diagrams/EditableLabelFactory';\r\n\r\n\r\n\r\nfunction getDefaultModel() {\r\n    const nextModel = new DiagramModel() as any;\r\n    // console.log(Object.keys(next))\r\n    const n0 = new DefaultNodeModel('Arduino', 'green');\r\n    const p00 = n0.addOutPort('setup()');\r\n    n0.addOutPort('loop()');\r\n    n0.setPosition(50, 70);\r\n    const n2 = new DefaultNodeModel('Condition', 'grey')\r\n    const p20 = n2.addInPort('if <= 20');\r\n    const p21 = n2.addInPort('value');\r\n    const p23 = n2.addOutPort('True');\r\n    n2.addOutPort('False');\r\n    n2.setPosition(230, 100)\r\n\r\n    const n3 = new DefaultNodeModel('Led', 'red');\r\n    const p30 = n3.addInPort('setValue()');\r\n    n3.setPosition(400, 70);\r\n\r\n    const n4 = new DefaultNodeModel('TemperatureSensor', 'Blue');\r\n    const p40 = n4.addOutPort('getValue()');\r\n    n4.setPosition(30, 170);\r\n\r\n    nextModel.addAll(n0, n2, p00.link(p20), p23.link(p30), p40.link(p21), n3, n4);\r\n    return nextModel\r\n}\r\nexport default function SimpleBottomNavigation() {\r\n\r\n    const engine = createEngine();\r\n\r\n\r\n\r\n    // let nextModel = new DiagramModel() as any;\r\n    // nextModel.deserializeModel(JSON.parse(JSON.stringify(model)), engine)\r\n    // nextModel = nextModel.options.id ? nextModel : getDefaultModel()\r\n\r\n    // console.log('Setting engine with ', nextModel)\r\n    let model = getDefaultModel()\r\n    engine.setModel(model);\r\n\r\n    useEffect(() => {\r\n        console.log('Rendering Diagram')\r\n        setInterval(() => {\r\n            // console.log('Saving to localstorage')\r\n            localStorage.setItem('model', JSON.stringify(model.serialize()));\r\n        }, 5000)\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div style={{ width: '100%', height: '100%' }}>\r\n                <CanvasWidget className='canvas' engine={engine} />\r\n            </div>\r\n            {/* <div style={{ width: '100%', height: '5%' }}>\r\n                <Button variant=\"contained\"\r\n                    onClick={() => {\r\n                        // setModel(nextModel.serialize());\r\n                    }}>Go </Button>\r\n            </div> */}\r\n        </>\r\n    );\r\n}","import Code from \"../components/Code\"\r\nimport Diagram from \"../components/Diagram\";\r\n\r\nexport default function EditorPage() {\r\n  return <div className=\"float-container\" >\r\n    <div className=\"float-child-left\">\r\n      <Diagram />\r\n    </div>\r\n    <div className=\"float-child-right\">\r\n      <Code />\r\n    </div>\r\n  </div>\r\n}","export default function HomePage() {\r\n    return <div>\r\n        <h2>\r\n            Welcome to MDD4IoT!\r\n        </h2>\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/models.435be54c.png\";","import modelsDiagram from '../assets/models.png'\r\nexport default function ModelsPage() {\r\n    return <div>\r\n        <img src={modelsDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '100%' }} />\r\n    </div>\r\n}","export default __webpack_public_path__ + \"static/media/state.da9f951e.png\";","import stateDiagram from '../assets/state.png'\r\nexport default function StatePage() {\r\n    return <div>\r\n        <img src={stateDiagram} alt=\"Architecture Diagram\" style={{ maxHeight: '80vh', maxWidth: '90%' }} />\r\n    </div>\r\n}","import './App.css';\r\nimport NavigationBar from './components/NavigationBar'\r\nimport { Route, Router } from 'react-router-dom'\r\n\r\nimport history from './history'\r\nimport { GlobalContext } from './GlobalContext';\r\n\r\nimport EditorPage from './pages/Editor'\r\nimport HomePage from './pages/Home';\r\nimport { useMemo, useState } from 'react';\r\nimport ModelsPage from './pages/Models';\r\nimport StatePage from './pages/State';\r\n\r\nexport default function App() {\r\n  const [model, setModel] = useState({})\r\n  const providerValue = useMemo(() => ({\r\n    model, setModel\r\n  }), [model])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router history={history}>\r\n          <Route path='/' exact component={HomePage} />\r\n          <Route path='/models' exact component={ModelsPage} />\r\n          <Route path='/state' exact component={StatePage} />\r\n          <GlobalContext.Provider value={providerValue}>\r\n            <Route path='/editor' component={EditorPage} />\r\n          </GlobalContext.Provider>\r\n        </Router>\r\n        <NavigationBar />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}